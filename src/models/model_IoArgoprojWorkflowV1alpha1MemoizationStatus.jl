# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.MemoizationStatus
MemoizationStatus is the status of this memoized node

    IoArgoprojWorkflowV1alpha1MemoizationStatus(;
        cacheName=nothing,
        hit=nothing,
        key=nothing,
    )

    - cacheName::String : Cache is the name of the cache that was used
    - hit::Bool : Hit indicates whether this node was created from a cache entry
    - key::String : Key is the name of the key used for this node&#39;s cache
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1MemoizationStatus <: OpenAPI.APIModel
    cacheName::Union{Nothing, String} = nothing
    hit::Union{Nothing, Bool} = nothing
    key::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1MemoizationStatus(cacheName, hit, key, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1MemoizationStatus, Symbol("cacheName"), cacheName)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1MemoizationStatus, Symbol("hit"), hit)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1MemoizationStatus, Symbol("key"), key)
        return new(cacheName, hit, key, )
    end
end # type IoArgoprojWorkflowV1alpha1MemoizationStatus

const _property_types_IoArgoprojWorkflowV1alpha1MemoizationStatus = Dict{Symbol,String}(Symbol("cacheName")=>"String", Symbol("hit")=>"Bool", Symbol("key")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1MemoizationStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1MemoizationStatus[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1MemoizationStatus)
    o.cacheName === nothing && (return false)
    o.hit === nothing && (return false)
    o.key === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1MemoizationStatus }, name::Symbol, val)
end
