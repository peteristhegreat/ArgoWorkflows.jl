# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.DAGTemplate
DAGTemplate is a template subtype for directed acyclic graph templates

    IoArgoprojWorkflowV1alpha1DAGTemplate(;
        failFast=nothing,
        target=nothing,
        tasks=nothing,
    )

    - failFast::Bool : This flag is for DAG logic. The DAG logic has a built-in \&quot;fail fast\&quot; feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo-workflows/issues/1442
    - target::String : Target are one or more names of targets to execute in a DAG
    - tasks::Vector{IoArgoprojWorkflowV1alpha1DAGTask} : Tasks are a list of DAG tasks
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1DAGTemplate <: OpenAPI.APIModel
    failFast::Union{Nothing, Bool} = nothing
    target::Union{Nothing, String} = nothing
    tasks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojWorkflowV1alpha1DAGTask} }

    function IoArgoprojWorkflowV1alpha1DAGTemplate(failFast, target, tasks, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1DAGTemplate, Symbol("failFast"), failFast)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1DAGTemplate, Symbol("target"), target)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1DAGTemplate, Symbol("tasks"), tasks)
        return new(failFast, target, tasks, )
    end
end # type IoArgoprojWorkflowV1alpha1DAGTemplate

const _property_types_IoArgoprojWorkflowV1alpha1DAGTemplate = Dict{Symbol,String}(Symbol("failFast")=>"Bool", Symbol("target")=>"String", Symbol("tasks")=>"Vector{IoArgoprojWorkflowV1alpha1DAGTask}", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1DAGTemplate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1DAGTemplate[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1DAGTemplate)
    o.tasks === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1DAGTemplate }, name::Symbol, val)
end
