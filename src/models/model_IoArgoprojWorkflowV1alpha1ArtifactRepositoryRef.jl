# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.ArtifactRepositoryRef

    IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef(;
        configMap=nothing,
        key=nothing,
    )

    - configMap::String : The name of the config map. Defaults to \&quot;artifact-repositories\&quot;.
    - key::String : The config map key. Defaults to the value of the \&quot;workflows.argoproj.io/default-artifact-repository\&quot; annotation.
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef <: OpenAPI.APIModel
    configMap::Union{Nothing, String} = nothing
    key::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef(configMap, key, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef, Symbol("configMap"), configMap)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef, Symbol("key"), key)
        return new(configMap, key, )
    end
end # type IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef

const _property_types_IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef = Dict{Symbol,String}(Symbol("configMap")=>"String", Symbol("key")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef }, name::Symbol, val)
end
