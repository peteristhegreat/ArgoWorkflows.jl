# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.AMQPEventSource

    IoArgoprojEventsV1alpha1AMQPEventSource(;
        auth=nothing,
        connectionBackoff=nothing,
        consume=nothing,
        exchangeDeclare=nothing,
        exchangeName=nothing,
        exchangeType=nothing,
        filter=nothing,
        jsonBody=nothing,
        metadata=nothing,
        queueBind=nothing,
        queueDeclare=nothing,
        routingKey=nothing,
        tls=nothing,
        url=nothing,
        urlSecret=nothing,
    )

    - auth::IoArgoprojEventsV1alpha1BasicAuth
    - connectionBackoff::IoArgoprojEventsV1alpha1Backoff
    - consume::IoArgoprojEventsV1alpha1AMQPConsumeConfig
    - exchangeDeclare::IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig
    - exchangeName::String
    - exchangeType::String
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - jsonBody::Bool
    - metadata::Dict{String, String}
    - queueBind::IoArgoprojEventsV1alpha1AMQPQueueBindConfig
    - queueDeclare::IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig
    - routingKey::String
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - url::String
    - urlSecret::IoK8sApiCoreV1SecretKeySelector
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1AMQPEventSource <: OpenAPI.APIModel
    auth = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1BasicAuth }
    connectionBackoff = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Backoff }
    consume = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1AMQPConsumeConfig }
    exchangeDeclare = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig }
    exchangeName::Union{Nothing, String} = nothing
    exchangeType::Union{Nothing, String} = nothing
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    jsonBody::Union{Nothing, Bool} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    queueBind = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1AMQPQueueBindConfig }
    queueDeclare = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig }
    routingKey::Union{Nothing, String} = nothing
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    url::Union{Nothing, String} = nothing
    urlSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }

    function IoArgoprojEventsV1alpha1AMQPEventSource(auth, connectionBackoff, consume, exchangeDeclare, exchangeName, exchangeType, filter, jsonBody, metadata, queueBind, queueDeclare, routingKey, tls, url, urlSecret, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("auth"), auth)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("connectionBackoff"), connectionBackoff)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("consume"), consume)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("exchangeDeclare"), exchangeDeclare)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("exchangeName"), exchangeName)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("exchangeType"), exchangeType)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("jsonBody"), jsonBody)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("queueBind"), queueBind)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("queueDeclare"), queueDeclare)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("routingKey"), routingKey)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("url"), url)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AMQPEventSource, Symbol("urlSecret"), urlSecret)
        return new(auth, connectionBackoff, consume, exchangeDeclare, exchangeName, exchangeType, filter, jsonBody, metadata, queueBind, queueDeclare, routingKey, tls, url, urlSecret, )
    end
end # type IoArgoprojEventsV1alpha1AMQPEventSource

const _property_types_IoArgoprojEventsV1alpha1AMQPEventSource = Dict{Symbol,String}(Symbol("auth")=>"IoArgoprojEventsV1alpha1BasicAuth", Symbol("connectionBackoff")=>"IoArgoprojEventsV1alpha1Backoff", Symbol("consume")=>"IoArgoprojEventsV1alpha1AMQPConsumeConfig", Symbol("exchangeDeclare")=>"IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig", Symbol("exchangeName")=>"String", Symbol("exchangeType")=>"String", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("jsonBody")=>"Bool", Symbol("metadata")=>"Dict{String, String}", Symbol("queueBind")=>"IoArgoprojEventsV1alpha1AMQPQueueBindConfig", Symbol("queueDeclare")=>"IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig", Symbol("routingKey")=>"String", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("url")=>"String", Symbol("urlSecret")=>"IoK8sApiCoreV1SecretKeySelector", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1AMQPEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1AMQPEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1AMQPEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1AMQPEventSource }, name::Symbol, val)
end
