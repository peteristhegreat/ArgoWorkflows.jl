# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""sensor.LogEntry

    SensorLogEntry(;
        dependencyName=nothing,
        eventContext=nothing,
        level=nothing,
        msg=nothing,
        namespace=nothing,
        sensorName=nothing,
        time=nothing,
        triggerName=nothing,
    )

    - dependencyName::String
    - eventContext::String
    - level::String
    - msg::String
    - namespace::String
    - sensorName::String
    - time::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - triggerName::String
"""
Base.@kwdef mutable struct SensorLogEntry <: OpenAPI.APIModel
    dependencyName::Union{Nothing, String} = nothing
    eventContext::Union{Nothing, String} = nothing
    level::Union{Nothing, String} = nothing
    msg::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing
    sensorName::Union{Nothing, String} = nothing
    time::Union{Nothing, ZonedDateTime} = nothing
    triggerName::Union{Nothing, String} = nothing

    function SensorLogEntry(dependencyName, eventContext, level, msg, namespace, sensorName, time, triggerName, )
        OpenAPI.validate_property(SensorLogEntry, Symbol("dependencyName"), dependencyName)
        OpenAPI.validate_property(SensorLogEntry, Symbol("eventContext"), eventContext)
        OpenAPI.validate_property(SensorLogEntry, Symbol("level"), level)
        OpenAPI.validate_property(SensorLogEntry, Symbol("msg"), msg)
        OpenAPI.validate_property(SensorLogEntry, Symbol("namespace"), namespace)
        OpenAPI.validate_property(SensorLogEntry, Symbol("sensorName"), sensorName)
        OpenAPI.validate_property(SensorLogEntry, Symbol("time"), time)
        OpenAPI.validate_property(SensorLogEntry, Symbol("triggerName"), triggerName)
        return new(dependencyName, eventContext, level, msg, namespace, sensorName, time, triggerName, )
    end
end # type SensorLogEntry

const _property_types_SensorLogEntry = Dict{Symbol,String}(Symbol("dependencyName")=>"String", Symbol("eventContext")=>"String", Symbol("level")=>"String", Symbol("msg")=>"String", Symbol("namespace")=>"String", Symbol("sensorName")=>"String", Symbol("time")=>"ZonedDateTime", Symbol("triggerName")=>"String", )
OpenAPI.property_type(::Type{ SensorLogEntry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SensorLogEntry[name]))}

function check_required(o::SensorLogEntry)
    true
end

function OpenAPI.validate_property(::Type{ SensorLogEntry }, name::Symbol, val)
    if name === Symbol("time")
        OpenAPI.validate_param(name, "SensorLogEntry", :format, val, "date-time")
    end
end
