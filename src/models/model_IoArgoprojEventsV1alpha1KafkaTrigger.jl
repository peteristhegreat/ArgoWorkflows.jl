# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.KafkaTrigger
KafkaTrigger refers to the specification of the Kafka trigger.

    IoArgoprojEventsV1alpha1KafkaTrigger(;
        compress=nothing,
        flushFrequency=nothing,
        parameters=nothing,
        partition=nothing,
        partitioningKey=nothing,
        payload=nothing,
        requiredAcks=nothing,
        sasl=nothing,
        schemaRegistry=nothing,
        tls=nothing,
        topic=nothing,
        url=nothing,
        version=nothing,
    )

    - compress::Bool
    - flushFrequency::Int64
    - parameters::Vector{IoArgoprojEventsV1alpha1TriggerParameter} : Parameters is the list of parameters that is applied to resolved Kafka trigger object.
    - partition::Int64
    - partitioningKey::String : The partitioning key for the messages put on the Kafka topic. +optional.
    - payload::Vector{IoArgoprojEventsV1alpha1TriggerParameter} : Payload is the list of key-value extracted from an event payload to construct the request payload.
    - requiredAcks::Int64 : RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack). +optional.
    - sasl::IoArgoprojEventsV1alpha1SASLConfig
    - schemaRegistry::IoArgoprojEventsV1alpha1SchemaRegistryConfig
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - topic::String
    - url::String : URL of the Kafka broker, multiple URLs separated by comma.
    - version::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1KafkaTrigger <: OpenAPI.APIModel
    compress::Union{Nothing, Bool} = nothing
    flushFrequency::Union{Nothing, Int64} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    partition::Union{Nothing, Int64} = nothing
    partitioningKey::Union{Nothing, String} = nothing
    payload::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    requiredAcks::Union{Nothing, Int64} = nothing
    sasl = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1SASLConfig }
    schemaRegistry = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1SchemaRegistryConfig }
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    topic::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1KafkaTrigger(compress, flushFrequency, parameters, partition, partitioningKey, payload, requiredAcks, sasl, schemaRegistry, tls, topic, url, version, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("compress"), compress)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("flushFrequency"), flushFrequency)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("parameters"), parameters)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("partition"), partition)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("partitioningKey"), partitioningKey)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("payload"), payload)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("requiredAcks"), requiredAcks)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("sasl"), sasl)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("schemaRegistry"), schemaRegistry)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("topic"), topic)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("url"), url)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaTrigger, Symbol("version"), version)
        return new(compress, flushFrequency, parameters, partition, partitioningKey, payload, requiredAcks, sasl, schemaRegistry, tls, topic, url, version, )
    end
end # type IoArgoprojEventsV1alpha1KafkaTrigger

const _property_types_IoArgoprojEventsV1alpha1KafkaTrigger = Dict{Symbol,String}(Symbol("compress")=>"Bool", Symbol("flushFrequency")=>"Int64", Symbol("parameters")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("partition")=>"Int64", Symbol("partitioningKey")=>"String", Symbol("payload")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("requiredAcks")=>"Int64", Symbol("sasl")=>"IoArgoprojEventsV1alpha1SASLConfig", Symbol("schemaRegistry")=>"IoArgoprojEventsV1alpha1SchemaRegistryConfig", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("topic")=>"String", Symbol("url")=>"String", Symbol("version")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1KafkaTrigger }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1KafkaTrigger[name]))}

function check_required(o::IoArgoprojEventsV1alpha1KafkaTrigger)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1KafkaTrigger }, name::Symbol, val)
end
