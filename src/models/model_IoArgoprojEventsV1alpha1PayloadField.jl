# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.PayloadField
PayloadField binds a value at path within the event payload against a name.

    IoArgoprojEventsV1alpha1PayloadField(;
        name=nothing,
        path=nothing,
    )

    - name::String : Name acts as key that holds the value at the path.
    - path::String : Path is the JSONPath of the event&#39;s (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters &#39;*&#39; and &#39;?&#39;. To access an array value use the index as the key. The dot and wildcard characters can be escaped with &#39;\\\\&#39;. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1PayloadField <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    path::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1PayloadField(name, path, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PayloadField, Symbol("name"), name)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PayloadField, Symbol("path"), path)
        return new(name, path, )
    end
end # type IoArgoprojEventsV1alpha1PayloadField

const _property_types_IoArgoprojEventsV1alpha1PayloadField = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("path")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1PayloadField }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1PayloadField[name]))}

function check_required(o::IoArgoprojEventsV1alpha1PayloadField)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1PayloadField }, name::Symbol, val)
end
