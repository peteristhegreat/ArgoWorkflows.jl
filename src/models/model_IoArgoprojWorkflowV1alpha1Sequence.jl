# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.Sequence
Sequence expands a workflow step into numeric range

    IoArgoprojWorkflowV1alpha1Sequence(;
        count=nothing,
        var"end"=nothing,
        format=nothing,
        start=nothing,
    )

    - count::String
    - var"end"::String
    - format::String : Format is a printf format string to format the value in the sequence
    - start::String
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1Sequence <: OpenAPI.APIModel
    count::Union{Nothing, String} = nothing
    var"end"::Union{Nothing, String} = nothing
    format::Union{Nothing, String} = nothing
    start::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1Sequence(count, var"end", format, start, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Sequence, Symbol("count"), count)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Sequence, Symbol("end"), var"end")
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Sequence, Symbol("format"), format)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Sequence, Symbol("start"), start)
        return new(count, var"end", format, start, )
    end
end # type IoArgoprojWorkflowV1alpha1Sequence

const _property_types_IoArgoprojWorkflowV1alpha1Sequence = Dict{Symbol,String}(Symbol("count")=>"String", Symbol("end")=>"String", Symbol("format")=>"String", Symbol("start")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1Sequence }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1Sequence[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1Sequence)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1Sequence }, name::Symbol, val)
end
