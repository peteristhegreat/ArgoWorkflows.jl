# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.ClientCertAuth
ClientCertAuth holds necessary information for client authentication via certificates

    IoArgoprojWorkflowV1alpha1ClientCertAuth(;
        clientCertSecret=nothing,
        clientKeySecret=nothing,
    )

    - clientCertSecret::IoK8sApiCoreV1SecretKeySelector
    - clientKeySecret::IoK8sApiCoreV1SecretKeySelector
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1ClientCertAuth <: OpenAPI.APIModel
    clientCertSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    clientKeySecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }

    function IoArgoprojWorkflowV1alpha1ClientCertAuth(clientCertSecret, clientKeySecret, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ClientCertAuth, Symbol("clientCertSecret"), clientCertSecret)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ClientCertAuth, Symbol("clientKeySecret"), clientKeySecret)
        return new(clientCertSecret, clientKeySecret, )
    end
end # type IoArgoprojWorkflowV1alpha1ClientCertAuth

const _property_types_IoArgoprojWorkflowV1alpha1ClientCertAuth = Dict{Symbol,String}(Symbol("clientCertSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("clientKeySecret")=>"IoK8sApiCoreV1SecretKeySelector", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1ClientCertAuth }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1ClientCertAuth[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1ClientCertAuth)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1ClientCertAuth }, name::Symbol, val)
end
