# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.GitArtifact
GitArtifact is the location of an git artifact

    IoArgoprojWorkflowV1alpha1GitArtifact(;
        branch=nothing,
        depth=nothing,
        disableSubmodules=nothing,
        fetch=nothing,
        insecureIgnoreHostKey=nothing,
        insecureSkipTLS=nothing,
        passwordSecret=nothing,
        repo=nothing,
        revision=nothing,
        singleBranch=nothing,
        sshPrivateKeySecret=nothing,
        usernameSecret=nothing,
    )

    - branch::String : Branch is the branch to fetch when &#x60;SingleBranch&#x60; is enabled
    - depth::Int64 : Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip
    - disableSubmodules::Bool : DisableSubmodules disables submodules during git clone
    - fetch::Vector{String} : Fetch specifies a number of refs that should be fetched before checkout
    - insecureIgnoreHostKey::Bool : InsecureIgnoreHostKey disables SSH strict host key checking during git clone
    - insecureSkipTLS::Bool : InsecureSkipTLS disables server certificate verification resulting in insecure HTTPS connections
    - passwordSecret::IoK8sApiCoreV1SecretKeySelector
    - repo::String : Repo is the git repository
    - revision::String : Revision is the git commit, tag, branch to checkout
    - singleBranch::Bool : SingleBranch enables single branch clone, using the &#x60;branch&#x60; parameter
    - sshPrivateKeySecret::IoK8sApiCoreV1SecretKeySelector
    - usernameSecret::IoK8sApiCoreV1SecretKeySelector
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1GitArtifact <: OpenAPI.APIModel
    branch::Union{Nothing, String} = nothing
    depth::Union{Nothing, Int64} = nothing
    disableSubmodules::Union{Nothing, Bool} = nothing
    fetch::Union{Nothing, Vector{String}} = nothing
    insecureIgnoreHostKey::Union{Nothing, Bool} = nothing
    insecureSkipTLS::Union{Nothing, Bool} = nothing
    passwordSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    repo::Union{Nothing, String} = nothing
    revision::Union{Nothing, String} = nothing
    singleBranch::Union{Nothing, Bool} = nothing
    sshPrivateKeySecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    usernameSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }

    function IoArgoprojWorkflowV1alpha1GitArtifact(branch, depth, disableSubmodules, fetch, insecureIgnoreHostKey, insecureSkipTLS, passwordSecret, repo, revision, singleBranch, sshPrivateKeySecret, usernameSecret, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("branch"), branch)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("depth"), depth)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("disableSubmodules"), disableSubmodules)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("fetch"), fetch)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("insecureIgnoreHostKey"), insecureIgnoreHostKey)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("insecureSkipTLS"), insecureSkipTLS)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("passwordSecret"), passwordSecret)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("repo"), repo)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("revision"), revision)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("singleBranch"), singleBranch)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("sshPrivateKeySecret"), sshPrivateKeySecret)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1GitArtifact, Symbol("usernameSecret"), usernameSecret)
        return new(branch, depth, disableSubmodules, fetch, insecureIgnoreHostKey, insecureSkipTLS, passwordSecret, repo, revision, singleBranch, sshPrivateKeySecret, usernameSecret, )
    end
end # type IoArgoprojWorkflowV1alpha1GitArtifact

const _property_types_IoArgoprojWorkflowV1alpha1GitArtifact = Dict{Symbol,String}(Symbol("branch")=>"String", Symbol("depth")=>"Int64", Symbol("disableSubmodules")=>"Bool", Symbol("fetch")=>"Vector{String}", Symbol("insecureIgnoreHostKey")=>"Bool", Symbol("insecureSkipTLS")=>"Bool", Symbol("passwordSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("repo")=>"String", Symbol("revision")=>"String", Symbol("singleBranch")=>"Bool", Symbol("sshPrivateKeySecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("usernameSecret")=>"IoK8sApiCoreV1SecretKeySelector", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1GitArtifact }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1GitArtifact[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1GitArtifact)
    o.repo === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1GitArtifact }, name::Symbol, val)
end
