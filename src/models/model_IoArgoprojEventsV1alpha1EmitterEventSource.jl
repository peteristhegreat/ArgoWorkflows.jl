# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.EmitterEventSource

    IoArgoprojEventsV1alpha1EmitterEventSource(;
        broker=nothing,
        channelKey=nothing,
        channelName=nothing,
        connectionBackoff=nothing,
        filter=nothing,
        jsonBody=nothing,
        metadata=nothing,
        password=nothing,
        tls=nothing,
        username=nothing,
    )

    - broker::String : Broker URI to connect to.
    - channelKey::String
    - channelName::String
    - connectionBackoff::IoArgoprojEventsV1alpha1Backoff
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - jsonBody::Bool
    - metadata::Dict{String, String}
    - password::IoK8sApiCoreV1SecretKeySelector
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - username::IoK8sApiCoreV1SecretKeySelector
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1EmitterEventSource <: OpenAPI.APIModel
    broker::Union{Nothing, String} = nothing
    channelKey::Union{Nothing, String} = nothing
    channelName::Union{Nothing, String} = nothing
    connectionBackoff = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Backoff }
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    jsonBody::Union{Nothing, Bool} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    password = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    username = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }

    function IoArgoprojEventsV1alpha1EmitterEventSource(broker, channelKey, channelName, connectionBackoff, filter, jsonBody, metadata, password, tls, username, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmitterEventSource, Symbol("broker"), broker)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmitterEventSource, Symbol("channelKey"), channelKey)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmitterEventSource, Symbol("channelName"), channelName)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmitterEventSource, Symbol("connectionBackoff"), connectionBackoff)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmitterEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmitterEventSource, Symbol("jsonBody"), jsonBody)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmitterEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmitterEventSource, Symbol("password"), password)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmitterEventSource, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmitterEventSource, Symbol("username"), username)
        return new(broker, channelKey, channelName, connectionBackoff, filter, jsonBody, metadata, password, tls, username, )
    end
end # type IoArgoprojEventsV1alpha1EmitterEventSource

const _property_types_IoArgoprojEventsV1alpha1EmitterEventSource = Dict{Symbol,String}(Symbol("broker")=>"String", Symbol("channelKey")=>"String", Symbol("channelName")=>"String", Symbol("connectionBackoff")=>"IoArgoprojEventsV1alpha1Backoff", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("jsonBody")=>"Bool", Symbol("metadata")=>"Dict{String, String}", Symbol("password")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("username")=>"IoK8sApiCoreV1SecretKeySelector", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1EmitterEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1EmitterEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1EmitterEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1EmitterEventSource }, name::Symbol, val)
end
