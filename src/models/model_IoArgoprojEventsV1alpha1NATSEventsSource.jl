# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.NATSEventsSource

    IoArgoprojEventsV1alpha1NATSEventsSource(;
        auth=nothing,
        connectionBackoff=nothing,
        filter=nothing,
        jsonBody=nothing,
        metadata=nothing,
        subject=nothing,
        tls=nothing,
        url=nothing,
    )

    - auth::IoArgoprojEventsV1alpha1NATSAuth
    - connectionBackoff::IoArgoprojEventsV1alpha1Backoff
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - jsonBody::Bool
    - metadata::Dict{String, String}
    - subject::String
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - url::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1NATSEventsSource <: OpenAPI.APIModel
    auth = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1NATSAuth }
    connectionBackoff = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Backoff }
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    jsonBody::Union{Nothing, Bool} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    subject::Union{Nothing, String} = nothing
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    url::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1NATSEventsSource(auth, connectionBackoff, filter, jsonBody, metadata, subject, tls, url, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NATSEventsSource, Symbol("auth"), auth)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NATSEventsSource, Symbol("connectionBackoff"), connectionBackoff)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NATSEventsSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NATSEventsSource, Symbol("jsonBody"), jsonBody)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NATSEventsSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NATSEventsSource, Symbol("subject"), subject)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NATSEventsSource, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NATSEventsSource, Symbol("url"), url)
        return new(auth, connectionBackoff, filter, jsonBody, metadata, subject, tls, url, )
    end
end # type IoArgoprojEventsV1alpha1NATSEventsSource

const _property_types_IoArgoprojEventsV1alpha1NATSEventsSource = Dict{Symbol,String}(Symbol("auth")=>"IoArgoprojEventsV1alpha1NATSAuth", Symbol("connectionBackoff")=>"IoArgoprojEventsV1alpha1Backoff", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("jsonBody")=>"Bool", Symbol("metadata")=>"Dict{String, String}", Symbol("subject")=>"String", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1NATSEventsSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1NATSEventsSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1NATSEventsSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1NATSEventsSource }, name::Symbol, val)
end
