# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.GenericEventSource
GenericEventSource refers to a generic event source. It can be used to implement a custom event source.

    IoArgoprojEventsV1alpha1GenericEventSource(;
        authSecret=nothing,
        config=nothing,
        filter=nothing,
        insecure=nothing,
        jsonBody=nothing,
        metadata=nothing,
        url=nothing,
    )

    - authSecret::IoK8sApiCoreV1SecretKeySelector
    - config::String
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - insecure::Bool : Insecure determines the type of connection.
    - jsonBody::Bool
    - metadata::Dict{String, String}
    - url::String : URL of the gRPC server that implements the event source.
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1GenericEventSource <: OpenAPI.APIModel
    authSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    config::Union{Nothing, String} = nothing
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    insecure::Union{Nothing, Bool} = nothing
    jsonBody::Union{Nothing, Bool} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    url::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1GenericEventSource(authSecret, config, filter, insecure, jsonBody, metadata, url, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GenericEventSource, Symbol("authSecret"), authSecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GenericEventSource, Symbol("config"), config)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GenericEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GenericEventSource, Symbol("insecure"), insecure)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GenericEventSource, Symbol("jsonBody"), jsonBody)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GenericEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GenericEventSource, Symbol("url"), url)
        return new(authSecret, config, filter, insecure, jsonBody, metadata, url, )
    end
end # type IoArgoprojEventsV1alpha1GenericEventSource

const _property_types_IoArgoprojEventsV1alpha1GenericEventSource = Dict{Symbol,String}(Symbol("authSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("config")=>"String", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("insecure")=>"Bool", Symbol("jsonBody")=>"Bool", Symbol("metadata")=>"Dict{String, String}", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1GenericEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1GenericEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1GenericEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1GenericEventSource }, name::Symbol, val)
end
