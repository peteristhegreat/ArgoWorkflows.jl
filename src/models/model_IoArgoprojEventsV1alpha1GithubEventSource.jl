# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.GithubEventSource

    IoArgoprojEventsV1alpha1GithubEventSource(;
        active=nothing,
        apiToken=nothing,
        contentType=nothing,
        deleteHookOnFinish=nothing,
        events=nothing,
        filter=nothing,
        githubApp=nothing,
        githubBaseURL=nothing,
        githubUploadURL=nothing,
        id=nothing,
        insecure=nothing,
        metadata=nothing,
        organizations=nothing,
        owner=nothing,
        repositories=nothing,
        repository=nothing,
        webhook=nothing,
        webhookSecret=nothing,
    )

    - active::Bool
    - apiToken::IoK8sApiCoreV1SecretKeySelector
    - contentType::String
    - deleteHookOnFinish::Bool
    - events::Vector{String}
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - githubApp::IoArgoprojEventsV1alpha1GithubAppCreds
    - githubBaseURL::String
    - githubUploadURL::String
    - id::String
    - insecure::Bool
    - metadata::Dict{String, String}
    - organizations::Vector{String} : Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.
    - owner::String
    - repositories::Vector{IoArgoprojEventsV1alpha1OwnedRepositories} : Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.
    - repository::String
    - webhook::IoArgoprojEventsV1alpha1WebhookContext
    - webhookSecret::IoK8sApiCoreV1SecretKeySelector
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1GithubEventSource <: OpenAPI.APIModel
    active::Union{Nothing, Bool} = nothing
    apiToken = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    contentType::Union{Nothing, String} = nothing
    deleteHookOnFinish::Union{Nothing, Bool} = nothing
    events::Union{Nothing, Vector{String}} = nothing
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    githubApp = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1GithubAppCreds }
    githubBaseURL::Union{Nothing, String} = nothing
    githubUploadURL::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    insecure::Union{Nothing, Bool} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    organizations::Union{Nothing, Vector{String}} = nothing
    owner::Union{Nothing, String} = nothing
    repositories::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1OwnedRepositories} }
    repository::Union{Nothing, String} = nothing
    webhook = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1WebhookContext }
    webhookSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }

    function IoArgoprojEventsV1alpha1GithubEventSource(active, apiToken, contentType, deleteHookOnFinish, events, filter, githubApp, githubBaseURL, githubUploadURL, id, insecure, metadata, organizations, owner, repositories, repository, webhook, webhookSecret, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("active"), active)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("apiToken"), apiToken)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("contentType"), contentType)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("deleteHookOnFinish"), deleteHookOnFinish)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("events"), events)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("githubApp"), githubApp)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("githubBaseURL"), githubBaseURL)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("githubUploadURL"), githubUploadURL)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("id"), id)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("insecure"), insecure)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("organizations"), organizations)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("owner"), owner)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("repositories"), repositories)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("repository"), repository)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("webhook"), webhook)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubEventSource, Symbol("webhookSecret"), webhookSecret)
        return new(active, apiToken, contentType, deleteHookOnFinish, events, filter, githubApp, githubBaseURL, githubUploadURL, id, insecure, metadata, organizations, owner, repositories, repository, webhook, webhookSecret, )
    end
end # type IoArgoprojEventsV1alpha1GithubEventSource

const _property_types_IoArgoprojEventsV1alpha1GithubEventSource = Dict{Symbol,String}(Symbol("active")=>"Bool", Symbol("apiToken")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("contentType")=>"String", Symbol("deleteHookOnFinish")=>"Bool", Symbol("events")=>"Vector{String}", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("githubApp")=>"IoArgoprojEventsV1alpha1GithubAppCreds", Symbol("githubBaseURL")=>"String", Symbol("githubUploadURL")=>"String", Symbol("id")=>"String", Symbol("insecure")=>"Bool", Symbol("metadata")=>"Dict{String, String}", Symbol("organizations")=>"Vector{String}", Symbol("owner")=>"String", Symbol("repositories")=>"Vector{IoArgoprojEventsV1alpha1OwnedRepositories}", Symbol("repository")=>"String", Symbol("webhook")=>"IoArgoprojEventsV1alpha1WebhookContext", Symbol("webhookSecret")=>"IoK8sApiCoreV1SecretKeySelector", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1GithubEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1GithubEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1GithubEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1GithubEventSource }, name::Symbol, val)
end
