# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.PubSubEventSource
PubSubEventSource refers to event-source for GCP PubSub related events.

    IoArgoprojEventsV1alpha1PubSubEventSource(;
        credentialSecret=nothing,
        deleteSubscriptionOnFinish=nothing,
        filter=nothing,
        jsonBody=nothing,
        metadata=nothing,
        projectID=nothing,
        subscriptionID=nothing,
        topic=nothing,
        topicProjectID=nothing,
    )

    - credentialSecret::IoK8sApiCoreV1SecretKeySelector
    - deleteSubscriptionOnFinish::Bool
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - jsonBody::Bool
    - metadata::Dict{String, String}
    - projectID::String
    - subscriptionID::String
    - topic::String
    - topicProjectID::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1PubSubEventSource <: OpenAPI.APIModel
    credentialSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    deleteSubscriptionOnFinish::Union{Nothing, Bool} = nothing
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    jsonBody::Union{Nothing, Bool} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    projectID::Union{Nothing, String} = nothing
    subscriptionID::Union{Nothing, String} = nothing
    topic::Union{Nothing, String} = nothing
    topicProjectID::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1PubSubEventSource(credentialSecret, deleteSubscriptionOnFinish, filter, jsonBody, metadata, projectID, subscriptionID, topic, topicProjectID, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PubSubEventSource, Symbol("credentialSecret"), credentialSecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PubSubEventSource, Symbol("deleteSubscriptionOnFinish"), deleteSubscriptionOnFinish)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PubSubEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PubSubEventSource, Symbol("jsonBody"), jsonBody)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PubSubEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PubSubEventSource, Symbol("projectID"), projectID)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PubSubEventSource, Symbol("subscriptionID"), subscriptionID)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PubSubEventSource, Symbol("topic"), topic)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PubSubEventSource, Symbol("topicProjectID"), topicProjectID)
        return new(credentialSecret, deleteSubscriptionOnFinish, filter, jsonBody, metadata, projectID, subscriptionID, topic, topicProjectID, )
    end
end # type IoArgoprojEventsV1alpha1PubSubEventSource

const _property_types_IoArgoprojEventsV1alpha1PubSubEventSource = Dict{Symbol,String}(Symbol("credentialSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("deleteSubscriptionOnFinish")=>"Bool", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("jsonBody")=>"Bool", Symbol("metadata")=>"Dict{String, String}", Symbol("projectID")=>"String", Symbol("subscriptionID")=>"String", Symbol("topic")=>"String", Symbol("topicProjectID")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1PubSubEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1PubSubEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1PubSubEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1PubSubEventSource }, name::Symbol, val)
end
