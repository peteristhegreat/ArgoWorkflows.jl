# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.WorkflowMetadata

    IoArgoprojWorkflowV1alpha1WorkflowMetadata(;
        annotations=nothing,
        labels=nothing,
        labelsFrom=nothing,
    )

    - annotations::Dict{String, String}
    - labels::Dict{String, String}
    - labelsFrom::Dict{String, IoArgoprojWorkflowV1alpha1LabelValueFrom}
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1WorkflowMetadata <: OpenAPI.APIModel
    annotations::Union{Nothing, Dict{String, String}} = nothing
    labels::Union{Nothing, Dict{String, String}} = nothing
    labelsFrom::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojWorkflowV1alpha1LabelValueFrom} }

    function IoArgoprojWorkflowV1alpha1WorkflowMetadata(annotations, labels, labelsFrom, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowMetadata, Symbol("annotations"), annotations)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowMetadata, Symbol("labels"), labels)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowMetadata, Symbol("labelsFrom"), labelsFrom)
        return new(annotations, labels, labelsFrom, )
    end
end # type IoArgoprojWorkflowV1alpha1WorkflowMetadata

const _property_types_IoArgoprojWorkflowV1alpha1WorkflowMetadata = Dict{Symbol,String}(Symbol("annotations")=>"Dict{String, String}", Symbol("labels")=>"Dict{String, String}", Symbol("labelsFrom")=>"Dict{String, IoArgoprojWorkflowV1alpha1LabelValueFrom}", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1WorkflowMetadata }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1WorkflowMetadata[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1WorkflowMetadata)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1WorkflowMetadata }, name::Symbol, val)
end
