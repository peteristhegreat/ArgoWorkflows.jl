# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.EventPersistence

    IoArgoprojEventsV1alpha1EventPersistence(;
        catchup=nothing,
        configMap=nothing,
    )

    - catchup::IoArgoprojEventsV1alpha1CatchupConfiguration
    - configMap::IoArgoprojEventsV1alpha1ConfigMapPersistence
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1EventPersistence <: OpenAPI.APIModel
    catchup = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1CatchupConfiguration }
    configMap = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1ConfigMapPersistence }

    function IoArgoprojEventsV1alpha1EventPersistence(catchup, configMap, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventPersistence, Symbol("catchup"), catchup)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventPersistence, Symbol("configMap"), configMap)
        return new(catchup, configMap, )
    end
end # type IoArgoprojEventsV1alpha1EventPersistence

const _property_types_IoArgoprojEventsV1alpha1EventPersistence = Dict{Symbol,String}(Symbol("catchup")=>"IoArgoprojEventsV1alpha1CatchupConfiguration", Symbol("configMap")=>"IoArgoprojEventsV1alpha1ConfigMapPersistence", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1EventPersistence }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1EventPersistence[name]))}

function check_required(o::IoArgoprojEventsV1alpha1EventPersistence)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1EventPersistence }, name::Symbol, val)
end
