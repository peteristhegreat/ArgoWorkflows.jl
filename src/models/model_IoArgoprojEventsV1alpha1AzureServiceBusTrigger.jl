# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.AzureServiceBusTrigger

    IoArgoprojEventsV1alpha1AzureServiceBusTrigger(;
        connectionString=nothing,
        parameters=nothing,
        payload=nothing,
        queueName=nothing,
        subscriptionName=nothing,
        tls=nothing,
        topicName=nothing,
    )

    - connectionString::IoK8sApiCoreV1SecretKeySelector
    - parameters::Vector{IoArgoprojEventsV1alpha1TriggerParameter}
    - payload::Vector{IoArgoprojEventsV1alpha1TriggerParameter} : Payload is the list of key-value extracted from an event payload to construct the request payload.
    - queueName::String
    - subscriptionName::String
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - topicName::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1AzureServiceBusTrigger <: OpenAPI.APIModel
    connectionString = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    payload::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    queueName::Union{Nothing, String} = nothing
    subscriptionName::Union{Nothing, String} = nothing
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    topicName::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1AzureServiceBusTrigger(connectionString, parameters, payload, queueName, subscriptionName, tls, topicName, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusTrigger, Symbol("connectionString"), connectionString)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusTrigger, Symbol("parameters"), parameters)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusTrigger, Symbol("payload"), payload)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusTrigger, Symbol("queueName"), queueName)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusTrigger, Symbol("subscriptionName"), subscriptionName)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusTrigger, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusTrigger, Symbol("topicName"), topicName)
        return new(connectionString, parameters, payload, queueName, subscriptionName, tls, topicName, )
    end
end # type IoArgoprojEventsV1alpha1AzureServiceBusTrigger

const _property_types_IoArgoprojEventsV1alpha1AzureServiceBusTrigger = Dict{Symbol,String}(Symbol("connectionString")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("parameters")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("payload")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("queueName")=>"String", Symbol("subscriptionName")=>"String", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("topicName")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1AzureServiceBusTrigger }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1AzureServiceBusTrigger[name]))}

function check_required(o::IoArgoprojEventsV1alpha1AzureServiceBusTrigger)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1AzureServiceBusTrigger }, name::Symbol, val)
end
