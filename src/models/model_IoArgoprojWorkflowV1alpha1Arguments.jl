# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.Arguments
Arguments to a template

    IoArgoprojWorkflowV1alpha1Arguments(;
        artifacts=nothing,
        parameters=nothing,
    )

    - artifacts::Vector{IoArgoprojWorkflowV1alpha1Artifact} : Artifacts is the list of artifacts to pass to the template or workflow
    - parameters::Vector{IoArgoprojWorkflowV1alpha1Parameter} : Parameters is the list of parameters to pass to the template or workflow
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1Arguments <: OpenAPI.APIModel
    artifacts::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojWorkflowV1alpha1Artifact} }
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojWorkflowV1alpha1Parameter} }

    function IoArgoprojWorkflowV1alpha1Arguments(artifacts, parameters, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Arguments, Symbol("artifacts"), artifacts)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Arguments, Symbol("parameters"), parameters)
        return new(artifacts, parameters, )
    end
end # type IoArgoprojWorkflowV1alpha1Arguments

const _property_types_IoArgoprojWorkflowV1alpha1Arguments = Dict{Symbol,String}(Symbol("artifacts")=>"Vector{IoArgoprojWorkflowV1alpha1Artifact}", Symbol("parameters")=>"Vector{IoArgoprojWorkflowV1alpha1Parameter}", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1Arguments }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1Arguments[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1Arguments)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1Arguments }, name::Symbol, val)
end
