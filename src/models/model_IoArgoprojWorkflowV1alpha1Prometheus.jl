# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.Prometheus
Prometheus is a prometheus metric to be emitted

    IoArgoprojWorkflowV1alpha1Prometheus(;
        counter=nothing,
        gauge=nothing,
        help=nothing,
        histogram=nothing,
        labels=nothing,
        name=nothing,
        when=nothing,
    )

    - counter::IoArgoprojWorkflowV1alpha1Counter
    - gauge::IoArgoprojWorkflowV1alpha1Gauge
    - help::String : Help is a string that describes the metric
    - histogram::IoArgoprojWorkflowV1alpha1Histogram
    - labels::Vector{IoArgoprojWorkflowV1alpha1MetricLabel} : Labels is a list of metric labels
    - name::String : Name is the name of the metric
    - when::String : When is a conditional statement that decides when to emit the metric
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1Prometheus <: OpenAPI.APIModel
    counter = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1Counter }
    gauge = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1Gauge }
    help::Union{Nothing, String} = nothing
    histogram = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1Histogram }
    labels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojWorkflowV1alpha1MetricLabel} }
    name::Union{Nothing, String} = nothing
    when::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1Prometheus(counter, gauge, help, histogram, labels, name, when, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Prometheus, Symbol("counter"), counter)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Prometheus, Symbol("gauge"), gauge)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Prometheus, Symbol("help"), help)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Prometheus, Symbol("histogram"), histogram)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Prometheus, Symbol("labels"), labels)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Prometheus, Symbol("name"), name)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Prometheus, Symbol("when"), when)
        return new(counter, gauge, help, histogram, labels, name, when, )
    end
end # type IoArgoprojWorkflowV1alpha1Prometheus

const _property_types_IoArgoprojWorkflowV1alpha1Prometheus = Dict{Symbol,String}(Symbol("counter")=>"IoArgoprojWorkflowV1alpha1Counter", Symbol("gauge")=>"IoArgoprojWorkflowV1alpha1Gauge", Symbol("help")=>"String", Symbol("histogram")=>"IoArgoprojWorkflowV1alpha1Histogram", Symbol("labels")=>"Vector{IoArgoprojWorkflowV1alpha1MetricLabel}", Symbol("name")=>"String", Symbol("when")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1Prometheus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1Prometheus[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1Prometheus)
    o.help === nothing && (return false)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1Prometheus }, name::Symbol, val)
end
