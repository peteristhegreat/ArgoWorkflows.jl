# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.S3Filter

    IoArgoprojEventsV1alpha1S3Filter(;
        prefix=nothing,
        suffix=nothing,
    )

    - prefix::String
    - suffix::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1S3Filter <: OpenAPI.APIModel
    prefix::Union{Nothing, String} = nothing
    suffix::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1S3Filter(prefix, suffix, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1S3Filter, Symbol("prefix"), prefix)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1S3Filter, Symbol("suffix"), suffix)
        return new(prefix, suffix, )
    end
end # type IoArgoprojEventsV1alpha1S3Filter

const _property_types_IoArgoprojEventsV1alpha1S3Filter = Dict{Symbol,String}(Symbol("prefix")=>"String", Symbol("suffix")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1S3Filter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1S3Filter[name]))}

function check_required(o::IoArgoprojEventsV1alpha1S3Filter)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1S3Filter }, name::Symbol, val)
end
