# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.WorkflowStatus
WorkflowStatus contains overall status information about a workflow

    IoArgoprojWorkflowV1alpha1WorkflowStatus(;
        artifactGCStatus=nothing,
        artifactRepositoryRef=nothing,
        compressedNodes=nothing,
        conditions=nothing,
        estimatedDuration=nothing,
        finishedAt=nothing,
        message=nothing,
        nodes=nothing,
        offloadNodeStatusVersion=nothing,
        outputs=nothing,
        persistentVolumeClaims=nothing,
        phase=nothing,
        progress=nothing,
        resourcesDuration=nothing,
        startedAt=nothing,
        storedTemplates=nothing,
        storedWorkflowTemplateSpec=nothing,
        synchronization=nothing,
        taskResultsCompletionStatus=nothing,
    )

    - artifactGCStatus::IoArgoprojWorkflowV1alpha1ArtGCStatus
    - artifactRepositoryRef::IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus
    - compressedNodes::String : Compressed and base64 decoded Nodes map
    - conditions::Vector{IoArgoprojWorkflowV1alpha1Condition} : Conditions is a list of conditions the Workflow may have
    - estimatedDuration::Int64 : EstimatedDuration in seconds.
    - finishedAt::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - message::String : A human readable message indicating details about why the workflow is in this condition.
    - nodes::Dict{String, IoArgoprojWorkflowV1alpha1NodeStatus} : Nodes is a mapping between a node ID and the node&#39;s status.
    - offloadNodeStatusVersion::String : Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.
    - outputs::IoArgoprojWorkflowV1alpha1Outputs
    - persistentVolumeClaims::Vector{IoK8sApiCoreV1Volume} : PersistentVolumeClaims tracks all PVCs that were created as part of the io.argoproj.workflow.v1alpha1. The contents of this list are drained at the end of the workflow.
    - phase::String : Phase a simple, high-level summary of where the workflow is in its lifecycle. Will be \&quot;\&quot; (Unknown), \&quot;Pending\&quot;, or \&quot;Running\&quot; before the workflow is completed, and \&quot;Succeeded\&quot;, \&quot;Failed\&quot; or \&quot;Error\&quot; once the workflow has completed.
    - progress::String : Progress to completion
    - resourcesDuration::Dict{String, Int64} : ResourcesDuration is the total for the workflow
    - startedAt::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - storedTemplates::Dict{String, IoArgoprojWorkflowV1alpha1Template} : StoredTemplates is a mapping between a template ref and the node&#39;s status.
    - storedWorkflowTemplateSpec::IoArgoprojWorkflowV1alpha1WorkflowSpec
    - synchronization::IoArgoprojWorkflowV1alpha1SynchronizationStatus
    - taskResultsCompletionStatus::Dict{String, Bool} : TaskResultsCompletionStatus tracks task result completion status (mapped by node ID). Used to prevent premature archiving and garbage collection.
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1WorkflowStatus <: OpenAPI.APIModel
    artifactGCStatus = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1ArtGCStatus }
    artifactRepositoryRef = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus }
    compressedNodes::Union{Nothing, String} = nothing
    conditions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojWorkflowV1alpha1Condition} }
    estimatedDuration::Union{Nothing, Int64} = nothing
    finishedAt::Union{Nothing, ZonedDateTime} = nothing
    message::Union{Nothing, String} = nothing
    nodes::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojWorkflowV1alpha1NodeStatus} }
    offloadNodeStatusVersion::Union{Nothing, String} = nothing
    outputs = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1Outputs }
    persistentVolumeClaims::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1Volume} }
    phase::Union{Nothing, String} = nothing
    progress::Union{Nothing, String} = nothing
    resourcesDuration::Union{Nothing, Dict{String, Int64}} = nothing
    startedAt::Union{Nothing, ZonedDateTime} = nothing
    storedTemplates::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojWorkflowV1alpha1Template} }
    storedWorkflowTemplateSpec = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1WorkflowSpec }
    synchronization = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1SynchronizationStatus }
    taskResultsCompletionStatus::Union{Nothing, Dict{String, Bool}} = nothing

    function IoArgoprojWorkflowV1alpha1WorkflowStatus(artifactGCStatus, artifactRepositoryRef, compressedNodes, conditions, estimatedDuration, finishedAt, message, nodes, offloadNodeStatusVersion, outputs, persistentVolumeClaims, phase, progress, resourcesDuration, startedAt, storedTemplates, storedWorkflowTemplateSpec, synchronization, taskResultsCompletionStatus, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("artifactGCStatus"), artifactGCStatus)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("artifactRepositoryRef"), artifactRepositoryRef)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("compressedNodes"), compressedNodes)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("conditions"), conditions)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("estimatedDuration"), estimatedDuration)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("finishedAt"), finishedAt)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("message"), message)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("nodes"), nodes)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("offloadNodeStatusVersion"), offloadNodeStatusVersion)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("outputs"), outputs)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("persistentVolumeClaims"), persistentVolumeClaims)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("phase"), phase)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("progress"), progress)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("resourcesDuration"), resourcesDuration)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("startedAt"), startedAt)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("storedTemplates"), storedTemplates)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("storedWorkflowTemplateSpec"), storedWorkflowTemplateSpec)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("synchronization"), synchronization)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStatus, Symbol("taskResultsCompletionStatus"), taskResultsCompletionStatus)
        return new(artifactGCStatus, artifactRepositoryRef, compressedNodes, conditions, estimatedDuration, finishedAt, message, nodes, offloadNodeStatusVersion, outputs, persistentVolumeClaims, phase, progress, resourcesDuration, startedAt, storedTemplates, storedWorkflowTemplateSpec, synchronization, taskResultsCompletionStatus, )
    end
end # type IoArgoprojWorkflowV1alpha1WorkflowStatus

const _property_types_IoArgoprojWorkflowV1alpha1WorkflowStatus = Dict{Symbol,String}(Symbol("artifactGCStatus")=>"IoArgoprojWorkflowV1alpha1ArtGCStatus", Symbol("artifactRepositoryRef")=>"IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus", Symbol("compressedNodes")=>"String", Symbol("conditions")=>"Vector{IoArgoprojWorkflowV1alpha1Condition}", Symbol("estimatedDuration")=>"Int64", Symbol("finishedAt")=>"ZonedDateTime", Symbol("message")=>"String", Symbol("nodes")=>"Dict{String, IoArgoprojWorkflowV1alpha1NodeStatus}", Symbol("offloadNodeStatusVersion")=>"String", Symbol("outputs")=>"IoArgoprojWorkflowV1alpha1Outputs", Symbol("persistentVolumeClaims")=>"Vector{IoK8sApiCoreV1Volume}", Symbol("phase")=>"String", Symbol("progress")=>"String", Symbol("resourcesDuration")=>"Dict{String, Int64}", Symbol("startedAt")=>"ZonedDateTime", Symbol("storedTemplates")=>"Dict{String, IoArgoprojWorkflowV1alpha1Template}", Symbol("storedWorkflowTemplateSpec")=>"IoArgoprojWorkflowV1alpha1WorkflowSpec", Symbol("synchronization")=>"IoArgoprojWorkflowV1alpha1SynchronizationStatus", Symbol("taskResultsCompletionStatus")=>"Dict{String, Bool}", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1WorkflowStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1WorkflowStatus[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1WorkflowStatus)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1WorkflowStatus }, name::Symbol, val)
    if name === Symbol("finishedAt")
        OpenAPI.validate_param(name, "IoArgoprojWorkflowV1alpha1WorkflowStatus", :format, val, "date-time")
    end
    if name === Symbol("startedAt")
        OpenAPI.validate_param(name, "IoArgoprojWorkflowV1alpha1WorkflowStatus", :format, val, "date-time")
    end
end
