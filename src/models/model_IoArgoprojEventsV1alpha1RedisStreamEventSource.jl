# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.RedisStreamEventSource

    IoArgoprojEventsV1alpha1RedisStreamEventSource(;
        consumerGroup=nothing,
        db=nothing,
        filter=nothing,
        hostAddress=nothing,
        maxMsgCountPerRead=nothing,
        metadata=nothing,
        password=nothing,
        streams=nothing,
        tls=nothing,
        username=nothing,
    )

    - consumerGroup::String
    - db::Int64
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - hostAddress::String
    - maxMsgCountPerRead::Int64
    - metadata::Dict{String, String}
    - password::IoK8sApiCoreV1SecretKeySelector
    - streams::Vector{String} : Streams to look for entries. XREADGROUP is used on all streams using a single consumer group.
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - username::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1RedisStreamEventSource <: OpenAPI.APIModel
    consumerGroup::Union{Nothing, String} = nothing
    db::Union{Nothing, Int64} = nothing
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    hostAddress::Union{Nothing, String} = nothing
    maxMsgCountPerRead::Union{Nothing, Int64} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    password = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    streams::Union{Nothing, Vector{String}} = nothing
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    username::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1RedisStreamEventSource(consumerGroup, db, filter, hostAddress, maxMsgCountPerRead, metadata, password, streams, tls, username, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1RedisStreamEventSource, Symbol("consumerGroup"), consumerGroup)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1RedisStreamEventSource, Symbol("db"), db)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1RedisStreamEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1RedisStreamEventSource, Symbol("hostAddress"), hostAddress)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1RedisStreamEventSource, Symbol("maxMsgCountPerRead"), maxMsgCountPerRead)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1RedisStreamEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1RedisStreamEventSource, Symbol("password"), password)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1RedisStreamEventSource, Symbol("streams"), streams)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1RedisStreamEventSource, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1RedisStreamEventSource, Symbol("username"), username)
        return new(consumerGroup, db, filter, hostAddress, maxMsgCountPerRead, metadata, password, streams, tls, username, )
    end
end # type IoArgoprojEventsV1alpha1RedisStreamEventSource

const _property_types_IoArgoprojEventsV1alpha1RedisStreamEventSource = Dict{Symbol,String}(Symbol("consumerGroup")=>"String", Symbol("db")=>"Int64", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("hostAddress")=>"String", Symbol("maxMsgCountPerRead")=>"Int64", Symbol("metadata")=>"Dict{String, String}", Symbol("password")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("streams")=>"Vector{String}", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("username")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1RedisStreamEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1RedisStreamEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1RedisStreamEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1RedisStreamEventSource }, name::Symbol, val)
end
