# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.StorageGridEventSource

    IoArgoprojEventsV1alpha1StorageGridEventSource(;
        apiURL=nothing,
        authToken=nothing,
        bucket=nothing,
        events=nothing,
        filter=nothing,
        metadata=nothing,
        region=nothing,
        topicArn=nothing,
        webhook=nothing,
    )

    - apiURL::String : APIURL is the url of the storagegrid api.
    - authToken::IoK8sApiCoreV1SecretKeySelector
    - bucket::String : Name of the bucket to register notifications for.
    - events::Vector{String}
    - filter::IoArgoprojEventsV1alpha1StorageGridFilter
    - metadata::Dict{String, String}
    - region::String
    - topicArn::String
    - webhook::IoArgoprojEventsV1alpha1WebhookContext
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1StorageGridEventSource <: OpenAPI.APIModel
    apiURL::Union{Nothing, String} = nothing
    authToken = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    bucket::Union{Nothing, String} = nothing
    events::Union{Nothing, Vector{String}} = nothing
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1StorageGridFilter }
    metadata::Union{Nothing, Dict{String, String}} = nothing
    region::Union{Nothing, String} = nothing
    topicArn::Union{Nothing, String} = nothing
    webhook = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1WebhookContext }

    function IoArgoprojEventsV1alpha1StorageGridEventSource(apiURL, authToken, bucket, events, filter, metadata, region, topicArn, webhook, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1StorageGridEventSource, Symbol("apiURL"), apiURL)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1StorageGridEventSource, Symbol("authToken"), authToken)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1StorageGridEventSource, Symbol("bucket"), bucket)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1StorageGridEventSource, Symbol("events"), events)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1StorageGridEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1StorageGridEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1StorageGridEventSource, Symbol("region"), region)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1StorageGridEventSource, Symbol("topicArn"), topicArn)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1StorageGridEventSource, Symbol("webhook"), webhook)
        return new(apiURL, authToken, bucket, events, filter, metadata, region, topicArn, webhook, )
    end
end # type IoArgoprojEventsV1alpha1StorageGridEventSource

const _property_types_IoArgoprojEventsV1alpha1StorageGridEventSource = Dict{Symbol,String}(Symbol("apiURL")=>"String", Symbol("authToken")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("bucket")=>"String", Symbol("events")=>"Vector{String}", Symbol("filter")=>"IoArgoprojEventsV1alpha1StorageGridFilter", Symbol("metadata")=>"Dict{String, String}", Symbol("region")=>"String", Symbol("topicArn")=>"String", Symbol("webhook")=>"IoArgoprojEventsV1alpha1WebhookContext", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1StorageGridEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1StorageGridEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1StorageGridEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1StorageGridEventSource }, name::Symbol, val)
end
