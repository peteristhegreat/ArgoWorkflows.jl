# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.GitRemoteConfig

    IoArgoprojEventsV1alpha1GitRemoteConfig(;
        name=nothing,
        urls=nothing,
    )

    - name::String : Name of the remote to fetch from.
    - urls::Vector{String} : URLs the URLs of a remote repository. It must be non-empty. Fetch will always use the first URL, while push will use all of them.
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1GitRemoteConfig <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    urls::Union{Nothing, Vector{String}} = nothing

    function IoArgoprojEventsV1alpha1GitRemoteConfig(name, urls, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitRemoteConfig, Symbol("name"), name)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitRemoteConfig, Symbol("urls"), urls)
        return new(name, urls, )
    end
end # type IoArgoprojEventsV1alpha1GitRemoteConfig

const _property_types_IoArgoprojEventsV1alpha1GitRemoteConfig = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("urls")=>"Vector{String}", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1GitRemoteConfig }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1GitRemoteConfig[name]))}

function check_required(o::IoArgoprojEventsV1alpha1GitRemoteConfig)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1GitRemoteConfig }, name::Symbol, val)
end
