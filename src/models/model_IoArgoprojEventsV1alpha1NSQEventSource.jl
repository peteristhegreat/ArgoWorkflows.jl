# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.NSQEventSource

    IoArgoprojEventsV1alpha1NSQEventSource(;
        channel=nothing,
        connectionBackoff=nothing,
        filter=nothing,
        hostAddress=nothing,
        jsonBody=nothing,
        metadata=nothing,
        tls=nothing,
        topic=nothing,
    )

    - channel::String
    - connectionBackoff::IoArgoprojEventsV1alpha1Backoff
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - hostAddress::String
    - jsonBody::Bool
    - metadata::Dict{String, String}
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - topic::String : Topic to subscribe to.
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1NSQEventSource <: OpenAPI.APIModel
    channel::Union{Nothing, String} = nothing
    connectionBackoff = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Backoff }
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    hostAddress::Union{Nothing, String} = nothing
    jsonBody::Union{Nothing, Bool} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    topic::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1NSQEventSource(channel, connectionBackoff, filter, hostAddress, jsonBody, metadata, tls, topic, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NSQEventSource, Symbol("channel"), channel)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NSQEventSource, Symbol("connectionBackoff"), connectionBackoff)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NSQEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NSQEventSource, Symbol("hostAddress"), hostAddress)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NSQEventSource, Symbol("jsonBody"), jsonBody)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NSQEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NSQEventSource, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1NSQEventSource, Symbol("topic"), topic)
        return new(channel, connectionBackoff, filter, hostAddress, jsonBody, metadata, tls, topic, )
    end
end # type IoArgoprojEventsV1alpha1NSQEventSource

const _property_types_IoArgoprojEventsV1alpha1NSQEventSource = Dict{Symbol,String}(Symbol("channel")=>"String", Symbol("connectionBackoff")=>"IoArgoprojEventsV1alpha1Backoff", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("hostAddress")=>"String", Symbol("jsonBody")=>"Bool", Symbol("metadata")=>"Dict{String, String}", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("topic")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1NSQEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1NSQEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1NSQEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1NSQEventSource }, name::Symbol, val)
end
