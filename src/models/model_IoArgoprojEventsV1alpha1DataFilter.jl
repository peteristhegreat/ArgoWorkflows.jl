# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.DataFilter

    IoArgoprojEventsV1alpha1DataFilter(;
        comparator=nothing,
        path=nothing,
        template=nothing,
        type=nothing,
        value=nothing,
    )

    - comparator::String : Comparator compares the event data with a user given value. Can be \&quot;&gt;&#x3D;\&quot;, \&quot;&gt;\&quot;, \&quot;&#x3D;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;&lt;\&quot;, or \&quot;&lt;&#x3D;\&quot;. Is optional, and if left blank treated as equality \&quot;&#x3D;\&quot;.
    - path::String : Path is the JSONPath of the event&#39;s (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters &#39;*&#39; and &#39;?&#39;. To access an array value use the index as the key. The dot and wildcard characters can be escaped with &#39;\\\\&#39;. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
    - template::String
    - type::String
    - value::Vector{String}
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1DataFilter <: OpenAPI.APIModel
    comparator::Union{Nothing, String} = nothing
    path::Union{Nothing, String} = nothing
    template::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    value::Union{Nothing, Vector{String}} = nothing

    function IoArgoprojEventsV1alpha1DataFilter(comparator, path, template, type, value, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1DataFilter, Symbol("comparator"), comparator)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1DataFilter, Symbol("path"), path)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1DataFilter, Symbol("template"), template)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1DataFilter, Symbol("type"), type)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1DataFilter, Symbol("value"), value)
        return new(comparator, path, template, type, value, )
    end
end # type IoArgoprojEventsV1alpha1DataFilter

const _property_types_IoArgoprojEventsV1alpha1DataFilter = Dict{Symbol,String}(Symbol("comparator")=>"String", Symbol("path")=>"String", Symbol("template")=>"String", Symbol("type")=>"String", Symbol("value")=>"Vector{String}", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1DataFilter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1DataFilter[name]))}

function check_required(o::IoArgoprojEventsV1alpha1DataFilter)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1DataFilter }, name::Symbol, val)
end
