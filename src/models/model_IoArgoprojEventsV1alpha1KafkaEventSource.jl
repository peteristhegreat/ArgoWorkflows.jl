# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.KafkaEventSource

    IoArgoprojEventsV1alpha1KafkaEventSource(;
        config=nothing,
        connectionBackoff=nothing,
        consumerGroup=nothing,
        filter=nothing,
        jsonBody=nothing,
        limitEventsPerSecond=nothing,
        metadata=nothing,
        partition=nothing,
        sasl=nothing,
        tls=nothing,
        topic=nothing,
        url=nothing,
        version=nothing,
    )

    - config::String : Yaml format Sarama config for Kafka connection. It follows the struct of sarama.Config. See https://github.com/IBM/sarama/blob/main/config.go e.g.  consumer:   fetch:     min: 1 net:   MaxOpenRequests: 5  +optional
    - connectionBackoff::IoArgoprojEventsV1alpha1Backoff
    - consumerGroup::IoArgoprojEventsV1alpha1KafkaConsumerGroup
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - jsonBody::Bool
    - limitEventsPerSecond::String
    - metadata::Dict{String, String}
    - partition::String
    - sasl::IoArgoprojEventsV1alpha1SASLConfig
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - topic::String
    - url::String
    - version::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1KafkaEventSource <: OpenAPI.APIModel
    config::Union{Nothing, String} = nothing
    connectionBackoff = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Backoff }
    consumerGroup = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1KafkaConsumerGroup }
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    jsonBody::Union{Nothing, Bool} = nothing
    limitEventsPerSecond::Union{Nothing, String} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    partition::Union{Nothing, String} = nothing
    sasl = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1SASLConfig }
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    topic::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1KafkaEventSource(config, connectionBackoff, consumerGroup, filter, jsonBody, limitEventsPerSecond, metadata, partition, sasl, tls, topic, url, version, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("config"), config)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("connectionBackoff"), connectionBackoff)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("consumerGroup"), consumerGroup)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("jsonBody"), jsonBody)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("limitEventsPerSecond"), limitEventsPerSecond)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("partition"), partition)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("sasl"), sasl)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("topic"), topic)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("url"), url)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaEventSource, Symbol("version"), version)
        return new(config, connectionBackoff, consumerGroup, filter, jsonBody, limitEventsPerSecond, metadata, partition, sasl, tls, topic, url, version, )
    end
end # type IoArgoprojEventsV1alpha1KafkaEventSource

const _property_types_IoArgoprojEventsV1alpha1KafkaEventSource = Dict{Symbol,String}(Symbol("config")=>"String", Symbol("connectionBackoff")=>"IoArgoprojEventsV1alpha1Backoff", Symbol("consumerGroup")=>"IoArgoprojEventsV1alpha1KafkaConsumerGroup", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("jsonBody")=>"Bool", Symbol("limitEventsPerSecond")=>"String", Symbol("metadata")=>"Dict{String, String}", Symbol("partition")=>"String", Symbol("sasl")=>"IoArgoprojEventsV1alpha1SASLConfig", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("topic")=>"String", Symbol("url")=>"String", Symbol("version")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1KafkaEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1KafkaEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1KafkaEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1KafkaEventSource }, name::Symbol, val)
end
