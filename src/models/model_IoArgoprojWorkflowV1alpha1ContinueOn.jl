# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.ContinueOn
ContinueOn defines if a workflow should continue even if a task or step fails/errors. It can be specified if the workflow should continue when the pod errors, fails or both.

    IoArgoprojWorkflowV1alpha1ContinueOn(;
        error=nothing,
        failed=nothing,
    )

    - error::Bool
    - failed::Bool
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1ContinueOn <: OpenAPI.APIModel
    error::Union{Nothing, Bool} = nothing
    failed::Union{Nothing, Bool} = nothing

    function IoArgoprojWorkflowV1alpha1ContinueOn(error, failed, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ContinueOn, Symbol("error"), error)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ContinueOn, Symbol("failed"), failed)
        return new(error, failed, )
    end
end # type IoArgoprojWorkflowV1alpha1ContinueOn

const _property_types_IoArgoprojWorkflowV1alpha1ContinueOn = Dict{Symbol,String}(Symbol("error")=>"Bool", Symbol("failed")=>"Bool", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1ContinueOn }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1ContinueOn[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1ContinueOn)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1ContinueOn }, name::Symbol, val)
end
