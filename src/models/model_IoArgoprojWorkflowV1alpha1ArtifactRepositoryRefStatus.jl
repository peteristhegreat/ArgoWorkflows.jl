# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.ArtifactRepositoryRefStatus

    IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus(;
        artifactRepository=nothing,
        configMap=nothing,
        default=nothing,
        key=nothing,
        namespace=nothing,
    )

    - artifactRepository::IoArgoprojWorkflowV1alpha1ArtifactRepository
    - configMap::String : The name of the config map. Defaults to \&quot;artifact-repositories\&quot;.
    - default::Bool : If this ref represents the default artifact repository, rather than a config map.
    - key::String : The config map key. Defaults to the value of the \&quot;workflows.argoproj.io/default-artifact-repository\&quot; annotation.
    - namespace::String : The namespace of the config map. Defaults to the workflow&#39;s namespace, or the controller&#39;s namespace (if found).
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus <: OpenAPI.APIModel
    artifactRepository = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1ArtifactRepository }
    configMap::Union{Nothing, String} = nothing
    default::Union{Nothing, Bool} = nothing
    key::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus(artifactRepository, configMap, default, key, namespace, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus, Symbol("artifactRepository"), artifactRepository)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus, Symbol("configMap"), configMap)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus, Symbol("default"), default)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus, Symbol("key"), key)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus, Symbol("namespace"), namespace)
        return new(artifactRepository, configMap, default, key, namespace, )
    end
end # type IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus

const _property_types_IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus = Dict{Symbol,String}(Symbol("artifactRepository")=>"IoArgoprojWorkflowV1alpha1ArtifactRepository", Symbol("configMap")=>"String", Symbol("default")=>"Bool", Symbol("key")=>"String", Symbol("namespace")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus }, name::Symbol, val)
end
