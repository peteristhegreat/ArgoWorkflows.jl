# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.NodeFlag

    IoArgoprojWorkflowV1alpha1NodeFlag(;
        hooked=nothing,
        retried=nothing,
    )

    - hooked::Bool : Hooked tracks whether or not this node was triggered by hook or onExit
    - retried::Bool : Retried tracks whether or not this node was retried by retryStrategy
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1NodeFlag <: OpenAPI.APIModel
    hooked::Union{Nothing, Bool} = nothing
    retried::Union{Nothing, Bool} = nothing

    function IoArgoprojWorkflowV1alpha1NodeFlag(hooked, retried, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeFlag, Symbol("hooked"), hooked)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeFlag, Symbol("retried"), retried)
        return new(hooked, retried, )
    end
end # type IoArgoprojWorkflowV1alpha1NodeFlag

const _property_types_IoArgoprojWorkflowV1alpha1NodeFlag = Dict{Symbol,String}(Symbol("hooked")=>"Bool", Symbol("retried")=>"Bool", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1NodeFlag }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1NodeFlag[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1NodeFlag)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1NodeFlag }, name::Symbol, val)
end
