# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.SensorSpec

    IoArgoprojEventsV1alpha1SensorSpec(;
        dependencies=nothing,
        errorOnFailedRound=nothing,
        eventBusName=nothing,
        loggingFields=nothing,
        replicas=nothing,
        revisionHistoryLimit=nothing,
        template=nothing,
        triggers=nothing,
    )

    - dependencies::Vector{IoArgoprojEventsV1alpha1EventDependency} : Dependencies is a list of the events that this sensor is dependent on.
    - errorOnFailedRound::Bool : ErrorOnFailedRound if set to true, marks sensor state as &#x60;error&#x60; if the previous trigger round fails. Once sensor state is set to &#x60;error&#x60;, no further triggers will be processed.
    - eventBusName::String
    - loggingFields::Dict{String, String}
    - replicas::Int64
    - revisionHistoryLimit::Int64
    - template::IoArgoprojEventsV1alpha1Template
    - triggers::Vector{IoArgoprojEventsV1alpha1Trigger} : Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1SensorSpec <: OpenAPI.APIModel
    dependencies::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1EventDependency} }
    errorOnFailedRound::Union{Nothing, Bool} = nothing
    eventBusName::Union{Nothing, String} = nothing
    loggingFields::Union{Nothing, Dict{String, String}} = nothing
    replicas::Union{Nothing, Int64} = nothing
    revisionHistoryLimit::Union{Nothing, Int64} = nothing
    template = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Template }
    triggers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1Trigger} }

    function IoArgoprojEventsV1alpha1SensorSpec(dependencies, errorOnFailedRound, eventBusName, loggingFields, replicas, revisionHistoryLimit, template, triggers, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SensorSpec, Symbol("dependencies"), dependencies)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SensorSpec, Symbol("errorOnFailedRound"), errorOnFailedRound)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SensorSpec, Symbol("eventBusName"), eventBusName)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SensorSpec, Symbol("loggingFields"), loggingFields)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SensorSpec, Symbol("replicas"), replicas)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SensorSpec, Symbol("revisionHistoryLimit"), revisionHistoryLimit)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SensorSpec, Symbol("template"), template)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SensorSpec, Symbol("triggers"), triggers)
        return new(dependencies, errorOnFailedRound, eventBusName, loggingFields, replicas, revisionHistoryLimit, template, triggers, )
    end
end # type IoArgoprojEventsV1alpha1SensorSpec

const _property_types_IoArgoprojEventsV1alpha1SensorSpec = Dict{Symbol,String}(Symbol("dependencies")=>"Vector{IoArgoprojEventsV1alpha1EventDependency}", Symbol("errorOnFailedRound")=>"Bool", Symbol("eventBusName")=>"String", Symbol("loggingFields")=>"Dict{String, String}", Symbol("replicas")=>"Int64", Symbol("revisionHistoryLimit")=>"Int64", Symbol("template")=>"IoArgoprojEventsV1alpha1Template", Symbol("triggers")=>"Vector{IoArgoprojEventsV1alpha1Trigger}", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1SensorSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1SensorSpec[name]))}

function check_required(o::IoArgoprojEventsV1alpha1SensorSpec)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1SensorSpec }, name::Symbol, val)
end
