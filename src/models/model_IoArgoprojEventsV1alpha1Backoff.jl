# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.Backoff

    IoArgoprojEventsV1alpha1Backoff(;
        duration=nothing,
        factor=nothing,
        jitter=nothing,
        steps=nothing,
    )

    - duration::IoArgoprojEventsV1alpha1Int64OrString
    - factor::IoArgoprojEventsV1alpha1Amount
    - jitter::IoArgoprojEventsV1alpha1Amount
    - steps::Int64
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1Backoff <: OpenAPI.APIModel
    duration = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Int64OrString }
    factor = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Amount }
    jitter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Amount }
    steps::Union{Nothing, Int64} = nothing

    function IoArgoprojEventsV1alpha1Backoff(duration, factor, jitter, steps, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1Backoff, Symbol("duration"), duration)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1Backoff, Symbol("factor"), factor)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1Backoff, Symbol("jitter"), jitter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1Backoff, Symbol("steps"), steps)
        return new(duration, factor, jitter, steps, )
    end
end # type IoArgoprojEventsV1alpha1Backoff

const _property_types_IoArgoprojEventsV1alpha1Backoff = Dict{Symbol,String}(Symbol("duration")=>"IoArgoprojEventsV1alpha1Int64OrString", Symbol("factor")=>"IoArgoprojEventsV1alpha1Amount", Symbol("jitter")=>"IoArgoprojEventsV1alpha1Amount", Symbol("steps")=>"Int64", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1Backoff }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1Backoff[name]))}

function check_required(o::IoArgoprojEventsV1alpha1Backoff)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1Backoff }, name::Symbol, val)
end
