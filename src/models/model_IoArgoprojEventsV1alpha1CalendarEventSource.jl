# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.CalendarEventSource

    IoArgoprojEventsV1alpha1CalendarEventSource(;
        exclusionDates=nothing,
        filter=nothing,
        interval=nothing,
        metadata=nothing,
        persistence=nothing,
        schedule=nothing,
        timezone=nothing,
    )

    - exclusionDates::Vector{String} : ExclusionDates defines the list of DATE-TIME exceptions for recurring events.
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - interval::String
    - metadata::Dict{String, String}
    - persistence::IoArgoprojEventsV1alpha1EventPersistence
    - schedule::String
    - timezone::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1CalendarEventSource <: OpenAPI.APIModel
    exclusionDates::Union{Nothing, Vector{String}} = nothing
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    interval::Union{Nothing, String} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    persistence = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventPersistence }
    schedule::Union{Nothing, String} = nothing
    timezone::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1CalendarEventSource(exclusionDates, filter, interval, metadata, persistence, schedule, timezone, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1CalendarEventSource, Symbol("exclusionDates"), exclusionDates)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1CalendarEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1CalendarEventSource, Symbol("interval"), interval)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1CalendarEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1CalendarEventSource, Symbol("persistence"), persistence)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1CalendarEventSource, Symbol("schedule"), schedule)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1CalendarEventSource, Symbol("timezone"), timezone)
        return new(exclusionDates, filter, interval, metadata, persistence, schedule, timezone, )
    end
end # type IoArgoprojEventsV1alpha1CalendarEventSource

const _property_types_IoArgoprojEventsV1alpha1CalendarEventSource = Dict{Symbol,String}(Symbol("exclusionDates")=>"Vector{String}", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("interval")=>"String", Symbol("metadata")=>"Dict{String, String}", Symbol("persistence")=>"IoArgoprojEventsV1alpha1EventPersistence", Symbol("schedule")=>"String", Symbol("timezone")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1CalendarEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1CalendarEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1CalendarEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1CalendarEventSource }, name::Symbol, val)
end
