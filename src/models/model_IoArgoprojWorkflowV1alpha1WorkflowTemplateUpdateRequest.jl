# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.WorkflowTemplateUpdateRequest

    IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest(;
        name=nothing,
        namespace=nothing,
        template=nothing,
    )

    - name::String : DEPRECATED: This field is ignored.
    - namespace::String
    - template::IoArgoprojWorkflowV1alpha1WorkflowTemplate
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing
    template = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1WorkflowTemplate }

    function IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest(name, namespace, template, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest, Symbol("name"), name)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest, Symbol("namespace"), namespace)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest, Symbol("template"), template)
        return new(name, namespace, template, )
    end
end # type IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest

const _property_types_IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("namespace")=>"String", Symbol("template")=>"IoArgoprojWorkflowV1alpha1WorkflowTemplate", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest }, name::Symbol, val)
end
