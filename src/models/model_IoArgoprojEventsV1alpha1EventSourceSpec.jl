# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.EventSourceSpec

    IoArgoprojEventsV1alpha1EventSourceSpec(;
        amqp=nothing,
        azureEventsHub=nothing,
        azureQueueStorage=nothing,
        azureServiceBus=nothing,
        bitbucket=nothing,
        bitbucketserver=nothing,
        calendar=nothing,
        emitter=nothing,
        eventBusName=nothing,
        file=nothing,
        generic=nothing,
        gerrit=nothing,
        github=nothing,
        gitlab=nothing,
        hdfs=nothing,
        kafka=nothing,
        minio=nothing,
        mqtt=nothing,
        nats=nothing,
        nsq=nothing,
        pubSub=nothing,
        pulsar=nothing,
        redis=nothing,
        redisStream=nothing,
        replicas=nothing,
        resource=nothing,
        service=nothing,
        sftp=nothing,
        slack=nothing,
        sns=nothing,
        sqs=nothing,
        storageGrid=nothing,
        stripe=nothing,
        template=nothing,
        webhook=nothing,
    )

    - amqp::Dict{String, IoArgoprojEventsV1alpha1AMQPEventSource}
    - azureEventsHub::Dict{String, IoArgoprojEventsV1alpha1AzureEventsHubEventSource}
    - azureQueueStorage::Dict{String, IoArgoprojEventsV1alpha1AzureQueueStorageEventSource}
    - azureServiceBus::Dict{String, IoArgoprojEventsV1alpha1AzureServiceBusEventSource}
    - bitbucket::Dict{String, IoArgoprojEventsV1alpha1BitbucketEventSource}
    - bitbucketserver::Dict{String, IoArgoprojEventsV1alpha1BitbucketServerEventSource}
    - calendar::Dict{String, IoArgoprojEventsV1alpha1CalendarEventSource}
    - emitter::Dict{String, IoArgoprojEventsV1alpha1EmitterEventSource}
    - eventBusName::String
    - file::Dict{String, IoArgoprojEventsV1alpha1FileEventSource}
    - generic::Dict{String, IoArgoprojEventsV1alpha1GenericEventSource}
    - gerrit::Dict{String, IoArgoprojEventsV1alpha1GerritEventSource}
    - github::Dict{String, IoArgoprojEventsV1alpha1GithubEventSource}
    - gitlab::Dict{String, IoArgoprojEventsV1alpha1GitlabEventSource}
    - hdfs::Dict{String, IoArgoprojEventsV1alpha1HDFSEventSource}
    - kafka::Dict{String, IoArgoprojEventsV1alpha1KafkaEventSource}
    - minio::Dict{String, IoArgoprojEventsV1alpha1S3Artifact}
    - mqtt::Dict{String, IoArgoprojEventsV1alpha1MQTTEventSource}
    - nats::Dict{String, IoArgoprojEventsV1alpha1NATSEventsSource}
    - nsq::Dict{String, IoArgoprojEventsV1alpha1NSQEventSource}
    - pubSub::Dict{String, IoArgoprojEventsV1alpha1PubSubEventSource}
    - pulsar::Dict{String, IoArgoprojEventsV1alpha1PulsarEventSource}
    - redis::Dict{String, IoArgoprojEventsV1alpha1RedisEventSource}
    - redisStream::Dict{String, IoArgoprojEventsV1alpha1RedisStreamEventSource}
    - replicas::Int64
    - resource::Dict{String, IoArgoprojEventsV1alpha1ResourceEventSource}
    - service::IoArgoprojEventsV1alpha1Service
    - sftp::Dict{String, IoArgoprojEventsV1alpha1SFTPEventSource}
    - slack::Dict{String, IoArgoprojEventsV1alpha1SlackEventSource}
    - sns::Dict{String, IoArgoprojEventsV1alpha1SNSEventSource}
    - sqs::Dict{String, IoArgoprojEventsV1alpha1SQSEventSource}
    - storageGrid::Dict{String, IoArgoprojEventsV1alpha1StorageGridEventSource}
    - stripe::Dict{String, IoArgoprojEventsV1alpha1StripeEventSource}
    - template::IoArgoprojEventsV1alpha1Template
    - webhook::Dict{String, IoArgoprojEventsV1alpha1WebhookEventSource}
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1EventSourceSpec <: OpenAPI.APIModel
    amqp::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1AMQPEventSource} }
    azureEventsHub::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1AzureEventsHubEventSource} }
    azureQueueStorage::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1AzureQueueStorageEventSource} }
    azureServiceBus::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1AzureServiceBusEventSource} }
    bitbucket::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1BitbucketEventSource} }
    bitbucketserver::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1BitbucketServerEventSource} }
    calendar::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1CalendarEventSource} }
    emitter::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1EmitterEventSource} }
    eventBusName::Union{Nothing, String} = nothing
    file::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1FileEventSource} }
    generic::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1GenericEventSource} }
    gerrit::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1GerritEventSource} }
    github::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1GithubEventSource} }
    gitlab::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1GitlabEventSource} }
    hdfs::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1HDFSEventSource} }
    kafka::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1KafkaEventSource} }
    minio::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1S3Artifact} }
    mqtt::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1MQTTEventSource} }
    nats::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1NATSEventsSource} }
    nsq::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1NSQEventSource} }
    pubSub::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1PubSubEventSource} }
    pulsar::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1PulsarEventSource} }
    redis::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1RedisEventSource} }
    redisStream::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1RedisStreamEventSource} }
    replicas::Union{Nothing, Int64} = nothing
    resource::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1ResourceEventSource} }
    service = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Service }
    sftp::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1SFTPEventSource} }
    slack::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1SlackEventSource} }
    sns::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1SNSEventSource} }
    sqs::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1SQSEventSource} }
    storageGrid::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1StorageGridEventSource} }
    stripe::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1StripeEventSource} }
    template = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Template }
    webhook::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojEventsV1alpha1WebhookEventSource} }

    function IoArgoprojEventsV1alpha1EventSourceSpec(amqp, azureEventsHub, azureQueueStorage, azureServiceBus, bitbucket, bitbucketserver, calendar, emitter, eventBusName, file, generic, gerrit, github, gitlab, hdfs, kafka, minio, mqtt, nats, nsq, pubSub, pulsar, redis, redisStream, replicas, resource, service, sftp, slack, sns, sqs, storageGrid, stripe, template, webhook, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("amqp"), amqp)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("azureEventsHub"), azureEventsHub)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("azureQueueStorage"), azureQueueStorage)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("azureServiceBus"), azureServiceBus)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("bitbucket"), bitbucket)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("bitbucketserver"), bitbucketserver)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("calendar"), calendar)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("emitter"), emitter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("eventBusName"), eventBusName)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("file"), file)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("generic"), generic)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("gerrit"), gerrit)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("github"), github)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("gitlab"), gitlab)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("hdfs"), hdfs)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("kafka"), kafka)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("minio"), minio)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("mqtt"), mqtt)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("nats"), nats)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("nsq"), nsq)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("pubSub"), pubSub)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("pulsar"), pulsar)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("redis"), redis)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("redisStream"), redisStream)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("replicas"), replicas)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("resource"), resource)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("service"), service)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("sftp"), sftp)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("slack"), slack)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("sns"), sns)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("sqs"), sqs)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("storageGrid"), storageGrid)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("stripe"), stripe)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("template"), template)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EventSourceSpec, Symbol("webhook"), webhook)
        return new(amqp, azureEventsHub, azureQueueStorage, azureServiceBus, bitbucket, bitbucketserver, calendar, emitter, eventBusName, file, generic, gerrit, github, gitlab, hdfs, kafka, minio, mqtt, nats, nsq, pubSub, pulsar, redis, redisStream, replicas, resource, service, sftp, slack, sns, sqs, storageGrid, stripe, template, webhook, )
    end
end # type IoArgoprojEventsV1alpha1EventSourceSpec

const _property_types_IoArgoprojEventsV1alpha1EventSourceSpec = Dict{Symbol,String}(Symbol("amqp")=>"Dict{String, IoArgoprojEventsV1alpha1AMQPEventSource}", Symbol("azureEventsHub")=>"Dict{String, IoArgoprojEventsV1alpha1AzureEventsHubEventSource}", Symbol("azureQueueStorage")=>"Dict{String, IoArgoprojEventsV1alpha1AzureQueueStorageEventSource}", Symbol("azureServiceBus")=>"Dict{String, IoArgoprojEventsV1alpha1AzureServiceBusEventSource}", Symbol("bitbucket")=>"Dict{String, IoArgoprojEventsV1alpha1BitbucketEventSource}", Symbol("bitbucketserver")=>"Dict{String, IoArgoprojEventsV1alpha1BitbucketServerEventSource}", Symbol("calendar")=>"Dict{String, IoArgoprojEventsV1alpha1CalendarEventSource}", Symbol("emitter")=>"Dict{String, IoArgoprojEventsV1alpha1EmitterEventSource}", Symbol("eventBusName")=>"String", Symbol("file")=>"Dict{String, IoArgoprojEventsV1alpha1FileEventSource}", Symbol("generic")=>"Dict{String, IoArgoprojEventsV1alpha1GenericEventSource}", Symbol("gerrit")=>"Dict{String, IoArgoprojEventsV1alpha1GerritEventSource}", Symbol("github")=>"Dict{String, IoArgoprojEventsV1alpha1GithubEventSource}", Symbol("gitlab")=>"Dict{String, IoArgoprojEventsV1alpha1GitlabEventSource}", Symbol("hdfs")=>"Dict{String, IoArgoprojEventsV1alpha1HDFSEventSource}", Symbol("kafka")=>"Dict{String, IoArgoprojEventsV1alpha1KafkaEventSource}", Symbol("minio")=>"Dict{String, IoArgoprojEventsV1alpha1S3Artifact}", Symbol("mqtt")=>"Dict{String, IoArgoprojEventsV1alpha1MQTTEventSource}", Symbol("nats")=>"Dict{String, IoArgoprojEventsV1alpha1NATSEventsSource}", Symbol("nsq")=>"Dict{String, IoArgoprojEventsV1alpha1NSQEventSource}", Symbol("pubSub")=>"Dict{String, IoArgoprojEventsV1alpha1PubSubEventSource}", Symbol("pulsar")=>"Dict{String, IoArgoprojEventsV1alpha1PulsarEventSource}", Symbol("redis")=>"Dict{String, IoArgoprojEventsV1alpha1RedisEventSource}", Symbol("redisStream")=>"Dict{String, IoArgoprojEventsV1alpha1RedisStreamEventSource}", Symbol("replicas")=>"Int64", Symbol("resource")=>"Dict{String, IoArgoprojEventsV1alpha1ResourceEventSource}", Symbol("service")=>"IoArgoprojEventsV1alpha1Service", Symbol("sftp")=>"Dict{String, IoArgoprojEventsV1alpha1SFTPEventSource}", Symbol("slack")=>"Dict{String, IoArgoprojEventsV1alpha1SlackEventSource}", Symbol("sns")=>"Dict{String, IoArgoprojEventsV1alpha1SNSEventSource}", Symbol("sqs")=>"Dict{String, IoArgoprojEventsV1alpha1SQSEventSource}", Symbol("storageGrid")=>"Dict{String, IoArgoprojEventsV1alpha1StorageGridEventSource}", Symbol("stripe")=>"Dict{String, IoArgoprojEventsV1alpha1StripeEventSource}", Symbol("template")=>"IoArgoprojEventsV1alpha1Template", Symbol("webhook")=>"Dict{String, IoArgoprojEventsV1alpha1WebhookEventSource}", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1EventSourceSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1EventSourceSpec[name]))}

function check_required(o::IoArgoprojEventsV1alpha1EventSourceSpec)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1EventSourceSpec }, name::Symbol, val)
end
