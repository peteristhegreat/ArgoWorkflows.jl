# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.Version

    IoArgoprojWorkflowV1alpha1Version(;
        buildDate=nothing,
        compiler=nothing,
        gitCommit=nothing,
        gitTag=nothing,
        gitTreeState=nothing,
        goVersion=nothing,
        platform=nothing,
        version=nothing,
    )

    - buildDate::String
    - compiler::String
    - gitCommit::String
    - gitTag::String
    - gitTreeState::String
    - goVersion::String
    - platform::String
    - version::String
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1Version <: OpenAPI.APIModel
    buildDate::Union{Nothing, String} = nothing
    compiler::Union{Nothing, String} = nothing
    gitCommit::Union{Nothing, String} = nothing
    gitTag::Union{Nothing, String} = nothing
    gitTreeState::Union{Nothing, String} = nothing
    goVersion::Union{Nothing, String} = nothing
    platform::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1Version(buildDate, compiler, gitCommit, gitTag, gitTreeState, goVersion, platform, version, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Version, Symbol("buildDate"), buildDate)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Version, Symbol("compiler"), compiler)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Version, Symbol("gitCommit"), gitCommit)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Version, Symbol("gitTag"), gitTag)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Version, Symbol("gitTreeState"), gitTreeState)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Version, Symbol("goVersion"), goVersion)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Version, Symbol("platform"), platform)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Version, Symbol("version"), version)
        return new(buildDate, compiler, gitCommit, gitTag, gitTreeState, goVersion, platform, version, )
    end
end # type IoArgoprojWorkflowV1alpha1Version

const _property_types_IoArgoprojWorkflowV1alpha1Version = Dict{Symbol,String}(Symbol("buildDate")=>"String", Symbol("compiler")=>"String", Symbol("gitCommit")=>"String", Symbol("gitTag")=>"String", Symbol("gitTreeState")=>"String", Symbol("goVersion")=>"String", Symbol("platform")=>"String", Symbol("version")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1Version }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1Version[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1Version)
    o.buildDate === nothing && (return false)
    o.compiler === nothing && (return false)
    o.gitCommit === nothing && (return false)
    o.gitTag === nothing && (return false)
    o.gitTreeState === nothing && (return false)
    o.goVersion === nothing && (return false)
    o.platform === nothing && (return false)
    o.version === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1Version }, name::Symbol, val)
end
