# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.PersistentVolumeClaimTemplate
PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.

    IoK8sApiCoreV1PersistentVolumeClaimTemplate(;
        metadata=nothing,
        spec=nothing,
    )

    - metadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta
    - spec::IoK8sApiCoreV1PersistentVolumeClaimSpec
"""
Base.@kwdef mutable struct IoK8sApiCoreV1PersistentVolumeClaimTemplate <: OpenAPI.APIModel
    metadata = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta }
    spec = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1PersistentVolumeClaimSpec }

    function IoK8sApiCoreV1PersistentVolumeClaimTemplate(metadata, spec, )
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimTemplate, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimTemplate, Symbol("spec"), spec)
        return new(metadata, spec, )
    end
end # type IoK8sApiCoreV1PersistentVolumeClaimTemplate

const _property_types_IoK8sApiCoreV1PersistentVolumeClaimTemplate = Dict{Symbol,String}(Symbol("metadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", Symbol("spec")=>"IoK8sApiCoreV1PersistentVolumeClaimSpec", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1PersistentVolumeClaimTemplate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1PersistentVolumeClaimTemplate[name]))}

function check_required(o::IoK8sApiCoreV1PersistentVolumeClaimTemplate)
    o.spec === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1PersistentVolumeClaimTemplate }, name::Symbol, val)
end
