# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.CronWorkflowSpec
CronWorkflowSpec is the specification of a CronWorkflow

    IoArgoprojWorkflowV1alpha1CronWorkflowSpec(;
        concurrencyPolicy=nothing,
        failedJobsHistoryLimit=nothing,
        schedule=nothing,
        schedules=nothing,
        startingDeadlineSeconds=nothing,
        stopStrategy=nothing,
        successfulJobsHistoryLimit=nothing,
        suspend=nothing,
        timezone=nothing,
        when=nothing,
        workflowMetadata=nothing,
        workflowSpec=nothing,
    )

    - concurrencyPolicy::String : ConcurrencyPolicy is the K8s-style concurrency policy that will be used
    - failedJobsHistoryLimit::Int64 : FailedJobsHistoryLimit is the number of failed jobs to be kept at a time
    - schedule::String : Schedule is a schedule to run the Workflow in Cron format. Deprecated, use Schedules
    - schedules::Vector{String} : v3.6 and after: Schedules is a list of schedules to run the Workflow in Cron format
    - startingDeadlineSeconds::Int64 : StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.
    - stopStrategy::IoArgoprojWorkflowV1alpha1StopStrategy
    - successfulJobsHistoryLimit::Int64 : SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time
    - suspend::Bool : Suspend is a flag that will stop new CronWorkflows from running if set to true
    - timezone::String : Timezone is the timezone against which the cron schedule will be calculated, e.g. \&quot;Asia/Tokyo\&quot;. Default is machine&#39;s local time.
    - when::String : v3.6 and after: When is an expression that determines if a run should be scheduled.
    - workflowMetadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta
    - workflowSpec::IoArgoprojWorkflowV1alpha1WorkflowSpec
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1CronWorkflowSpec <: OpenAPI.APIModel
    concurrencyPolicy::Union{Nothing, String} = nothing
    failedJobsHistoryLimit::Union{Nothing, Int64} = nothing
    schedule::Union{Nothing, String} = nothing
    schedules::Union{Nothing, Vector{String}} = nothing
    startingDeadlineSeconds::Union{Nothing, Int64} = nothing
    stopStrategy = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1StopStrategy }
    successfulJobsHistoryLimit::Union{Nothing, Int64} = nothing
    suspend::Union{Nothing, Bool} = nothing
    timezone::Union{Nothing, String} = nothing
    when::Union{Nothing, String} = nothing
    workflowMetadata = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta }
    workflowSpec = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1WorkflowSpec }

    function IoArgoprojWorkflowV1alpha1CronWorkflowSpec(concurrencyPolicy, failedJobsHistoryLimit, schedule, schedules, startingDeadlineSeconds, stopStrategy, successfulJobsHistoryLimit, suspend, timezone, when, workflowMetadata, workflowSpec, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("concurrencyPolicy"), concurrencyPolicy)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("failedJobsHistoryLimit"), failedJobsHistoryLimit)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("schedule"), schedule)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("schedules"), schedules)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("startingDeadlineSeconds"), startingDeadlineSeconds)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("stopStrategy"), stopStrategy)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("successfulJobsHistoryLimit"), successfulJobsHistoryLimit)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("suspend"), suspend)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("timezone"), timezone)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("when"), when)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("workflowMetadata"), workflowMetadata)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1CronWorkflowSpec, Symbol("workflowSpec"), workflowSpec)
        return new(concurrencyPolicy, failedJobsHistoryLimit, schedule, schedules, startingDeadlineSeconds, stopStrategy, successfulJobsHistoryLimit, suspend, timezone, when, workflowMetadata, workflowSpec, )
    end
end # type IoArgoprojWorkflowV1alpha1CronWorkflowSpec

const _property_types_IoArgoprojWorkflowV1alpha1CronWorkflowSpec = Dict{Symbol,String}(Symbol("concurrencyPolicy")=>"String", Symbol("failedJobsHistoryLimit")=>"Int64", Symbol("schedule")=>"String", Symbol("schedules")=>"Vector{String}", Symbol("startingDeadlineSeconds")=>"Int64", Symbol("stopStrategy")=>"IoArgoprojWorkflowV1alpha1StopStrategy", Symbol("successfulJobsHistoryLimit")=>"Int64", Symbol("suspend")=>"Bool", Symbol("timezone")=>"String", Symbol("when")=>"String", Symbol("workflowMetadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", Symbol("workflowSpec")=>"IoArgoprojWorkflowV1alpha1WorkflowSpec", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1CronWorkflowSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1CronWorkflowSpec[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1CronWorkflowSpec)
    o.workflowSpec === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1CronWorkflowSpec }, name::Symbol, val)
end
