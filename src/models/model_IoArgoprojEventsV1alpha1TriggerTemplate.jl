# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.TriggerTemplate
TriggerTemplate is the template that describes trigger specification.

    IoArgoprojEventsV1alpha1TriggerTemplate(;
        argoWorkflow=nothing,
        awsLambda=nothing,
        azureEventHubs=nothing,
        azureServiceBus=nothing,
        conditions=nothing,
        conditionsReset=nothing,
        custom=nothing,
        email=nothing,
        http=nothing,
        k8s=nothing,
        kafka=nothing,
        log=nothing,
        name=nothing,
        nats=nothing,
        openWhisk=nothing,
        pulsar=nothing,
        slack=nothing,
    )

    - argoWorkflow::IoArgoprojEventsV1alpha1ArgoWorkflowTrigger
    - awsLambda::IoArgoprojEventsV1alpha1AWSLambdaTrigger
    - azureEventHubs::IoArgoprojEventsV1alpha1AzureEventHubsTrigger
    - azureServiceBus::IoArgoprojEventsV1alpha1AzureServiceBusTrigger
    - conditions::String
    - conditionsReset::Vector{IoArgoprojEventsV1alpha1ConditionsResetCriteria}
    - custom::IoArgoprojEventsV1alpha1CustomTrigger
    - email::IoArgoprojEventsV1alpha1EmailTrigger
    - http::IoArgoprojEventsV1alpha1HTTPTrigger
    - k8s::IoArgoprojEventsV1alpha1StandardK8STrigger
    - kafka::IoArgoprojEventsV1alpha1KafkaTrigger
    - log::IoArgoprojEventsV1alpha1LogTrigger
    - name::String : Name is a unique name of the action to take.
    - nats::IoArgoprojEventsV1alpha1NATSTrigger
    - openWhisk::IoArgoprojEventsV1alpha1OpenWhiskTrigger
    - pulsar::IoArgoprojEventsV1alpha1PulsarTrigger
    - slack::IoArgoprojEventsV1alpha1SlackTrigger
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1TriggerTemplate <: OpenAPI.APIModel
    argoWorkflow = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1ArgoWorkflowTrigger }
    awsLambda = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1AWSLambdaTrigger }
    azureEventHubs = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1AzureEventHubsTrigger }
    azureServiceBus = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1AzureServiceBusTrigger }
    conditions::Union{Nothing, String} = nothing
    conditionsReset::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1ConditionsResetCriteria} }
    custom = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1CustomTrigger }
    email = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EmailTrigger }
    http = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1HTTPTrigger }
    k8s = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1StandardK8STrigger }
    kafka = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1KafkaTrigger }
    log = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1LogTrigger }
    name::Union{Nothing, String} = nothing
    nats = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1NATSTrigger }
    openWhisk = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1OpenWhiskTrigger }
    pulsar = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1PulsarTrigger }
    slack = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1SlackTrigger }

    function IoArgoprojEventsV1alpha1TriggerTemplate(argoWorkflow, awsLambda, azureEventHubs, azureServiceBus, conditions, conditionsReset, custom, email, http, k8s, kafka, log, name, nats, openWhisk, pulsar, slack, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("argoWorkflow"), argoWorkflow)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("awsLambda"), awsLambda)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("azureEventHubs"), azureEventHubs)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("azureServiceBus"), azureServiceBus)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("conditions"), conditions)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("conditionsReset"), conditionsReset)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("custom"), custom)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("email"), email)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("http"), http)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("k8s"), k8s)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("kafka"), kafka)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("log"), log)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("name"), name)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("nats"), nats)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("openWhisk"), openWhisk)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("pulsar"), pulsar)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TriggerTemplate, Symbol("slack"), slack)
        return new(argoWorkflow, awsLambda, azureEventHubs, azureServiceBus, conditions, conditionsReset, custom, email, http, k8s, kafka, log, name, nats, openWhisk, pulsar, slack, )
    end
end # type IoArgoprojEventsV1alpha1TriggerTemplate

const _property_types_IoArgoprojEventsV1alpha1TriggerTemplate = Dict{Symbol,String}(Symbol("argoWorkflow")=>"IoArgoprojEventsV1alpha1ArgoWorkflowTrigger", Symbol("awsLambda")=>"IoArgoprojEventsV1alpha1AWSLambdaTrigger", Symbol("azureEventHubs")=>"IoArgoprojEventsV1alpha1AzureEventHubsTrigger", Symbol("azureServiceBus")=>"IoArgoprojEventsV1alpha1AzureServiceBusTrigger", Symbol("conditions")=>"String", Symbol("conditionsReset")=>"Vector{IoArgoprojEventsV1alpha1ConditionsResetCriteria}", Symbol("custom")=>"IoArgoprojEventsV1alpha1CustomTrigger", Symbol("email")=>"IoArgoprojEventsV1alpha1EmailTrigger", Symbol("http")=>"IoArgoprojEventsV1alpha1HTTPTrigger", Symbol("k8s")=>"IoArgoprojEventsV1alpha1StandardK8STrigger", Symbol("kafka")=>"IoArgoprojEventsV1alpha1KafkaTrigger", Symbol("log")=>"IoArgoprojEventsV1alpha1LogTrigger", Symbol("name")=>"String", Symbol("nats")=>"IoArgoprojEventsV1alpha1NATSTrigger", Symbol("openWhisk")=>"IoArgoprojEventsV1alpha1OpenWhiskTrigger", Symbol("pulsar")=>"IoArgoprojEventsV1alpha1PulsarTrigger", Symbol("slack")=>"IoArgoprojEventsV1alpha1SlackTrigger", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1TriggerTemplate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1TriggerTemplate[name]))}

function check_required(o::IoArgoprojEventsV1alpha1TriggerTemplate)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1TriggerTemplate }, name::Symbol, val)
end
