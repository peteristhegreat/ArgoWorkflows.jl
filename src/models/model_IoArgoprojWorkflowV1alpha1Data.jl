# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.Data
Data is a data template

    IoArgoprojWorkflowV1alpha1Data(;
        source=nothing,
        transformation=nothing,
    )

    - source::IoArgoprojWorkflowV1alpha1DataSource
    - transformation::Vector{IoArgoprojWorkflowV1alpha1TransformationStep} : Transformation applies a set of transformations
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1Data <: OpenAPI.APIModel
    source = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1DataSource }
    transformation::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojWorkflowV1alpha1TransformationStep} }

    function IoArgoprojWorkflowV1alpha1Data(source, transformation, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Data, Symbol("source"), source)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Data, Symbol("transformation"), transformation)
        return new(source, transformation, )
    end
end # type IoArgoprojWorkflowV1alpha1Data

const _property_types_IoArgoprojWorkflowV1alpha1Data = Dict{Symbol,String}(Symbol("source")=>"IoArgoprojWorkflowV1alpha1DataSource", Symbol("transformation")=>"Vector{IoArgoprojWorkflowV1alpha1TransformationStep}", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1Data }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1Data[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1Data)
    o.source === nothing && (return false)
    o.transformation === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1Data }, name::Symbol, val)
end
