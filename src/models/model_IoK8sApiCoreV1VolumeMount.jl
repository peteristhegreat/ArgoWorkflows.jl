# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.VolumeMount
VolumeMount describes a mounting of a Volume within a container.

    IoK8sApiCoreV1VolumeMount(;
        mountPath=nothing,
        mountPropagation=nothing,
        name=nothing,
        readOnly=nothing,
        recursiveReadOnly=nothing,
        subPath=nothing,
        subPathExpr=nothing,
    )

    - mountPath::String : Path within the container at which the volume should be mounted.  Must not contain &#39;:&#39;.
    - mountPropagation::String : mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
    - name::String : This must match the Name of a Volume.
    - readOnly::Bool : Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    - recursiveReadOnly::String : RecursiveReadOnly specifies whether read-only mounts should be handled recursively.  If ReadOnly is false, this field has no meaning and must be unspecified.  If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.  If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).  If this field is not specified, it is treated as an equivalent of Disabled.
    - subPath::String : Path within the volume from which the container&#39;s volume should be mounted. Defaults to \&quot;\&quot; (volume&#39;s root).
    - subPathExpr::String : Expanded path within the volume from which the container&#39;s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container&#39;s environment. Defaults to \&quot;\&quot; (volume&#39;s root). SubPathExpr and SubPath are mutually exclusive.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1VolumeMount <: OpenAPI.APIModel
    mountPath::Union{Nothing, String} = nothing
    mountPropagation::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    readOnly::Union{Nothing, Bool} = nothing
    recursiveReadOnly::Union{Nothing, String} = nothing
    subPath::Union{Nothing, String} = nothing
    subPathExpr::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1VolumeMount(mountPath, mountPropagation, name, readOnly, recursiveReadOnly, subPath, subPathExpr, )
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeMount, Symbol("mountPath"), mountPath)
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeMount, Symbol("mountPropagation"), mountPropagation)
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeMount, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeMount, Symbol("readOnly"), readOnly)
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeMount, Symbol("recursiveReadOnly"), recursiveReadOnly)
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeMount, Symbol("subPath"), subPath)
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeMount, Symbol("subPathExpr"), subPathExpr)
        return new(mountPath, mountPropagation, name, readOnly, recursiveReadOnly, subPath, subPathExpr, )
    end
end # type IoK8sApiCoreV1VolumeMount

const _property_types_IoK8sApiCoreV1VolumeMount = Dict{Symbol,String}(Symbol("mountPath")=>"String", Symbol("mountPropagation")=>"String", Symbol("name")=>"String", Symbol("readOnly")=>"Bool", Symbol("recursiveReadOnly")=>"String", Symbol("subPath")=>"String", Symbol("subPathExpr")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1VolumeMount }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1VolumeMount[name]))}

function check_required(o::IoK8sApiCoreV1VolumeMount)
    o.mountPath === nothing && (return false)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1VolumeMount }, name::Symbol, val)
end
