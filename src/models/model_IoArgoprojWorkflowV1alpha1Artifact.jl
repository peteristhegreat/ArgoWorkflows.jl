# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.Artifact
Artifact indicates an artifact to place at a specified path

    IoArgoprojWorkflowV1alpha1Artifact(;
        archive=nothing,
        archiveLogs=nothing,
        artifactGC=nothing,
        artifactory=nothing,
        azure=nothing,
        deleted=nothing,
        from=nothing,
        fromExpression=nothing,
        gcs=nothing,
        git=nothing,
        globalName=nothing,
        hdfs=nothing,
        http=nothing,
        mode=nothing,
        name=nothing,
        optional=nothing,
        oss=nothing,
        path=nothing,
        raw=nothing,
        recurseMode=nothing,
        s3=nothing,
        subPath=nothing,
    )

    - archive::IoArgoprojWorkflowV1alpha1ArchiveStrategy
    - archiveLogs::Bool : ArchiveLogs indicates if the container logs should be archived
    - artifactGC::IoArgoprojWorkflowV1alpha1ArtifactGC
    - artifactory::IoArgoprojWorkflowV1alpha1ArtifactoryArtifact
    - azure::IoArgoprojWorkflowV1alpha1AzureArtifact
    - deleted::Bool : Has this been deleted?
    - from::String : From allows an artifact to reference an artifact from a previous step
    - fromExpression::String : FromExpression, if defined, is evaluated to specify the value for the artifact
    - gcs::IoArgoprojWorkflowV1alpha1GCSArtifact
    - git::IoArgoprojWorkflowV1alpha1GitArtifact
    - globalName::String : GlobalName exports an output artifact to the global scope, making it available as &#39;{{io.argoproj.workflow.v1alpha1.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts
    - hdfs::IoArgoprojWorkflowV1alpha1HDFSArtifact
    - http::IoArgoprojWorkflowV1alpha1HTTPArtifact
    - mode::Int64 : mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.
    - name::String : name of the artifact. must be unique within a template&#39;s inputs/outputs.
    - optional::Bool : Make Artifacts optional, if Artifacts doesn&#39;t generate or exist
    - oss::IoArgoprojWorkflowV1alpha1OSSArtifact
    - path::String : Path is the container path to the artifact
    - raw::IoArgoprojWorkflowV1alpha1RawArtifact
    - recurseMode::Bool : If mode is set, apply the permission recursively into the artifact if it is a folder
    - s3::IoArgoprojWorkflowV1alpha1S3Artifact
    - subPath::String : SubPath allows an artifact to be sourced from a subpath within the specified source
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1Artifact <: OpenAPI.APIModel
    archive = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1ArchiveStrategy }
    archiveLogs::Union{Nothing, Bool} = nothing
    artifactGC = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1ArtifactGC }
    artifactory = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1ArtifactoryArtifact }
    azure = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1AzureArtifact }
    deleted::Union{Nothing, Bool} = nothing
    from::Union{Nothing, String} = nothing
    fromExpression::Union{Nothing, String} = nothing
    gcs = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1GCSArtifact }
    git = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1GitArtifact }
    globalName::Union{Nothing, String} = nothing
    hdfs = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1HDFSArtifact }
    http = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1HTTPArtifact }
    mode::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    optional::Union{Nothing, Bool} = nothing
    oss = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1OSSArtifact }
    path::Union{Nothing, String} = nothing
    raw = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1RawArtifact }
    recurseMode::Union{Nothing, Bool} = nothing
    s3 = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1S3Artifact }
    subPath::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1Artifact(archive, archiveLogs, artifactGC, artifactory, azure, deleted, from, fromExpression, gcs, git, globalName, hdfs, http, mode, name, optional, oss, path, raw, recurseMode, s3, subPath, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("archive"), archive)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("archiveLogs"), archiveLogs)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("artifactGC"), artifactGC)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("artifactory"), artifactory)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("azure"), azure)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("deleted"), deleted)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("from"), from)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("fromExpression"), fromExpression)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("gcs"), gcs)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("git"), git)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("globalName"), globalName)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("hdfs"), hdfs)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("http"), http)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("mode"), mode)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("name"), name)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("optional"), optional)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("oss"), oss)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("path"), path)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("raw"), raw)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("recurseMode"), recurseMode)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("s3"), s3)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Artifact, Symbol("subPath"), subPath)
        return new(archive, archiveLogs, artifactGC, artifactory, azure, deleted, from, fromExpression, gcs, git, globalName, hdfs, http, mode, name, optional, oss, path, raw, recurseMode, s3, subPath, )
    end
end # type IoArgoprojWorkflowV1alpha1Artifact

const _property_types_IoArgoprojWorkflowV1alpha1Artifact = Dict{Symbol,String}(Symbol("archive")=>"IoArgoprojWorkflowV1alpha1ArchiveStrategy", Symbol("archiveLogs")=>"Bool", Symbol("artifactGC")=>"IoArgoprojWorkflowV1alpha1ArtifactGC", Symbol("artifactory")=>"IoArgoprojWorkflowV1alpha1ArtifactoryArtifact", Symbol("azure")=>"IoArgoprojWorkflowV1alpha1AzureArtifact", Symbol("deleted")=>"Bool", Symbol("from")=>"String", Symbol("fromExpression")=>"String", Symbol("gcs")=>"IoArgoprojWorkflowV1alpha1GCSArtifact", Symbol("git")=>"IoArgoprojWorkflowV1alpha1GitArtifact", Symbol("globalName")=>"String", Symbol("hdfs")=>"IoArgoprojWorkflowV1alpha1HDFSArtifact", Symbol("http")=>"IoArgoprojWorkflowV1alpha1HTTPArtifact", Symbol("mode")=>"Int64", Symbol("name")=>"String", Symbol("optional")=>"Bool", Symbol("oss")=>"IoArgoprojWorkflowV1alpha1OSSArtifact", Symbol("path")=>"String", Symbol("raw")=>"IoArgoprojWorkflowV1alpha1RawArtifact", Symbol("recurseMode")=>"Bool", Symbol("s3")=>"IoArgoprojWorkflowV1alpha1S3Artifact", Symbol("subPath")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1Artifact }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1Artifact[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1Artifact)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1Artifact }, name::Symbol, val)
end
