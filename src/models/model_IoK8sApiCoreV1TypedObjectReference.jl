# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.TypedObjectReference

    IoK8sApiCoreV1TypedObjectReference(;
        apiGroup=nothing,
        kind=nothing,
        name=nothing,
        namespace=nothing,
    )

    - apiGroup::String : APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    - kind::String : Kind is the type of resource being referenced
    - name::String : Name is the name of resource being referenced
    - namespace::String : Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace&#39;s owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1TypedObjectReference <: OpenAPI.APIModel
    apiGroup::Union{Nothing, String} = nothing
    kind::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1TypedObjectReference(apiGroup, kind, name, namespace, )
        OpenAPI.validate_property(IoK8sApiCoreV1TypedObjectReference, Symbol("apiGroup"), apiGroup)
        OpenAPI.validate_property(IoK8sApiCoreV1TypedObjectReference, Symbol("kind"), kind)
        OpenAPI.validate_property(IoK8sApiCoreV1TypedObjectReference, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1TypedObjectReference, Symbol("namespace"), namespace)
        return new(apiGroup, kind, name, namespace, )
    end
end # type IoK8sApiCoreV1TypedObjectReference

const _property_types_IoK8sApiCoreV1TypedObjectReference = Dict{Symbol,String}(Symbol("apiGroup")=>"String", Symbol("kind")=>"String", Symbol("name")=>"String", Symbol("namespace")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1TypedObjectReference }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1TypedObjectReference[name]))}

function check_required(o::IoK8sApiCoreV1TypedObjectReference)
    o.kind === nothing && (return false)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1TypedObjectReference }, name::Symbol, val)
end
