# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.GitArtifact

    IoArgoprojEventsV1alpha1GitArtifact(;
        branch=nothing,
        cloneDirectory=nothing,
        creds=nothing,
        filePath=nothing,
        insecureIgnoreHostKey=nothing,
        ref=nothing,
        remote=nothing,
        sshKeySecret=nothing,
        tag=nothing,
        url=nothing,
    )

    - branch::String
    - cloneDirectory::String : Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don&#39;t use any specific git provider client.
    - creds::IoArgoprojEventsV1alpha1GitCreds
    - filePath::String
    - insecureIgnoreHostKey::Bool
    - ref::String
    - remote::IoArgoprojEventsV1alpha1GitRemoteConfig
    - sshKeySecret::IoK8sApiCoreV1SecretKeySelector
    - tag::String
    - url::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1GitArtifact <: OpenAPI.APIModel
    branch::Union{Nothing, String} = nothing
    cloneDirectory::Union{Nothing, String} = nothing
    creds = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1GitCreds }
    filePath::Union{Nothing, String} = nothing
    insecureIgnoreHostKey::Union{Nothing, Bool} = nothing
    ref::Union{Nothing, String} = nothing
    remote = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1GitRemoteConfig }
    sshKeySecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    tag::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1GitArtifact(branch, cloneDirectory, creds, filePath, insecureIgnoreHostKey, ref, remote, sshKeySecret, tag, url, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitArtifact, Symbol("branch"), branch)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitArtifact, Symbol("cloneDirectory"), cloneDirectory)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitArtifact, Symbol("creds"), creds)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitArtifact, Symbol("filePath"), filePath)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitArtifact, Symbol("insecureIgnoreHostKey"), insecureIgnoreHostKey)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitArtifact, Symbol("ref"), ref)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitArtifact, Symbol("remote"), remote)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitArtifact, Symbol("sshKeySecret"), sshKeySecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitArtifact, Symbol("tag"), tag)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GitArtifact, Symbol("url"), url)
        return new(branch, cloneDirectory, creds, filePath, insecureIgnoreHostKey, ref, remote, sshKeySecret, tag, url, )
    end
end # type IoArgoprojEventsV1alpha1GitArtifact

const _property_types_IoArgoprojEventsV1alpha1GitArtifact = Dict{Symbol,String}(Symbol("branch")=>"String", Symbol("cloneDirectory")=>"String", Symbol("creds")=>"IoArgoprojEventsV1alpha1GitCreds", Symbol("filePath")=>"String", Symbol("insecureIgnoreHostKey")=>"Bool", Symbol("ref")=>"String", Symbol("remote")=>"IoArgoprojEventsV1alpha1GitRemoteConfig", Symbol("sshKeySecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("tag")=>"String", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1GitArtifact }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1GitArtifact[name]))}

function check_required(o::IoArgoprojEventsV1alpha1GitArtifact)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1GitArtifact }, name::Symbol, val)
end
