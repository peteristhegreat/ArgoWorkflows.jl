# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.OpenWhiskTrigger
OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.

    IoArgoprojEventsV1alpha1OpenWhiskTrigger(;
        actionName=nothing,
        authToken=nothing,
        host=nothing,
        namespace=nothing,
        parameters=nothing,
        payload=nothing,
        version=nothing,
    )

    - actionName::String : Name of the action/function.
    - authToken::IoK8sApiCoreV1SecretKeySelector
    - host::String : Host URL of the OpenWhisk.
    - namespace::String : Namespace for the action. Defaults to \&quot;_\&quot;. +optional.
    - parameters::Vector{IoArgoprojEventsV1alpha1TriggerParameter}
    - payload::Vector{IoArgoprojEventsV1alpha1TriggerParameter} : Payload is the list of key-value extracted from an event payload to construct the request payload.
    - version::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1OpenWhiskTrigger <: OpenAPI.APIModel
    actionName::Union{Nothing, String} = nothing
    authToken = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    host::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    payload::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    version::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1OpenWhiskTrigger(actionName, authToken, host, namespace, parameters, payload, version, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1OpenWhiskTrigger, Symbol("actionName"), actionName)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1OpenWhiskTrigger, Symbol("authToken"), authToken)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1OpenWhiskTrigger, Symbol("host"), host)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1OpenWhiskTrigger, Symbol("namespace"), namespace)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1OpenWhiskTrigger, Symbol("parameters"), parameters)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1OpenWhiskTrigger, Symbol("payload"), payload)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1OpenWhiskTrigger, Symbol("version"), version)
        return new(actionName, authToken, host, namespace, parameters, payload, version, )
    end
end # type IoArgoprojEventsV1alpha1OpenWhiskTrigger

const _property_types_IoArgoprojEventsV1alpha1OpenWhiskTrigger = Dict{Symbol,String}(Symbol("actionName")=>"String", Symbol("authToken")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("host")=>"String", Symbol("namespace")=>"String", Symbol("parameters")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("payload")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("version")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1OpenWhiskTrigger }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1OpenWhiskTrigger[name]))}

function check_required(o::IoArgoprojEventsV1alpha1OpenWhiskTrigger)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1OpenWhiskTrigger }, name::Symbol, val)
end
