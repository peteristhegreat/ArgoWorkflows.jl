# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.TemplateRef
TemplateRef is a reference of template resource.

    IoArgoprojWorkflowV1alpha1TemplateRef(;
        clusterScope=nothing,
        name=nothing,
        template=nothing,
    )

    - clusterScope::Bool : ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate).
    - name::String : Name is the resource name of the template.
    - template::String : Template is the name of referred template in the resource.
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1TemplateRef <: OpenAPI.APIModel
    clusterScope::Union{Nothing, Bool} = nothing
    name::Union{Nothing, String} = nothing
    template::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1TemplateRef(clusterScope, name, template, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1TemplateRef, Symbol("clusterScope"), clusterScope)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1TemplateRef, Symbol("name"), name)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1TemplateRef, Symbol("template"), template)
        return new(clusterScope, name, template, )
    end
end # type IoArgoprojWorkflowV1alpha1TemplateRef

const _property_types_IoArgoprojWorkflowV1alpha1TemplateRef = Dict{Symbol,String}(Symbol("clusterScope")=>"Bool", Symbol("name")=>"String", Symbol("template")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1TemplateRef }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1TemplateRef[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1TemplateRef)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1TemplateRef }, name::Symbol, val)
end
