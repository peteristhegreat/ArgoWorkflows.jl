# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.ArtifactLocation
ArtifactLocation describes a location for a single or multiple artifacts. It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname). It is also used to describe the location of multiple artifacts such as the archive location of a single workflow step, which the executor will use as a default location to store its files.

    IoArgoprojWorkflowV1alpha1ArtifactLocation(;
        archiveLogs=nothing,
        artifactory=nothing,
        azure=nothing,
        gcs=nothing,
        git=nothing,
        hdfs=nothing,
        http=nothing,
        oss=nothing,
        raw=nothing,
        s3=nothing,
    )

    - archiveLogs::Bool : ArchiveLogs indicates if the container logs should be archived
    - artifactory::IoArgoprojWorkflowV1alpha1ArtifactoryArtifact
    - azure::IoArgoprojWorkflowV1alpha1AzureArtifact
    - gcs::IoArgoprojWorkflowV1alpha1GCSArtifact
    - git::IoArgoprojWorkflowV1alpha1GitArtifact
    - hdfs::IoArgoprojWorkflowV1alpha1HDFSArtifact
    - http::IoArgoprojWorkflowV1alpha1HTTPArtifact
    - oss::IoArgoprojWorkflowV1alpha1OSSArtifact
    - raw::IoArgoprojWorkflowV1alpha1RawArtifact
    - s3::IoArgoprojWorkflowV1alpha1S3Artifact
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1ArtifactLocation <: OpenAPI.APIModel
    archiveLogs::Union{Nothing, Bool} = nothing
    artifactory = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1ArtifactoryArtifact }
    azure = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1AzureArtifact }
    gcs = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1GCSArtifact }
    git = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1GitArtifact }
    hdfs = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1HDFSArtifact }
    http = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1HTTPArtifact }
    oss = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1OSSArtifact }
    raw = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1RawArtifact }
    s3 = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1S3Artifact }

    function IoArgoprojWorkflowV1alpha1ArtifactLocation(archiveLogs, artifactory, azure, gcs, git, hdfs, http, oss, raw, s3, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactLocation, Symbol("archiveLogs"), archiveLogs)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactLocation, Symbol("artifactory"), artifactory)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactLocation, Symbol("azure"), azure)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactLocation, Symbol("gcs"), gcs)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactLocation, Symbol("git"), git)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactLocation, Symbol("hdfs"), hdfs)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactLocation, Symbol("http"), http)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactLocation, Symbol("oss"), oss)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactLocation, Symbol("raw"), raw)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ArtifactLocation, Symbol("s3"), s3)
        return new(archiveLogs, artifactory, azure, gcs, git, hdfs, http, oss, raw, s3, )
    end
end # type IoArgoprojWorkflowV1alpha1ArtifactLocation

const _property_types_IoArgoprojWorkflowV1alpha1ArtifactLocation = Dict{Symbol,String}(Symbol("archiveLogs")=>"Bool", Symbol("artifactory")=>"IoArgoprojWorkflowV1alpha1ArtifactoryArtifact", Symbol("azure")=>"IoArgoprojWorkflowV1alpha1AzureArtifact", Symbol("gcs")=>"IoArgoprojWorkflowV1alpha1GCSArtifact", Symbol("git")=>"IoArgoprojWorkflowV1alpha1GitArtifact", Symbol("hdfs")=>"IoArgoprojWorkflowV1alpha1HDFSArtifact", Symbol("http")=>"IoArgoprojWorkflowV1alpha1HTTPArtifact", Symbol("oss")=>"IoArgoprojWorkflowV1alpha1OSSArtifact", Symbol("raw")=>"IoArgoprojWorkflowV1alpha1RawArtifact", Symbol("s3")=>"IoArgoprojWorkflowV1alpha1S3Artifact", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1ArtifactLocation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1ArtifactLocation[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1ArtifactLocation)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1ArtifactLocation }, name::Symbol, val)
end
