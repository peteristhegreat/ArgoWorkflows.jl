# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.HTTPBodySource
HTTPBodySource contains the source of the HTTP body.

    IoArgoprojWorkflowV1alpha1HTTPBodySource(;
        bytes=nothing,
    )

    - bytes::Vector{UInt8}
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1HTTPBodySource <: OpenAPI.APIModel
    bytes::Union{Nothing, Vector{UInt8}} = nothing

    function IoArgoprojWorkflowV1alpha1HTTPBodySource(bytes, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1HTTPBodySource, Symbol("bytes"), bytes)
        return new(bytes, )
    end
end # type IoArgoprojWorkflowV1alpha1HTTPBodySource

const _property_types_IoArgoprojWorkflowV1alpha1HTTPBodySource = Dict{Symbol,String}(Symbol("bytes")=>"Vector{UInt8}", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1HTTPBodySource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1HTTPBodySource[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1HTTPBodySource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1HTTPBodySource }, name::Symbol, val)
    if name === Symbol("bytes")
        OpenAPI.validate_param(name, "IoArgoprojWorkflowV1alpha1HTTPBodySource", :format, val, "byte")
    end
    if name === Symbol("bytes")
        OpenAPI.validate_param(name, "IoArgoprojWorkflowV1alpha1HTTPBodySource", :pattern, val, r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$")
    end
end
