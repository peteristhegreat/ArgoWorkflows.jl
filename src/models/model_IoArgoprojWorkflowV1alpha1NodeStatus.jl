# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.NodeStatus
NodeStatus contains status information about an individual node in the workflow

    IoArgoprojWorkflowV1alpha1NodeStatus(;
        boundaryID=nothing,
        children=nothing,
        daemoned=nothing,
        displayName=nothing,
        estimatedDuration=nothing,
        finishedAt=nothing,
        hostNodeName=nothing,
        id=nothing,
        inputs=nothing,
        memoizationStatus=nothing,
        message=nothing,
        name=nothing,
        nodeFlag=nothing,
        outboundNodes=nothing,
        outputs=nothing,
        phase=nothing,
        podIP=nothing,
        progress=nothing,
        resourcesDuration=nothing,
        startedAt=nothing,
        synchronizationStatus=nothing,
        templateName=nothing,
        templateRef=nothing,
        templateScope=nothing,
        type=nothing,
    )

    - boundaryID::String : BoundaryID indicates the node ID of the associated template root node in which this node belongs to
    - children::Vector{String} : Children is a list of child node IDs
    - daemoned::Bool : Daemoned tracks whether or not this node was daemoned and need to be terminated
    - displayName::String : DisplayName is a human readable representation of the node. Unique within a template boundary
    - estimatedDuration::Int64 : EstimatedDuration in seconds.
    - finishedAt::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - hostNodeName::String : HostNodeName name of the Kubernetes node on which the Pod is running, if applicable
    - id::String : ID is a unique identifier of a node within the worklow It is implemented as a hash of the node name, which makes the ID deterministic
    - inputs::IoArgoprojWorkflowV1alpha1Inputs
    - memoizationStatus::IoArgoprojWorkflowV1alpha1MemoizationStatus
    - message::String : A human readable message indicating details about why the node is in this condition.
    - name::String : Name is unique name in the node tree used to generate the node ID
    - nodeFlag::IoArgoprojWorkflowV1alpha1NodeFlag
    - outboundNodes::Vector{String} : OutboundNodes tracks the node IDs which are considered \&quot;outbound\&quot; nodes to a template invocation. For every invocation of a template, there are nodes which we considered as \&quot;outbound\&quot;. Essentially, these are last nodes in the execution sequence to run, before the template is considered completed. These nodes are then connected as parents to a following step.  In the case of single pod steps (i.e. container, script, resource templates), this list will be nil since the pod itself is already considered the \&quot;outbound\&quot; node. In the case of DAGs, outbound nodes are the \&quot;target\&quot; tasks (tasks with no children). In the case of steps, outbound nodes are all the containers involved in the last step group. NOTE: since templates are composable, the list of outbound nodes are carried upwards when a DAG/steps template invokes another DAG/steps template. In other words, the outbound nodes of a template, will be a superset of the outbound nodes of its last children.
    - outputs::IoArgoprojWorkflowV1alpha1Outputs
    - phase::String : Phase a simple, high-level summary of where the node is in its lifecycle. Can be used as a state machine. Will be one of these values \&quot;Pending\&quot;, \&quot;Running\&quot; before the node is completed, or \&quot;Succeeded\&quot;, \&quot;Skipped\&quot;, \&quot;Failed\&quot;, \&quot;Error\&quot;, or \&quot;Omitted\&quot; as a final state.
    - podIP::String : PodIP captures the IP of the pod for daemoned steps
    - progress::String : Progress to completion
    - resourcesDuration::Dict{String, Int64} : ResourcesDuration is indicative, but not accurate, resource duration. This is populated when the nodes completes.
    - startedAt::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - synchronizationStatus::IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus
    - templateName::String : TemplateName is the template name which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)
    - templateRef::IoArgoprojWorkflowV1alpha1TemplateRef
    - templateScope::String : TemplateScope is the template scope in which the template of this node was retrieved.
    - type::String : Type indicates type of node
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1NodeStatus <: OpenAPI.APIModel
    boundaryID::Union{Nothing, String} = nothing
    children::Union{Nothing, Vector{String}} = nothing
    daemoned::Union{Nothing, Bool} = nothing
    displayName::Union{Nothing, String} = nothing
    estimatedDuration::Union{Nothing, Int64} = nothing
    finishedAt::Union{Nothing, ZonedDateTime} = nothing
    hostNodeName::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    inputs = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1Inputs }
    memoizationStatus = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1MemoizationStatus }
    message::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    nodeFlag = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1NodeFlag }
    outboundNodes::Union{Nothing, Vector{String}} = nothing
    outputs = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1Outputs }
    phase::Union{Nothing, String} = nothing
    podIP::Union{Nothing, String} = nothing
    progress::Union{Nothing, String} = nothing
    resourcesDuration::Union{Nothing, Dict{String, Int64}} = nothing
    startedAt::Union{Nothing, ZonedDateTime} = nothing
    synchronizationStatus = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus }
    templateName::Union{Nothing, String} = nothing
    templateRef = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1TemplateRef }
    templateScope::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1NodeStatus(boundaryID, children, daemoned, displayName, estimatedDuration, finishedAt, hostNodeName, id, inputs, memoizationStatus, message, name, nodeFlag, outboundNodes, outputs, phase, podIP, progress, resourcesDuration, startedAt, synchronizationStatus, templateName, templateRef, templateScope, type, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("boundaryID"), boundaryID)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("children"), children)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("daemoned"), daemoned)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("displayName"), displayName)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("estimatedDuration"), estimatedDuration)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("finishedAt"), finishedAt)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("hostNodeName"), hostNodeName)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("id"), id)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("inputs"), inputs)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("memoizationStatus"), memoizationStatus)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("message"), message)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("name"), name)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("nodeFlag"), nodeFlag)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("outboundNodes"), outboundNodes)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("outputs"), outputs)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("phase"), phase)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("podIP"), podIP)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("progress"), progress)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("resourcesDuration"), resourcesDuration)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("startedAt"), startedAt)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("synchronizationStatus"), synchronizationStatus)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("templateName"), templateName)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("templateRef"), templateRef)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("templateScope"), templateScope)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1NodeStatus, Symbol("type"), type)
        return new(boundaryID, children, daemoned, displayName, estimatedDuration, finishedAt, hostNodeName, id, inputs, memoizationStatus, message, name, nodeFlag, outboundNodes, outputs, phase, podIP, progress, resourcesDuration, startedAt, synchronizationStatus, templateName, templateRef, templateScope, type, )
    end
end # type IoArgoprojWorkflowV1alpha1NodeStatus

const _property_types_IoArgoprojWorkflowV1alpha1NodeStatus = Dict{Symbol,String}(Symbol("boundaryID")=>"String", Symbol("children")=>"Vector{String}", Symbol("daemoned")=>"Bool", Symbol("displayName")=>"String", Symbol("estimatedDuration")=>"Int64", Symbol("finishedAt")=>"ZonedDateTime", Symbol("hostNodeName")=>"String", Symbol("id")=>"String", Symbol("inputs")=>"IoArgoprojWorkflowV1alpha1Inputs", Symbol("memoizationStatus")=>"IoArgoprojWorkflowV1alpha1MemoizationStatus", Symbol("message")=>"String", Symbol("name")=>"String", Symbol("nodeFlag")=>"IoArgoprojWorkflowV1alpha1NodeFlag", Symbol("outboundNodes")=>"Vector{String}", Symbol("outputs")=>"IoArgoprojWorkflowV1alpha1Outputs", Symbol("phase")=>"String", Symbol("podIP")=>"String", Symbol("progress")=>"String", Symbol("resourcesDuration")=>"Dict{String, Int64}", Symbol("startedAt")=>"ZonedDateTime", Symbol("synchronizationStatus")=>"IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus", Symbol("templateName")=>"String", Symbol("templateRef")=>"IoArgoprojWorkflowV1alpha1TemplateRef", Symbol("templateScope")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1NodeStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1NodeStatus[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1NodeStatus)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1NodeStatus }, name::Symbol, val)
    if name === Symbol("finishedAt")
        OpenAPI.validate_param(name, "IoArgoprojWorkflowV1alpha1NodeStatus", :format, val, "date-time")
    end
    if name === Symbol("startedAt")
        OpenAPI.validate_param(name, "IoArgoprojWorkflowV1alpha1NodeStatus", :format, val, "date-time")
    end
end
