# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.SlackTrigger
SlackTrigger refers to the specification of the slack notification trigger.

    IoArgoprojEventsV1alpha1SlackTrigger(;
        attachments=nothing,
        blocks=nothing,
        channel=nothing,
        message=nothing,
        parameters=nothing,
        sender=nothing,
        slackToken=nothing,
        thread=nothing,
    )

    - attachments::String
    - blocks::String
    - channel::String
    - message::String
    - parameters::Vector{IoArgoprojEventsV1alpha1TriggerParameter}
    - sender::IoArgoprojEventsV1alpha1SlackSender
    - slackToken::IoK8sApiCoreV1SecretKeySelector
    - thread::IoArgoprojEventsV1alpha1SlackThread
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1SlackTrigger <: OpenAPI.APIModel
    attachments::Union{Nothing, String} = nothing
    blocks::Union{Nothing, String} = nothing
    channel::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    sender = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1SlackSender }
    slackToken = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    thread = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1SlackThread }

    function IoArgoprojEventsV1alpha1SlackTrigger(attachments, blocks, channel, message, parameters, sender, slackToken, thread, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SlackTrigger, Symbol("attachments"), attachments)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SlackTrigger, Symbol("blocks"), blocks)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SlackTrigger, Symbol("channel"), channel)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SlackTrigger, Symbol("message"), message)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SlackTrigger, Symbol("parameters"), parameters)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SlackTrigger, Symbol("sender"), sender)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SlackTrigger, Symbol("slackToken"), slackToken)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SlackTrigger, Symbol("thread"), thread)
        return new(attachments, blocks, channel, message, parameters, sender, slackToken, thread, )
    end
end # type IoArgoprojEventsV1alpha1SlackTrigger

const _property_types_IoArgoprojEventsV1alpha1SlackTrigger = Dict{Symbol,String}(Symbol("attachments")=>"String", Symbol("blocks")=>"String", Symbol("channel")=>"String", Symbol("message")=>"String", Symbol("parameters")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("sender")=>"IoArgoprojEventsV1alpha1SlackSender", Symbol("slackToken")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("thread")=>"IoArgoprojEventsV1alpha1SlackThread", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1SlackTrigger }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1SlackTrigger[name]))}

function check_required(o::IoArgoprojEventsV1alpha1SlackTrigger)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1SlackTrigger }, name::Symbol, val)
end
