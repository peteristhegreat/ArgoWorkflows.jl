# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.BitbucketEventSource

    IoArgoprojEventsV1alpha1BitbucketEventSource(;
        auth=nothing,
        deleteHookOnFinish=nothing,
        events=nothing,
        filter=nothing,
        metadata=nothing,
        owner=nothing,
        projectKey=nothing,
        repositories=nothing,
        repositorySlug=nothing,
        webhook=nothing,
    )

    - auth::IoArgoprojEventsV1alpha1BitbucketAuth
    - deleteHookOnFinish::Bool
    - events::Vector{String} : Events this webhook is subscribed to.
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - metadata::Dict{String, String}
    - owner::String
    - projectKey::String
    - repositories::Vector{IoArgoprojEventsV1alpha1BitbucketRepository}
    - repositorySlug::String
    - webhook::IoArgoprojEventsV1alpha1WebhookContext
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1BitbucketEventSource <: OpenAPI.APIModel
    auth = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1BitbucketAuth }
    deleteHookOnFinish::Union{Nothing, Bool} = nothing
    events::Union{Nothing, Vector{String}} = nothing
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    metadata::Union{Nothing, Dict{String, String}} = nothing
    owner::Union{Nothing, String} = nothing
    projectKey::Union{Nothing, String} = nothing
    repositories::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1BitbucketRepository} }
    repositorySlug::Union{Nothing, String} = nothing
    webhook = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1WebhookContext }

    function IoArgoprojEventsV1alpha1BitbucketEventSource(auth, deleteHookOnFinish, events, filter, metadata, owner, projectKey, repositories, repositorySlug, webhook, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketEventSource, Symbol("auth"), auth)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketEventSource, Symbol("deleteHookOnFinish"), deleteHookOnFinish)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketEventSource, Symbol("events"), events)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketEventSource, Symbol("owner"), owner)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketEventSource, Symbol("projectKey"), projectKey)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketEventSource, Symbol("repositories"), repositories)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketEventSource, Symbol("repositorySlug"), repositorySlug)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketEventSource, Symbol("webhook"), webhook)
        return new(auth, deleteHookOnFinish, events, filter, metadata, owner, projectKey, repositories, repositorySlug, webhook, )
    end
end # type IoArgoprojEventsV1alpha1BitbucketEventSource

const _property_types_IoArgoprojEventsV1alpha1BitbucketEventSource = Dict{Symbol,String}(Symbol("auth")=>"IoArgoprojEventsV1alpha1BitbucketAuth", Symbol("deleteHookOnFinish")=>"Bool", Symbol("events")=>"Vector{String}", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("metadata")=>"Dict{String, String}", Symbol("owner")=>"String", Symbol("projectKey")=>"String", Symbol("repositories")=>"Vector{IoArgoprojEventsV1alpha1BitbucketRepository}", Symbol("repositorySlug")=>"String", Symbol("webhook")=>"IoArgoprojEventsV1alpha1WebhookContext", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1BitbucketEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1BitbucketEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1BitbucketEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1BitbucketEventSource }, name::Symbol, val)
end
