# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionResource
+protobuf.options.(gogoproto.goproto_stringer)&#x3D;false

    IoK8sApimachineryPkgApisMetaV1GroupVersionResource(;
        group=nothing,
        resource=nothing,
        version=nothing,
    )

    - group::String
    - resource::String
    - version::String
"""
Base.@kwdef mutable struct IoK8sApimachineryPkgApisMetaV1GroupVersionResource <: OpenAPI.APIModel
    group::Union{Nothing, String} = nothing
    resource::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing

    function IoK8sApimachineryPkgApisMetaV1GroupVersionResource(group, resource, version, )
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1GroupVersionResource, Symbol("group"), group)
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1GroupVersionResource, Symbol("resource"), resource)
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1GroupVersionResource, Symbol("version"), version)
        return new(group, resource, version, )
    end
end # type IoK8sApimachineryPkgApisMetaV1GroupVersionResource

const _property_types_IoK8sApimachineryPkgApisMetaV1GroupVersionResource = Dict{Symbol,String}(Symbol("group")=>"String", Symbol("resource")=>"String", Symbol("version")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApimachineryPkgApisMetaV1GroupVersionResource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApimachineryPkgApisMetaV1GroupVersionResource[name]))}

function check_required(o::IoK8sApimachineryPkgApisMetaV1GroupVersionResource)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApimachineryPkgApisMetaV1GroupVersionResource }, name::Symbol, val)
end
