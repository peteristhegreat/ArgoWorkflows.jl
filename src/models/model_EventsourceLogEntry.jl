# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""eventsource.LogEntry

    EventsourceLogEntry(;
        eventName=nothing,
        eventSourceName=nothing,
        eventSourceType=nothing,
        level=nothing,
        msg=nothing,
        namespace=nothing,
        time=nothing,
    )

    - eventName::String
    - eventSourceName::String
    - eventSourceType::String
    - level::String
    - msg::String
    - namespace::String
    - time::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
"""
Base.@kwdef mutable struct EventsourceLogEntry <: OpenAPI.APIModel
    eventName::Union{Nothing, String} = nothing
    eventSourceName::Union{Nothing, String} = nothing
    eventSourceType::Union{Nothing, String} = nothing
    level::Union{Nothing, String} = nothing
    msg::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing
    time::Union{Nothing, ZonedDateTime} = nothing

    function EventsourceLogEntry(eventName, eventSourceName, eventSourceType, level, msg, namespace, time, )
        OpenAPI.validate_property(EventsourceLogEntry, Symbol("eventName"), eventName)
        OpenAPI.validate_property(EventsourceLogEntry, Symbol("eventSourceName"), eventSourceName)
        OpenAPI.validate_property(EventsourceLogEntry, Symbol("eventSourceType"), eventSourceType)
        OpenAPI.validate_property(EventsourceLogEntry, Symbol("level"), level)
        OpenAPI.validate_property(EventsourceLogEntry, Symbol("msg"), msg)
        OpenAPI.validate_property(EventsourceLogEntry, Symbol("namespace"), namespace)
        OpenAPI.validate_property(EventsourceLogEntry, Symbol("time"), time)
        return new(eventName, eventSourceName, eventSourceType, level, msg, namespace, time, )
    end
end # type EventsourceLogEntry

const _property_types_EventsourceLogEntry = Dict{Symbol,String}(Symbol("eventName")=>"String", Symbol("eventSourceName")=>"String", Symbol("eventSourceType")=>"String", Symbol("level")=>"String", Symbol("msg")=>"String", Symbol("namespace")=>"String", Symbol("time")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ EventsourceLogEntry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EventsourceLogEntry[name]))}

function check_required(o::EventsourceLogEntry)
    true
end

function OpenAPI.validate_property(::Type{ EventsourceLogEntry }, name::Symbol, val)
    if name === Symbol("time")
        OpenAPI.validate_param(name, "EventsourceLogEntry", :format, val, "date-time")
    end
end
