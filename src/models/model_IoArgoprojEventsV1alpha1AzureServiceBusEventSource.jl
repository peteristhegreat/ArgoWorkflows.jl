# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.AzureServiceBusEventSource

    IoArgoprojEventsV1alpha1AzureServiceBusEventSource(;
        connectionString=nothing,
        filter=nothing,
        fullyQualifiedNamespace=nothing,
        jsonBody=nothing,
        metadata=nothing,
        queueName=nothing,
        subscriptionName=nothing,
        tls=nothing,
        topicName=nothing,
    )

    - connectionString::IoK8sApiCoreV1SecretKeySelector
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - fullyQualifiedNamespace::String
    - jsonBody::Bool
    - metadata::Dict{String, String}
    - queueName::String
    - subscriptionName::String
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - topicName::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1AzureServiceBusEventSource <: OpenAPI.APIModel
    connectionString = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    fullyQualifiedNamespace::Union{Nothing, String} = nothing
    jsonBody::Union{Nothing, Bool} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    queueName::Union{Nothing, String} = nothing
    subscriptionName::Union{Nothing, String} = nothing
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    topicName::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1AzureServiceBusEventSource(connectionString, filter, fullyQualifiedNamespace, jsonBody, metadata, queueName, subscriptionName, tls, topicName, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusEventSource, Symbol("connectionString"), connectionString)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusEventSource, Symbol("fullyQualifiedNamespace"), fullyQualifiedNamespace)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusEventSource, Symbol("jsonBody"), jsonBody)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusEventSource, Symbol("queueName"), queueName)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusEventSource, Symbol("subscriptionName"), subscriptionName)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusEventSource, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1AzureServiceBusEventSource, Symbol("topicName"), topicName)
        return new(connectionString, filter, fullyQualifiedNamespace, jsonBody, metadata, queueName, subscriptionName, tls, topicName, )
    end
end # type IoArgoprojEventsV1alpha1AzureServiceBusEventSource

const _property_types_IoArgoprojEventsV1alpha1AzureServiceBusEventSource = Dict{Symbol,String}(Symbol("connectionString")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("fullyQualifiedNamespace")=>"String", Symbol("jsonBody")=>"Bool", Symbol("metadata")=>"Dict{String, String}", Symbol("queueName")=>"String", Symbol("subscriptionName")=>"String", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("topicName")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1AzureServiceBusEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1AzureServiceBusEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1AzureServiceBusEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1AzureServiceBusEventSource }, name::Symbol, val)
end
