# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.Parameter
Parameter indicate a passed string parameter to a service template with an optional default value

    IoArgoprojWorkflowV1alpha1Parameter(;
        default=nothing,
        description=nothing,
        enum=nothing,
        globalName=nothing,
        name=nothing,
        value=nothing,
        valueFrom=nothing,
    )

    - default::String : Default is the default value to use for an input parameter if a value was not supplied
    - description::String : Description is the parameter description
    - enum::Vector{String} : Enum holds a list of string values to choose from, for the actual value of the parameter
    - globalName::String : GlobalName exports an output parameter to the global scope, making it available as &#39;{{io.argoproj.workflow.v1alpha1.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters
    - name::String : Name is the parameter name
    - value::String : Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values
    - valueFrom::IoArgoprojWorkflowV1alpha1ValueFrom
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1Parameter <: OpenAPI.APIModel
    default::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    enum::Union{Nothing, Vector{String}} = nothing
    globalName::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    value::Union{Nothing, String} = nothing
    valueFrom = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1ValueFrom }

    function IoArgoprojWorkflowV1alpha1Parameter(default, description, enum, globalName, name, value, valueFrom, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Parameter, Symbol("default"), default)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Parameter, Symbol("description"), description)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Parameter, Symbol("enum"), enum)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Parameter, Symbol("globalName"), globalName)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Parameter, Symbol("name"), name)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Parameter, Symbol("value"), value)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Parameter, Symbol("valueFrom"), valueFrom)
        return new(default, description, enum, globalName, name, value, valueFrom, )
    end
end # type IoArgoprojWorkflowV1alpha1Parameter

const _property_types_IoArgoprojWorkflowV1alpha1Parameter = Dict{Symbol,String}(Symbol("default")=>"String", Symbol("description")=>"String", Symbol("enum")=>"Vector{String}", Symbol("globalName")=>"String", Symbol("name")=>"String", Symbol("value")=>"String", Symbol("valueFrom")=>"IoArgoprojWorkflowV1alpha1ValueFrom", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1Parameter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1Parameter[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1Parameter)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1Parameter }, name::Symbol, val)
end
