# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.KafkaConsumerGroup

    IoArgoprojEventsV1alpha1KafkaConsumerGroup(;
        groupName=nothing,
        oldest=nothing,
        rebalanceStrategy=nothing,
    )

    - groupName::String
    - oldest::Bool
    - rebalanceStrategy::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1KafkaConsumerGroup <: OpenAPI.APIModel
    groupName::Union{Nothing, String} = nothing
    oldest::Union{Nothing, Bool} = nothing
    rebalanceStrategy::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1KafkaConsumerGroup(groupName, oldest, rebalanceStrategy, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaConsumerGroup, Symbol("groupName"), groupName)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaConsumerGroup, Symbol("oldest"), oldest)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1KafkaConsumerGroup, Symbol("rebalanceStrategy"), rebalanceStrategy)
        return new(groupName, oldest, rebalanceStrategy, )
    end
end # type IoArgoprojEventsV1alpha1KafkaConsumerGroup

const _property_types_IoArgoprojEventsV1alpha1KafkaConsumerGroup = Dict{Symbol,String}(Symbol("groupName")=>"String", Symbol("oldest")=>"Bool", Symbol("rebalanceStrategy")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1KafkaConsumerGroup }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1KafkaConsumerGroup[name]))}

function check_required(o::IoArgoprojEventsV1alpha1KafkaConsumerGroup)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1KafkaConsumerGroup }, name::Symbol, val)
end
