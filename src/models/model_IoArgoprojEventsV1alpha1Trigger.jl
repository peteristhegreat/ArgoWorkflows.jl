# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.Trigger

    IoArgoprojEventsV1alpha1Trigger(;
        atLeastOnce=nothing,
        parameters=nothing,
        policy=nothing,
        rateLimit=nothing,
        retryStrategy=nothing,
        template=nothing,
    )

    - atLeastOnce::Bool
    - parameters::Vector{IoArgoprojEventsV1alpha1TriggerParameter}
    - policy::IoArgoprojEventsV1alpha1TriggerPolicy
    - rateLimit::IoArgoprojEventsV1alpha1RateLimit
    - retryStrategy::IoArgoprojEventsV1alpha1Backoff
    - template::IoArgoprojEventsV1alpha1TriggerTemplate
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1Trigger <: OpenAPI.APIModel
    atLeastOnce::Union{Nothing, Bool} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    policy = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TriggerPolicy }
    rateLimit = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1RateLimit }
    retryStrategy = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Backoff }
    template = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TriggerTemplate }

    function IoArgoprojEventsV1alpha1Trigger(atLeastOnce, parameters, policy, rateLimit, retryStrategy, template, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1Trigger, Symbol("atLeastOnce"), atLeastOnce)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1Trigger, Symbol("parameters"), parameters)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1Trigger, Symbol("policy"), policy)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1Trigger, Symbol("rateLimit"), rateLimit)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1Trigger, Symbol("retryStrategy"), retryStrategy)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1Trigger, Symbol("template"), template)
        return new(atLeastOnce, parameters, policy, rateLimit, retryStrategy, template, )
    end
end # type IoArgoprojEventsV1alpha1Trigger

const _property_types_IoArgoprojEventsV1alpha1Trigger = Dict{Symbol,String}(Symbol("atLeastOnce")=>"Bool", Symbol("parameters")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("policy")=>"IoArgoprojEventsV1alpha1TriggerPolicy", Symbol("rateLimit")=>"IoArgoprojEventsV1alpha1RateLimit", Symbol("retryStrategy")=>"IoArgoprojEventsV1alpha1Backoff", Symbol("template")=>"IoArgoprojEventsV1alpha1TriggerTemplate", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1Trigger }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1Trigger[name]))}

function check_required(o::IoArgoprojEventsV1alpha1Trigger)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1Trigger }, name::Symbol, val)
end
