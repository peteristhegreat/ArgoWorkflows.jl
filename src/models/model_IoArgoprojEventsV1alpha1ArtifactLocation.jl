# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.ArtifactLocation

    IoArgoprojEventsV1alpha1ArtifactLocation(;
        configmap=nothing,
        file=nothing,
        git=nothing,
        inline=nothing,
        resource=nothing,
        s3=nothing,
        url=nothing,
    )

    - configmap::IoK8sApiCoreV1ConfigMapKeySelector
    - file::IoArgoprojEventsV1alpha1FileArtifact
    - git::IoArgoprojEventsV1alpha1GitArtifact
    - inline::String
    - resource::IoArgoprojEventsV1alpha1Resource
    - s3::IoArgoprojEventsV1alpha1S3Artifact
    - url::IoArgoprojEventsV1alpha1URLArtifact
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1ArtifactLocation <: OpenAPI.APIModel
    configmap = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ConfigMapKeySelector }
    file = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1FileArtifact }
    git = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1GitArtifact }
    inline::Union{Nothing, String} = nothing
    resource = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Resource }
    s3 = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1S3Artifact }
    url = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1URLArtifact }

    function IoArgoprojEventsV1alpha1ArtifactLocation(configmap, file, git, inline, resource, s3, url, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1ArtifactLocation, Symbol("configmap"), configmap)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1ArtifactLocation, Symbol("file"), file)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1ArtifactLocation, Symbol("git"), git)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1ArtifactLocation, Symbol("inline"), inline)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1ArtifactLocation, Symbol("resource"), resource)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1ArtifactLocation, Symbol("s3"), s3)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1ArtifactLocation, Symbol("url"), url)
        return new(configmap, file, git, inline, resource, s3, url, )
    end
end # type IoArgoprojEventsV1alpha1ArtifactLocation

const _property_types_IoArgoprojEventsV1alpha1ArtifactLocation = Dict{Symbol,String}(Symbol("configmap")=>"IoK8sApiCoreV1ConfigMapKeySelector", Symbol("file")=>"IoArgoprojEventsV1alpha1FileArtifact", Symbol("git")=>"IoArgoprojEventsV1alpha1GitArtifact", Symbol("inline")=>"String", Symbol("resource")=>"IoArgoprojEventsV1alpha1Resource", Symbol("s3")=>"IoArgoprojEventsV1alpha1S3Artifact", Symbol("url")=>"IoArgoprojEventsV1alpha1URLArtifact", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1ArtifactLocation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1ArtifactLocation[name]))}

function check_required(o::IoArgoprojEventsV1alpha1ArtifactLocation)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1ArtifactLocation }, name::Symbol, val)
end
