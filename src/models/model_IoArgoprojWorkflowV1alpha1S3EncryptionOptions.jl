# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.S3EncryptionOptions
S3EncryptionOptions used to determine encryption options during s3 operations

    IoArgoprojWorkflowV1alpha1S3EncryptionOptions(;
        enableEncryption=nothing,
        kmsEncryptionContext=nothing,
        kmsKeyId=nothing,
        serverSideCustomerKeySecret=nothing,
    )

    - enableEncryption::Bool : EnableEncryption tells the driver to encrypt objects if set to true. If kmsKeyId and serverSideCustomerKeySecret are not set, SSE-S3 will be used
    - kmsEncryptionContext::String : KmsEncryptionContext is a json blob that contains an encryption context. See https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context for more information
    - kmsKeyId::String : KMSKeyId tells the driver to encrypt the object using the specified KMS Key.
    - serverSideCustomerKeySecret::IoK8sApiCoreV1SecretKeySelector
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1S3EncryptionOptions <: OpenAPI.APIModel
    enableEncryption::Union{Nothing, Bool} = nothing
    kmsEncryptionContext::Union{Nothing, String} = nothing
    kmsKeyId::Union{Nothing, String} = nothing
    serverSideCustomerKeySecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }

    function IoArgoprojWorkflowV1alpha1S3EncryptionOptions(enableEncryption, kmsEncryptionContext, kmsKeyId, serverSideCustomerKeySecret, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1S3EncryptionOptions, Symbol("enableEncryption"), enableEncryption)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1S3EncryptionOptions, Symbol("kmsEncryptionContext"), kmsEncryptionContext)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1S3EncryptionOptions, Symbol("kmsKeyId"), kmsKeyId)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1S3EncryptionOptions, Symbol("serverSideCustomerKeySecret"), serverSideCustomerKeySecret)
        return new(enableEncryption, kmsEncryptionContext, kmsKeyId, serverSideCustomerKeySecret, )
    end
end # type IoArgoprojWorkflowV1alpha1S3EncryptionOptions

const _property_types_IoArgoprojWorkflowV1alpha1S3EncryptionOptions = Dict{Symbol,String}(Symbol("enableEncryption")=>"Bool", Symbol("kmsEncryptionContext")=>"String", Symbol("kmsKeyId")=>"String", Symbol("serverSideCustomerKeySecret")=>"IoK8sApiCoreV1SecretKeySelector", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1S3EncryptionOptions }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1S3EncryptionOptions[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1S3EncryptionOptions)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1S3EncryptionOptions }, name::Symbol, val)
end
