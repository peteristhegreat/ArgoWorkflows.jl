# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ClusterTrustBundleProjection
ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.

    IoK8sApiCoreV1ClusterTrustBundleProjection(;
        labelSelector=nothing,
        name=nothing,
        optional=nothing,
        path=nothing,
        signerName=nothing,
    )

    - labelSelector::IoK8sApimachineryPkgApisMetaV1LabelSelector
    - name::String : Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.
    - optional::Bool : If true, don&#39;t block pod startup if the referenced ClusterTrustBundle(s) aren&#39;t available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
    - path::String : Relative path from the volume root to write the bundle.
    - signerName::String : Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ClusterTrustBundleProjection <: OpenAPI.APIModel
    labelSelector = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1LabelSelector }
    name::Union{Nothing, String} = nothing
    optional::Union{Nothing, Bool} = nothing
    path::Union{Nothing, String} = nothing
    signerName::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1ClusterTrustBundleProjection(labelSelector, name, optional, path, signerName, )
        OpenAPI.validate_property(IoK8sApiCoreV1ClusterTrustBundleProjection, Symbol("labelSelector"), labelSelector)
        OpenAPI.validate_property(IoK8sApiCoreV1ClusterTrustBundleProjection, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1ClusterTrustBundleProjection, Symbol("optional"), optional)
        OpenAPI.validate_property(IoK8sApiCoreV1ClusterTrustBundleProjection, Symbol("path"), path)
        OpenAPI.validate_property(IoK8sApiCoreV1ClusterTrustBundleProjection, Symbol("signerName"), signerName)
        return new(labelSelector, name, optional, path, signerName, )
    end
end # type IoK8sApiCoreV1ClusterTrustBundleProjection

const _property_types_IoK8sApiCoreV1ClusterTrustBundleProjection = Dict{Symbol,String}(Symbol("labelSelector")=>"IoK8sApimachineryPkgApisMetaV1LabelSelector", Symbol("name")=>"String", Symbol("optional")=>"Bool", Symbol("path")=>"String", Symbol("signerName")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ClusterTrustBundleProjection }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ClusterTrustBundleProjection[name]))}

function check_required(o::IoK8sApiCoreV1ClusterTrustBundleProjection)
    o.path === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ClusterTrustBundleProjection }, name::Symbol, val)
end
