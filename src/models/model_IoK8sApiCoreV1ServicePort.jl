# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ServicePort
ServicePort contains information on service&#39;s port.

    IoK8sApiCoreV1ServicePort(;
        appProtocol=nothing,
        name=nothing,
        nodePort=nothing,
        port=nothing,
        protocol=nothing,
        targetPort=nothing,
    )

    - appProtocol::String : The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:  * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).  * Kubernetes-defined prefixed names:   * &#39;kubernetes.io/h2c&#39; - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-   * &#39;kubernetes.io/ws&#39;  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455   * &#39;kubernetes.io/wss&#39; - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455  * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
    - name::String : The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the &#39;name&#39; field in the EndpointPort. Optional if only one ServicePort is defined on this service.
    - nodePort::Int64 : The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    - port::Int64 : The port that will be exposed by this service.
    - protocol::String : The IP protocol for this port. Supports \&quot;TCP\&quot;, \&quot;UDP\&quot;, and \&quot;SCTP\&quot;. Default is TCP.
    - targetPort::String
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ServicePort <: OpenAPI.APIModel
    appProtocol::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    nodePort::Union{Nothing, Int64} = nothing
    port::Union{Nothing, Int64} = nothing
    protocol::Union{Nothing, String} = nothing
    targetPort::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1ServicePort(appProtocol, name, nodePort, port, protocol, targetPort, )
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("appProtocol"), appProtocol)
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("nodePort"), nodePort)
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("port"), port)
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("protocol"), protocol)
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("targetPort"), targetPort)
        return new(appProtocol, name, nodePort, port, protocol, targetPort, )
    end
end # type IoK8sApiCoreV1ServicePort

const _property_types_IoK8sApiCoreV1ServicePort = Dict{Symbol,String}(Symbol("appProtocol")=>"String", Symbol("name")=>"String", Symbol("nodePort")=>"Int64", Symbol("port")=>"Int64", Symbol("protocol")=>"String", Symbol("targetPort")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ServicePort }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ServicePort[name]))}

function check_required(o::IoK8sApiCoreV1ServicePort)
    o.port === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ServicePort }, name::Symbol, val)
end
