# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.Memoize
Memoization enables caching for the Outputs of the template

    IoArgoprojWorkflowV1alpha1Memoize(;
        cache=nothing,
        key=nothing,
        maxAge=nothing,
    )

    - cache::IoArgoprojWorkflowV1alpha1Cache
    - key::String : Key is the key to use as the caching key
    - maxAge::String : MaxAge is the maximum age (e.g. \&quot;180s\&quot;, \&quot;24h\&quot;) of an entry that is still considered valid. If an entry is older than the MaxAge, it will be ignored.
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1Memoize <: OpenAPI.APIModel
    cache = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1Cache }
    key::Union{Nothing, String} = nothing
    maxAge::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1Memoize(cache, key, maxAge, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Memoize, Symbol("cache"), cache)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Memoize, Symbol("key"), key)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1Memoize, Symbol("maxAge"), maxAge)
        return new(cache, key, maxAge, )
    end
end # type IoArgoprojWorkflowV1alpha1Memoize

const _property_types_IoArgoprojWorkflowV1alpha1Memoize = Dict{Symbol,String}(Symbol("cache")=>"IoArgoprojWorkflowV1alpha1Cache", Symbol("key")=>"String", Symbol("maxAge")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1Memoize }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1Memoize[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1Memoize)
    o.cache === nothing && (return false)
    o.key === nothing && (return false)
    o.maxAge === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1Memoize }, name::Symbol, val)
end
