# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.GithubAppCreds

    IoArgoprojEventsV1alpha1GithubAppCreds(;
        appID=nothing,
        installationID=nothing,
        privateKey=nothing,
    )

    - appID::String
    - installationID::String
    - privateKey::IoK8sApiCoreV1SecretKeySelector
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1GithubAppCreds <: OpenAPI.APIModel
    appID::Union{Nothing, String} = nothing
    installationID::Union{Nothing, String} = nothing
    privateKey = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }

    function IoArgoprojEventsV1alpha1GithubAppCreds(appID, installationID, privateKey, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubAppCreds, Symbol("appID"), appID)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubAppCreds, Symbol("installationID"), installationID)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1GithubAppCreds, Symbol("privateKey"), privateKey)
        return new(appID, installationID, privateKey, )
    end
end # type IoArgoprojEventsV1alpha1GithubAppCreds

const _property_types_IoArgoprojEventsV1alpha1GithubAppCreds = Dict{Symbol,String}(Symbol("appID")=>"String", Symbol("installationID")=>"String", Symbol("privateKey")=>"IoK8sApiCoreV1SecretKeySelector", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1GithubAppCreds }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1GithubAppCreds[name]))}

function check_required(o::IoArgoprojEventsV1alpha1GithubAppCreds)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1GithubAppCreds }, name::Symbol, val)
end
