# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.EmailTrigger
EmailTrigger refers to the specification of the email notification trigger.

    IoArgoprojEventsV1alpha1EmailTrigger(;
        body=nothing,
        from=nothing,
        host=nothing,
        parameters=nothing,
        port=nothing,
        smtpPassword=nothing,
        subject=nothing,
        to=nothing,
        username=nothing,
    )

    - body::String
    - from::String
    - host::String : Host refers to the smtp host url to which email is send.
    - parameters::Vector{IoArgoprojEventsV1alpha1TriggerParameter}
    - port::Int64
    - smtpPassword::IoK8sApiCoreV1SecretKeySelector
    - subject::String
    - to::Vector{String}
    - username::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1EmailTrigger <: OpenAPI.APIModel
    body::Union{Nothing, String} = nothing
    from::Union{Nothing, String} = nothing
    host::Union{Nothing, String} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    port::Union{Nothing, Int64} = nothing
    smtpPassword = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    subject::Union{Nothing, String} = nothing
    to::Union{Nothing, Vector{String}} = nothing
    username::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1EmailTrigger(body, from, host, parameters, port, smtpPassword, subject, to, username, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmailTrigger, Symbol("body"), body)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmailTrigger, Symbol("from"), from)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmailTrigger, Symbol("host"), host)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmailTrigger, Symbol("parameters"), parameters)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmailTrigger, Symbol("port"), port)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmailTrigger, Symbol("smtpPassword"), smtpPassword)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmailTrigger, Symbol("subject"), subject)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmailTrigger, Symbol("to"), to)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1EmailTrigger, Symbol("username"), username)
        return new(body, from, host, parameters, port, smtpPassword, subject, to, username, )
    end
end # type IoArgoprojEventsV1alpha1EmailTrigger

const _property_types_IoArgoprojEventsV1alpha1EmailTrigger = Dict{Symbol,String}(Symbol("body")=>"String", Symbol("from")=>"String", Symbol("host")=>"String", Symbol("parameters")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("port")=>"Int64", Symbol("smtpPassword")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("subject")=>"String", Symbol("to")=>"Vector{String}", Symbol("username")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1EmailTrigger }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1EmailTrigger[name]))}

function check_required(o::IoArgoprojEventsV1alpha1EmailTrigger)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1EmailTrigger }, name::Symbol, val)
end
