# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.HTTPArtifact
HTTPArtifact allows a file served on HTTP to be placed as an input artifact in a container

    IoArgoprojWorkflowV1alpha1HTTPArtifact(;
        auth=nothing,
        headers=nothing,
        url=nothing,
    )

    - auth::IoArgoprojWorkflowV1alpha1HTTPAuth
    - headers::Vector{IoArgoprojWorkflowV1alpha1Header} : Headers are an optional list of headers to send with HTTP requests for artifacts
    - url::String : URL of the artifact
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1HTTPArtifact <: OpenAPI.APIModel
    auth = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1HTTPAuth }
    headers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojWorkflowV1alpha1Header} }
    url::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1HTTPArtifact(auth, headers, url, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1HTTPArtifact, Symbol("auth"), auth)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1HTTPArtifact, Symbol("headers"), headers)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1HTTPArtifact, Symbol("url"), url)
        return new(auth, headers, url, )
    end
end # type IoArgoprojWorkflowV1alpha1HTTPArtifact

const _property_types_IoArgoprojWorkflowV1alpha1HTTPArtifact = Dict{Symbol,String}(Symbol("auth")=>"IoArgoprojWorkflowV1alpha1HTTPAuth", Symbol("headers")=>"Vector{IoArgoprojWorkflowV1alpha1Header}", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1HTTPArtifact }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1HTTPArtifact[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1HTTPArtifact)
    o.url === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1HTTPArtifact }, name::Symbol, val)
end
