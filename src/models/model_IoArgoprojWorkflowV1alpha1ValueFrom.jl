# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.ValueFrom
ValueFrom describes a location in which to obtain the value to a parameter

    IoArgoprojWorkflowV1alpha1ValueFrom(;
        configMapKeyRef=nothing,
        default=nothing,
        event=nothing,
        expression=nothing,
        jqFilter=nothing,
        jsonPath=nothing,
        parameter=nothing,
        path=nothing,
        supplied=nothing,
    )

    - configMapKeyRef::IoK8sApiCoreV1ConfigMapKeySelector
    - default::String : Default specifies a value to be used if retrieving the value from the specified source fails
    - event::String : Selector (https://github.com/expr-lang/expr) that is evaluated against the event to get the value of the parameter. E.g. &#x60;payload.message&#x60;
    - expression::String : Expression, if defined, is evaluated to specify the value for the parameter
    - jqFilter::String : JQFilter expression against the resource object in resource templates
    - jsonPath::String : JSONPath of a resource to retrieve an output parameter value from in resource templates
    - parameter::String : Parameter reference to a step or dag task in which to retrieve an output parameter value from (e.g. &#39;{{steps.mystep.outputs.myparam}}&#39;)
    - path::String : Path in the container to retrieve an output parameter value from in container templates
    - supplied::Any : SuppliedValueFrom is a placeholder for a value to be filled in directly, either through the CLI, API, etc.
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1ValueFrom <: OpenAPI.APIModel
    configMapKeyRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ConfigMapKeySelector }
    default::Union{Nothing, String} = nothing
    event::Union{Nothing, String} = nothing
    expression::Union{Nothing, String} = nothing
    jqFilter::Union{Nothing, String} = nothing
    jsonPath::Union{Nothing, String} = nothing
    parameter::Union{Nothing, String} = nothing
    path::Union{Nothing, String} = nothing
    supplied::Union{Nothing, Any} = nothing

    function IoArgoprojWorkflowV1alpha1ValueFrom(configMapKeyRef, default, event, expression, jqFilter, jsonPath, parameter, path, supplied, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ValueFrom, Symbol("configMapKeyRef"), configMapKeyRef)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ValueFrom, Symbol("default"), default)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ValueFrom, Symbol("event"), event)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ValueFrom, Symbol("expression"), expression)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ValueFrom, Symbol("jqFilter"), jqFilter)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ValueFrom, Symbol("jsonPath"), jsonPath)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ValueFrom, Symbol("parameter"), parameter)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ValueFrom, Symbol("path"), path)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1ValueFrom, Symbol("supplied"), supplied)
        return new(configMapKeyRef, default, event, expression, jqFilter, jsonPath, parameter, path, supplied, )
    end
end # type IoArgoprojWorkflowV1alpha1ValueFrom

const _property_types_IoArgoprojWorkflowV1alpha1ValueFrom = Dict{Symbol,String}(Symbol("configMapKeyRef")=>"IoK8sApiCoreV1ConfigMapKeySelector", Symbol("default")=>"String", Symbol("event")=>"String", Symbol("expression")=>"String", Symbol("jqFilter")=>"String", Symbol("jsonPath")=>"String", Symbol("parameter")=>"String", Symbol("path")=>"String", Symbol("supplied")=>"Any", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1ValueFrom }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1ValueFrom[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1ValueFrom)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1ValueFrom }, name::Symbol, val)
end
