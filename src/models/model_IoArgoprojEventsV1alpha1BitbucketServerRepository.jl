# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.BitbucketServerRepository

    IoArgoprojEventsV1alpha1BitbucketServerRepository(;
        projectKey=nothing,
        repositorySlug=nothing,
    )

    - projectKey::String
    - repositorySlug::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1BitbucketServerRepository <: OpenAPI.APIModel
    projectKey::Union{Nothing, String} = nothing
    repositorySlug::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1BitbucketServerRepository(projectKey, repositorySlug, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketServerRepository, Symbol("projectKey"), projectKey)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1BitbucketServerRepository, Symbol("repositorySlug"), repositorySlug)
        return new(projectKey, repositorySlug, )
    end
end # type IoArgoprojEventsV1alpha1BitbucketServerRepository

const _property_types_IoArgoprojEventsV1alpha1BitbucketServerRepository = Dict{Symbol,String}(Symbol("projectKey")=>"String", Symbol("repositorySlug")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1BitbucketServerRepository }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1BitbucketServerRepository[name]))}

function check_required(o::IoArgoprojEventsV1alpha1BitbucketServerRepository)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1BitbucketServerRepository }, name::Symbol, val)
end
