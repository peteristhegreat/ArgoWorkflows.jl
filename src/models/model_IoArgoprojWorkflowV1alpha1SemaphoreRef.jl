# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.SemaphoreRef
SemaphoreRef is a reference of Semaphore

    IoArgoprojWorkflowV1alpha1SemaphoreRef(;
        configMapKeyRef=nothing,
        namespace=nothing,
    )

    - configMapKeyRef::IoK8sApiCoreV1ConfigMapKeySelector
    - namespace::String : Namespace is the namespace of the configmap, default: [namespace of workflow]
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1SemaphoreRef <: OpenAPI.APIModel
    configMapKeyRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ConfigMapKeySelector }
    namespace::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1SemaphoreRef(configMapKeyRef, namespace, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1SemaphoreRef, Symbol("configMapKeyRef"), configMapKeyRef)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1SemaphoreRef, Symbol("namespace"), namespace)
        return new(configMapKeyRef, namespace, )
    end
end # type IoArgoprojWorkflowV1alpha1SemaphoreRef

const _property_types_IoArgoprojWorkflowV1alpha1SemaphoreRef = Dict{Symbol,String}(Symbol("configMapKeyRef")=>"IoK8sApiCoreV1ConfigMapKeySelector", Symbol("namespace")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1SemaphoreRef }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1SemaphoreRef[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1SemaphoreRef)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1SemaphoreRef }, name::Symbol, val)
end
