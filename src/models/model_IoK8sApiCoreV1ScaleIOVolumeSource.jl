# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ScaleIOVolumeSource
ScaleIOVolumeSource represents a persistent ScaleIO volume

    IoK8sApiCoreV1ScaleIOVolumeSource(;
        fsType=nothing,
        gateway=nothing,
        protectionDomain=nothing,
        readOnly=nothing,
        secretRef=nothing,
        sslEnabled=nothing,
        storageMode=nothing,
        storagePool=nothing,
        system=nothing,
        volumeName=nothing,
    )

    - fsType::String : fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Default is \&quot;xfs\&quot;.
    - gateway::String : gateway is the host address of the ScaleIO API Gateway.
    - protectionDomain::String : protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
    - readOnly::Bool : readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    - secretRef::IoK8sApiCoreV1LocalObjectReference
    - sslEnabled::Bool : sslEnabled Flag enable/disable SSL communication with Gateway, default false
    - storageMode::String : storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
    - storagePool::String : storagePool is the ScaleIO Storage Pool associated with the protection domain.
    - system::String : system is the name of the storage system as configured in ScaleIO.
    - volumeName::String : volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ScaleIOVolumeSource <: OpenAPI.APIModel
    fsType::Union{Nothing, String} = nothing
    gateway::Union{Nothing, String} = nothing
    protectionDomain::Union{Nothing, String} = nothing
    readOnly::Union{Nothing, Bool} = nothing
    secretRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1LocalObjectReference }
    sslEnabled::Union{Nothing, Bool} = nothing
    storageMode::Union{Nothing, String} = nothing
    storagePool::Union{Nothing, String} = nothing
    system::Union{Nothing, String} = nothing
    volumeName::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1ScaleIOVolumeSource(fsType, gateway, protectionDomain, readOnly, secretRef, sslEnabled, storageMode, storagePool, system, volumeName, )
        OpenAPI.validate_property(IoK8sApiCoreV1ScaleIOVolumeSource, Symbol("fsType"), fsType)
        OpenAPI.validate_property(IoK8sApiCoreV1ScaleIOVolumeSource, Symbol("gateway"), gateway)
        OpenAPI.validate_property(IoK8sApiCoreV1ScaleIOVolumeSource, Symbol("protectionDomain"), protectionDomain)
        OpenAPI.validate_property(IoK8sApiCoreV1ScaleIOVolumeSource, Symbol("readOnly"), readOnly)
        OpenAPI.validate_property(IoK8sApiCoreV1ScaleIOVolumeSource, Symbol("secretRef"), secretRef)
        OpenAPI.validate_property(IoK8sApiCoreV1ScaleIOVolumeSource, Symbol("sslEnabled"), sslEnabled)
        OpenAPI.validate_property(IoK8sApiCoreV1ScaleIOVolumeSource, Symbol("storageMode"), storageMode)
        OpenAPI.validate_property(IoK8sApiCoreV1ScaleIOVolumeSource, Symbol("storagePool"), storagePool)
        OpenAPI.validate_property(IoK8sApiCoreV1ScaleIOVolumeSource, Symbol("system"), system)
        OpenAPI.validate_property(IoK8sApiCoreV1ScaleIOVolumeSource, Symbol("volumeName"), volumeName)
        return new(fsType, gateway, protectionDomain, readOnly, secretRef, sslEnabled, storageMode, storagePool, system, volumeName, )
    end
end # type IoK8sApiCoreV1ScaleIOVolumeSource

const _property_types_IoK8sApiCoreV1ScaleIOVolumeSource = Dict{Symbol,String}(Symbol("fsType")=>"String", Symbol("gateway")=>"String", Symbol("protectionDomain")=>"String", Symbol("readOnly")=>"Bool", Symbol("secretRef")=>"IoK8sApiCoreV1LocalObjectReference", Symbol("sslEnabled")=>"Bool", Symbol("storageMode")=>"String", Symbol("storagePool")=>"String", Symbol("system")=>"String", Symbol("volumeName")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ScaleIOVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ScaleIOVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1ScaleIOVolumeSource)
    o.gateway === nothing && (return false)
    o.secretRef === nothing && (return false)
    o.system === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ScaleIOVolumeSource }, name::Symbol, val)
end
