# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.HTTPTrigger

    IoArgoprojEventsV1alpha1HTTPTrigger(;
        basicAuth=nothing,
        headers=nothing,
        method=nothing,
        parameters=nothing,
        payload=nothing,
        secureHeaders=nothing,
        timeout=nothing,
        tls=nothing,
        url=nothing,
    )

    - basicAuth::IoArgoprojEventsV1alpha1BasicAuth
    - headers::Dict{String, String}
    - method::String
    - parameters::Vector{IoArgoprojEventsV1alpha1TriggerParameter} : Parameters is the list of key-value extracted from event&#39;s payload that are applied to the HTTP trigger resource.
    - payload::Vector{IoArgoprojEventsV1alpha1TriggerParameter}
    - secureHeaders::Vector{IoArgoprojEventsV1alpha1SecureHeader}
    - timeout::String
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - url::String : URL refers to the URL to send HTTP request to.
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1HTTPTrigger <: OpenAPI.APIModel
    basicAuth = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1BasicAuth }
    headers::Union{Nothing, Dict{String, String}} = nothing
    method::Union{Nothing, String} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    payload::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1TriggerParameter} }
    secureHeaders::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoArgoprojEventsV1alpha1SecureHeader} }
    timeout::Union{Nothing, String} = nothing
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    url::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1HTTPTrigger(basicAuth, headers, method, parameters, payload, secureHeaders, timeout, tls, url, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1HTTPTrigger, Symbol("basicAuth"), basicAuth)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1HTTPTrigger, Symbol("headers"), headers)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1HTTPTrigger, Symbol("method"), method)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1HTTPTrigger, Symbol("parameters"), parameters)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1HTTPTrigger, Symbol("payload"), payload)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1HTTPTrigger, Symbol("secureHeaders"), secureHeaders)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1HTTPTrigger, Symbol("timeout"), timeout)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1HTTPTrigger, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1HTTPTrigger, Symbol("url"), url)
        return new(basicAuth, headers, method, parameters, payload, secureHeaders, timeout, tls, url, )
    end
end # type IoArgoprojEventsV1alpha1HTTPTrigger

const _property_types_IoArgoprojEventsV1alpha1HTTPTrigger = Dict{Symbol,String}(Symbol("basicAuth")=>"IoArgoprojEventsV1alpha1BasicAuth", Symbol("headers")=>"Dict{String, String}", Symbol("method")=>"String", Symbol("parameters")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("payload")=>"Vector{IoArgoprojEventsV1alpha1TriggerParameter}", Symbol("secureHeaders")=>"Vector{IoArgoprojEventsV1alpha1SecureHeader}", Symbol("timeout")=>"String", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1HTTPTrigger }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1HTTPTrigger[name]))}

function check_required(o::IoArgoprojEventsV1alpha1HTTPTrigger)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1HTTPTrigger }, name::Symbol, val)
end
