# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.WorkflowStep
WorkflowStep is a reference to a template to execute in a series of step

    IoArgoprojWorkflowV1alpha1WorkflowStep(;
        arguments=nothing,
        continueOn=nothing,
        hooks=nothing,
        inline=nothing,
        name=nothing,
        onExit=nothing,
        template=nothing,
        templateRef=nothing,
        when=nothing,
        withItems=nothing,
        withParam=nothing,
        withSequence=nothing,
    )

    - arguments::IoArgoprojWorkflowV1alpha1Arguments
    - continueOn::IoArgoprojWorkflowV1alpha1ContinueOn
    - hooks::Dict{String, IoArgoprojWorkflowV1alpha1LifecycleHook} : Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step
    - inline::IoArgoprojWorkflowV1alpha1Template
    - name::String : Name of the step
    - onExit::String : OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead.
    - template::String : Template is the name of the template to execute as the step
    - templateRef::IoArgoprojWorkflowV1alpha1TemplateRef
    - when::String : When is an expression in which the step should conditionally execute
    - withItems::Vector{Any} : WithItems expands a step into multiple parallel steps from the items in the list
    - withParam::String : WithParam expands a step into multiple parallel steps from the value in the parameter, which is expected to be a JSON list.
    - withSequence::IoArgoprojWorkflowV1alpha1Sequence
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1WorkflowStep <: OpenAPI.APIModel
    arguments = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1Arguments }
    continueOn = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1ContinueOn }
    hooks::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, IoArgoprojWorkflowV1alpha1LifecycleHook} }
    inline = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1Template }
    name::Union{Nothing, String} = nothing
    onExit::Union{Nothing, String} = nothing
    template::Union{Nothing, String} = nothing
    templateRef = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1TemplateRef }
    when::Union{Nothing, String} = nothing
    withItems::Union{Nothing, Vector{Any}} = nothing
    withParam::Union{Nothing, String} = nothing
    withSequence = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1Sequence }

    function IoArgoprojWorkflowV1alpha1WorkflowStep(arguments, continueOn, hooks, inline, name, onExit, template, templateRef, when, withItems, withParam, withSequence, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("arguments"), arguments)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("continueOn"), continueOn)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("hooks"), hooks)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("inline"), inline)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("name"), name)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("onExit"), onExit)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("template"), template)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("templateRef"), templateRef)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("when"), when)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("withItems"), withItems)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("withParam"), withParam)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1WorkflowStep, Symbol("withSequence"), withSequence)
        return new(arguments, continueOn, hooks, inline, name, onExit, template, templateRef, when, withItems, withParam, withSequence, )
    end
end # type IoArgoprojWorkflowV1alpha1WorkflowStep

const _property_types_IoArgoprojWorkflowV1alpha1WorkflowStep = Dict{Symbol,String}(Symbol("arguments")=>"IoArgoprojWorkflowV1alpha1Arguments", Symbol("continueOn")=>"IoArgoprojWorkflowV1alpha1ContinueOn", Symbol("hooks")=>"Dict{String, IoArgoprojWorkflowV1alpha1LifecycleHook}", Symbol("inline")=>"IoArgoprojWorkflowV1alpha1Template", Symbol("name")=>"String", Symbol("onExit")=>"String", Symbol("template")=>"String", Symbol("templateRef")=>"IoArgoprojWorkflowV1alpha1TemplateRef", Symbol("when")=>"String", Symbol("withItems")=>"Vector{Any}", Symbol("withParam")=>"String", Symbol("withSequence")=>"IoArgoprojWorkflowV1alpha1Sequence", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1WorkflowStep }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1WorkflowStep[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1WorkflowStep)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1WorkflowStep }, name::Symbol, val)
end
