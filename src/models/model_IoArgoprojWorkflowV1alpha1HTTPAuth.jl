# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.HTTPAuth

    IoArgoprojWorkflowV1alpha1HTTPAuth(;
        basicAuth=nothing,
        clientCert=nothing,
        oauth2=nothing,
    )

    - basicAuth::IoArgoprojWorkflowV1alpha1BasicAuth
    - clientCert::IoArgoprojWorkflowV1alpha1ClientCertAuth
    - oauth2::IoArgoprojWorkflowV1alpha1OAuth2Auth
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1HTTPAuth <: OpenAPI.APIModel
    basicAuth = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1BasicAuth }
    clientCert = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1ClientCertAuth }
    oauth2 = nothing # spec type: Union{ Nothing, IoArgoprojWorkflowV1alpha1OAuth2Auth }

    function IoArgoprojWorkflowV1alpha1HTTPAuth(basicAuth, clientCert, oauth2, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1HTTPAuth, Symbol("basicAuth"), basicAuth)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1HTTPAuth, Symbol("clientCert"), clientCert)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1HTTPAuth, Symbol("oauth2"), oauth2)
        return new(basicAuth, clientCert, oauth2, )
    end
end # type IoArgoprojWorkflowV1alpha1HTTPAuth

const _property_types_IoArgoprojWorkflowV1alpha1HTTPAuth = Dict{Symbol,String}(Symbol("basicAuth")=>"IoArgoprojWorkflowV1alpha1BasicAuth", Symbol("clientCert")=>"IoArgoprojWorkflowV1alpha1ClientCertAuth", Symbol("oauth2")=>"IoArgoprojWorkflowV1alpha1OAuth2Auth", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1HTTPAuth }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1HTTPAuth[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1HTTPAuth)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1HTTPAuth }, name::Symbol, val)
end
