# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.WebhookContext

    IoArgoprojEventsV1alpha1WebhookContext(;
        authSecret=nothing,
        endpoint=nothing,
        maxPayloadSize=nothing,
        metadata=nothing,
        method=nothing,
        port=nothing,
        serverCertSecret=nothing,
        serverKeySecret=nothing,
        url=nothing,
    )

    - authSecret::IoK8sApiCoreV1SecretKeySelector
    - endpoint::String
    - maxPayloadSize::String
    - metadata::Dict{String, String}
    - method::String
    - port::String : Port on which HTTP server is listening for incoming events.
    - serverCertSecret::IoK8sApiCoreV1SecretKeySelector
    - serverKeySecret::IoK8sApiCoreV1SecretKeySelector
    - url::String : URL is the url of the server.
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1WebhookContext <: OpenAPI.APIModel
    authSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    endpoint::Union{Nothing, String} = nothing
    maxPayloadSize::Union{Nothing, String} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    method::Union{Nothing, String} = nothing
    port::Union{Nothing, String} = nothing
    serverCertSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    serverKeySecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    url::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1WebhookContext(authSecret, endpoint, maxPayloadSize, metadata, method, port, serverCertSecret, serverKeySecret, url, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1WebhookContext, Symbol("authSecret"), authSecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1WebhookContext, Symbol("endpoint"), endpoint)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1WebhookContext, Symbol("maxPayloadSize"), maxPayloadSize)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1WebhookContext, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1WebhookContext, Symbol("method"), method)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1WebhookContext, Symbol("port"), port)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1WebhookContext, Symbol("serverCertSecret"), serverCertSecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1WebhookContext, Symbol("serverKeySecret"), serverKeySecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1WebhookContext, Symbol("url"), url)
        return new(authSecret, endpoint, maxPayloadSize, metadata, method, port, serverCertSecret, serverKeySecret, url, )
    end
end # type IoArgoprojEventsV1alpha1WebhookContext

const _property_types_IoArgoprojEventsV1alpha1WebhookContext = Dict{Symbol,String}(Symbol("authSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("endpoint")=>"String", Symbol("maxPayloadSize")=>"String", Symbol("metadata")=>"Dict{String, String}", Symbol("method")=>"String", Symbol("port")=>"String", Symbol("serverCertSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("serverKeySecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1WebhookContext }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1WebhookContext[name]))}

function check_required(o::IoArgoprojEventsV1alpha1WebhookContext)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1WebhookContext }, name::Symbol, val)
end
