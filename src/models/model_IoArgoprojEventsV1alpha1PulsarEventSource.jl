# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.PulsarEventSource

    IoArgoprojEventsV1alpha1PulsarEventSource(;
        authAthenzParams=nothing,
        authAthenzSecret=nothing,
        authTokenSecret=nothing,
        connectionBackoff=nothing,
        filter=nothing,
        jsonBody=nothing,
        metadata=nothing,
        tls=nothing,
        tlsAllowInsecureConnection=nothing,
        tlsTrustCertsSecret=nothing,
        tlsValidateHostname=nothing,
        topics=nothing,
        type=nothing,
        url=nothing,
    )

    - authAthenzParams::Dict{String, String}
    - authAthenzSecret::IoK8sApiCoreV1SecretKeySelector
    - authTokenSecret::IoK8sApiCoreV1SecretKeySelector
    - connectionBackoff::IoArgoprojEventsV1alpha1Backoff
    - filter::IoArgoprojEventsV1alpha1EventSourceFilter
    - jsonBody::Bool
    - metadata::Dict{String, String}
    - tls::IoArgoprojEventsV1alpha1TLSConfig
    - tlsAllowInsecureConnection::Bool
    - tlsTrustCertsSecret::IoK8sApiCoreV1SecretKeySelector
    - tlsValidateHostname::Bool
    - topics::Vector{String}
    - type::String
    - url::String
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1PulsarEventSource <: OpenAPI.APIModel
    authAthenzParams::Union{Nothing, Dict{String, String}} = nothing
    authAthenzSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    authTokenSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    connectionBackoff = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1Backoff }
    filter = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1EventSourceFilter }
    jsonBody::Union{Nothing, Bool} = nothing
    metadata::Union{Nothing, Dict{String, String}} = nothing
    tls = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1TLSConfig }
    tlsAllowInsecureConnection::Union{Nothing, Bool} = nothing
    tlsTrustCertsSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    tlsValidateHostname::Union{Nothing, Bool} = nothing
    topics::Union{Nothing, Vector{String}} = nothing
    type::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1PulsarEventSource(authAthenzParams, authAthenzSecret, authTokenSecret, connectionBackoff, filter, jsonBody, metadata, tls, tlsAllowInsecureConnection, tlsTrustCertsSecret, tlsValidateHostname, topics, type, url, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("authAthenzParams"), authAthenzParams)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("authAthenzSecret"), authAthenzSecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("authTokenSecret"), authTokenSecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("connectionBackoff"), connectionBackoff)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("filter"), filter)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("jsonBody"), jsonBody)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("tls"), tls)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("tlsAllowInsecureConnection"), tlsAllowInsecureConnection)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("tlsTrustCertsSecret"), tlsTrustCertsSecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("tlsValidateHostname"), tlsValidateHostname)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("topics"), topics)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("type"), type)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1PulsarEventSource, Symbol("url"), url)
        return new(authAthenzParams, authAthenzSecret, authTokenSecret, connectionBackoff, filter, jsonBody, metadata, tls, tlsAllowInsecureConnection, tlsTrustCertsSecret, tlsValidateHostname, topics, type, url, )
    end
end # type IoArgoprojEventsV1alpha1PulsarEventSource

const _property_types_IoArgoprojEventsV1alpha1PulsarEventSource = Dict{Symbol,String}(Symbol("authAthenzParams")=>"Dict{String, String}", Symbol("authAthenzSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("authTokenSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("connectionBackoff")=>"IoArgoprojEventsV1alpha1Backoff", Symbol("filter")=>"IoArgoprojEventsV1alpha1EventSourceFilter", Symbol("jsonBody")=>"Bool", Symbol("metadata")=>"Dict{String, String}", Symbol("tls")=>"IoArgoprojEventsV1alpha1TLSConfig", Symbol("tlsAllowInsecureConnection")=>"Bool", Symbol("tlsTrustCertsSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("tlsValidateHostname")=>"Bool", Symbol("topics")=>"Vector{String}", Symbol("type")=>"String", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1PulsarEventSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1PulsarEventSource[name]))}

function check_required(o::IoArgoprojEventsV1alpha1PulsarEventSource)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1PulsarEventSource }, name::Symbol, val)
end
