# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.SchemaRegistryConfig

    IoArgoprojEventsV1alpha1SchemaRegistryConfig(;
        auth=nothing,
        schemaId=nothing,
        url=nothing,
    )

    - auth::IoArgoprojEventsV1alpha1BasicAuth
    - schemaId::Int64
    - url::String : Schema Registry URL.
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1SchemaRegistryConfig <: OpenAPI.APIModel
    auth = nothing # spec type: Union{ Nothing, IoArgoprojEventsV1alpha1BasicAuth }
    schemaId::Union{Nothing, Int64} = nothing
    url::Union{Nothing, String} = nothing

    function IoArgoprojEventsV1alpha1SchemaRegistryConfig(auth, schemaId, url, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SchemaRegistryConfig, Symbol("auth"), auth)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SchemaRegistryConfig, Symbol("schemaId"), schemaId)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1SchemaRegistryConfig, Symbol("url"), url)
        return new(auth, schemaId, url, )
    end
end # type IoArgoprojEventsV1alpha1SchemaRegistryConfig

const _property_types_IoArgoprojEventsV1alpha1SchemaRegistryConfig = Dict{Symbol,String}(Symbol("auth")=>"IoArgoprojEventsV1alpha1BasicAuth", Symbol("schemaId")=>"Int64", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1SchemaRegistryConfig }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1SchemaRegistryConfig[name]))}

function check_required(o::IoArgoprojEventsV1alpha1SchemaRegistryConfig)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1SchemaRegistryConfig }, name::Symbol, val)
end
