# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.events.v1alpha1.TLSConfig
TLSConfig refers to TLS configuration for a client.

    IoArgoprojEventsV1alpha1TLSConfig(;
        caCertSecret=nothing,
        clientCertSecret=nothing,
        clientKeySecret=nothing,
        insecureSkipVerify=nothing,
    )

    - caCertSecret::IoK8sApiCoreV1SecretKeySelector
    - clientCertSecret::IoK8sApiCoreV1SecretKeySelector
    - clientKeySecret::IoK8sApiCoreV1SecretKeySelector
    - insecureSkipVerify::Bool
"""
Base.@kwdef mutable struct IoArgoprojEventsV1alpha1TLSConfig <: OpenAPI.APIModel
    caCertSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    clientCertSecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    clientKeySecret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector }
    insecureSkipVerify::Union{Nothing, Bool} = nothing

    function IoArgoprojEventsV1alpha1TLSConfig(caCertSecret, clientCertSecret, clientKeySecret, insecureSkipVerify, )
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TLSConfig, Symbol("caCertSecret"), caCertSecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TLSConfig, Symbol("clientCertSecret"), clientCertSecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TLSConfig, Symbol("clientKeySecret"), clientKeySecret)
        OpenAPI.validate_property(IoArgoprojEventsV1alpha1TLSConfig, Symbol("insecureSkipVerify"), insecureSkipVerify)
        return new(caCertSecret, clientCertSecret, clientKeySecret, insecureSkipVerify, )
    end
end # type IoArgoprojEventsV1alpha1TLSConfig

const _property_types_IoArgoprojEventsV1alpha1TLSConfig = Dict{Symbol,String}(Symbol("caCertSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("clientCertSecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("clientKeySecret")=>"IoK8sApiCoreV1SecretKeySelector", Symbol("insecureSkipVerify")=>"Bool", )
OpenAPI.property_type(::Type{ IoArgoprojEventsV1alpha1TLSConfig }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojEventsV1alpha1TLSConfig[name]))}

function check_required(o::IoArgoprojEventsV1alpha1TLSConfig)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojEventsV1alpha1TLSConfig }, name::Symbol, val)
end
