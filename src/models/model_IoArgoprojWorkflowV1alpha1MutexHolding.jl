# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.argoproj.workflow.v1alpha1.MutexHolding
MutexHolding describes the mutex and the object which is holding it.

    IoArgoprojWorkflowV1alpha1MutexHolding(;
        holder=nothing,
        mutex=nothing,
    )

    - holder::String : Holder is a reference to the object which holds the Mutex. Holding Scenario:   1. Current workflow&#39;s NodeID which is holding the lock.      e.g: ${NodeID} Waiting Scenario:   1. Current workflow or other workflow NodeID which is holding the lock.      e.g: ${WorkflowName}/${NodeID}
    - mutex::String : Reference for the mutex e.g: ${namespace}/mutex/${mutexName}
"""
Base.@kwdef mutable struct IoArgoprojWorkflowV1alpha1MutexHolding <: OpenAPI.APIModel
    holder::Union{Nothing, String} = nothing
    mutex::Union{Nothing, String} = nothing

    function IoArgoprojWorkflowV1alpha1MutexHolding(holder, mutex, )
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1MutexHolding, Symbol("holder"), holder)
        OpenAPI.validate_property(IoArgoprojWorkflowV1alpha1MutexHolding, Symbol("mutex"), mutex)
        return new(holder, mutex, )
    end
end # type IoArgoprojWorkflowV1alpha1MutexHolding

const _property_types_IoArgoprojWorkflowV1alpha1MutexHolding = Dict{Symbol,String}(Symbol("holder")=>"String", Symbol("mutex")=>"String", )
OpenAPI.property_type(::Type{ IoArgoprojWorkflowV1alpha1MutexHolding }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoArgoprojWorkflowV1alpha1MutexHolding[name]))}

function check_required(o::IoArgoprojWorkflowV1alpha1MutexHolding)
    true
end

function OpenAPI.validate_property(::Type{ IoArgoprojWorkflowV1alpha1MutexHolding }, name::Symbol, val)
end
