# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct CronWorkflowServiceApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `CronWorkflowServiceApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ CronWorkflowServiceApi }) = "http://localhost:2746"

const _returntypes_cron_workflow_service_create_cron_workflow_CronWorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1CronWorkflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_cron_workflow_service_create_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, body::IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_cron_workflow_service_create_cron_workflow_CronWorkflowServiceApi, "/api/v1/cron-workflows/{namespace}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- body::IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest (required)

Return: IoArgoprojWorkflowV1alpha1CronWorkflow, OpenAPI.Clients.ApiResponse
"""
function cron_workflow_service_create_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, body::IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest; _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_create_cron_workflow(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cron_workflow_service_create_cron_workflow(_api::CronWorkflowServiceApi, response_stream::Channel, namespace::String, body::IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest; _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_create_cron_workflow(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cron_workflow_service_delete_cron_workflow_CronWorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_cron_workflow_service_delete_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, name::String; delete_options_grace_period_seconds=nothing, delete_options_preconditions_uid=nothing, delete_options_preconditions_resource_version=nothing, delete_options_orphan_dependents=nothing, delete_options_propagation_policy=nothing, delete_options_dry_run=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_cron_workflow_service_delete_cron_workflow_CronWorkflowServiceApi, "/api/v1/cron-workflows/{namespace}/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.gracePeriodSeconds", delete_options_grace_period_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.preconditions.uid", delete_options_preconditions_uid; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.preconditions.resourceVersion", delete_options_preconditions_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.orphanDependents", delete_options_orphan_dependents; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.propagationPolicy", delete_options_propagation_policy; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.dryRun", delete_options_dry_run; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- delete_options_grace_period_seconds::String
- delete_options_preconditions_uid::String
- delete_options_preconditions_resource_version::String
- delete_options_orphan_dependents::Bool
- delete_options_propagation_policy::String
- delete_options_dry_run::Vector{String}

Return: Any, OpenAPI.Clients.ApiResponse
"""
function cron_workflow_service_delete_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, name::String; delete_options_grace_period_seconds=nothing, delete_options_preconditions_uid=nothing, delete_options_preconditions_resource_version=nothing, delete_options_orphan_dependents=nothing, delete_options_propagation_policy=nothing, delete_options_dry_run=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_delete_cron_workflow(_api, namespace, name; delete_options_grace_period_seconds=delete_options_grace_period_seconds, delete_options_preconditions_uid=delete_options_preconditions_uid, delete_options_preconditions_resource_version=delete_options_preconditions_resource_version, delete_options_orphan_dependents=delete_options_orphan_dependents, delete_options_propagation_policy=delete_options_propagation_policy, delete_options_dry_run=delete_options_dry_run, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cron_workflow_service_delete_cron_workflow(_api::CronWorkflowServiceApi, response_stream::Channel, namespace::String, name::String; delete_options_grace_period_seconds=nothing, delete_options_preconditions_uid=nothing, delete_options_preconditions_resource_version=nothing, delete_options_orphan_dependents=nothing, delete_options_propagation_policy=nothing, delete_options_dry_run=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_delete_cron_workflow(_api, namespace, name; delete_options_grace_period_seconds=delete_options_grace_period_seconds, delete_options_preconditions_uid=delete_options_preconditions_uid, delete_options_preconditions_resource_version=delete_options_preconditions_resource_version, delete_options_orphan_dependents=delete_options_orphan_dependents, delete_options_propagation_policy=delete_options_propagation_policy, delete_options_dry_run=delete_options_dry_run, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cron_workflow_service_get_cron_workflow_CronWorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1CronWorkflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_cron_workflow_service_get_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, name::String; get_options_resource_version=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cron_workflow_service_get_cron_workflow_CronWorkflowServiceApi, "/api/v1/cron-workflows/{namespace}/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "getOptions.resourceVersion", get_options_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- get_options_resource_version::String

Return: IoArgoprojWorkflowV1alpha1CronWorkflow, OpenAPI.Clients.ApiResponse
"""
function cron_workflow_service_get_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, name::String; get_options_resource_version=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_get_cron_workflow(_api, namespace, name; get_options_resource_version=get_options_resource_version, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cron_workflow_service_get_cron_workflow(_api::CronWorkflowServiceApi, response_stream::Channel, namespace::String, name::String; get_options_resource_version=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_get_cron_workflow(_api, namespace, name; get_options_resource_version=get_options_resource_version, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cron_workflow_service_lint_cron_workflow_CronWorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1CronWorkflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_cron_workflow_service_lint_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, body::IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_cron_workflow_service_lint_cron_workflow_CronWorkflowServiceApi, "/api/v1/cron-workflows/{namespace}/lint", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- body::IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest (required)

Return: IoArgoprojWorkflowV1alpha1CronWorkflow, OpenAPI.Clients.ApiResponse
"""
function cron_workflow_service_lint_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, body::IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest; _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_lint_cron_workflow(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cron_workflow_service_lint_cron_workflow(_api::CronWorkflowServiceApi, response_stream::Channel, namespace::String, body::IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest; _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_lint_cron_workflow(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cron_workflow_service_list_cron_workflows_CronWorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1CronWorkflowList,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_cron_workflow_service_list_cron_workflows(_api::CronWorkflowServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cron_workflow_service_list_cron_workflows_CronWorkflowServiceApi, "/api/v1/cron-workflows/{namespace}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.labelSelector", list_options_label_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.fieldSelector", list_options_field_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.watch", list_options_watch; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.allowWatchBookmarks", list_options_allow_watch_bookmarks; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersion", list_options_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersionMatch", list_options_resource_version_match; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.timeoutSeconds", list_options_timeout_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.limit", list_options_limit; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.continue", list_options_continue; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.sendInitialEvents", list_options_send_initial_events; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- list_options_label_selector::String
- list_options_field_selector::String
- list_options_watch::Bool
- list_options_allow_watch_bookmarks::Bool
- list_options_resource_version::String
- list_options_resource_version_match::String
- list_options_timeout_seconds::String
- list_options_limit::String
- list_options_continue::String
- list_options_send_initial_events::Bool

Return: IoArgoprojWorkflowV1alpha1CronWorkflowList, OpenAPI.Clients.ApiResponse
"""
function cron_workflow_service_list_cron_workflows(_api::CronWorkflowServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_list_cron_workflows(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cron_workflow_service_list_cron_workflows(_api::CronWorkflowServiceApi, response_stream::Channel, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_list_cron_workflows(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cron_workflow_service_resume_cron_workflow_CronWorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1CronWorkflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_cron_workflow_service_resume_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_cron_workflow_service_resume_cron_workflow_CronWorkflowServiceApi, "/api/v1/cron-workflows/{namespace}/{name}/resume", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest (required)

Return: IoArgoprojWorkflowV1alpha1CronWorkflow, OpenAPI.Clients.ApiResponse
"""
function cron_workflow_service_resume_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest; _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_resume_cron_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cron_workflow_service_resume_cron_workflow(_api::CronWorkflowServiceApi, response_stream::Channel, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest; _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_resume_cron_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cron_workflow_service_suspend_cron_workflow_CronWorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1CronWorkflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_cron_workflow_service_suspend_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_cron_workflow_service_suspend_cron_workflow_CronWorkflowServiceApi, "/api/v1/cron-workflows/{namespace}/{name}/suspend", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest (required)

Return: IoArgoprojWorkflowV1alpha1CronWorkflow, OpenAPI.Clients.ApiResponse
"""
function cron_workflow_service_suspend_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest; _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_suspend_cron_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cron_workflow_service_suspend_cron_workflow(_api::CronWorkflowServiceApi, response_stream::Channel, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest; _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_suspend_cron_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cron_workflow_service_update_cron_workflow_CronWorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1CronWorkflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_cron_workflow_service_update_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_cron_workflow_service_update_cron_workflow_CronWorkflowServiceApi, "/api/v1/cron-workflows/{namespace}/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest (required)

Return: IoArgoprojWorkflowV1alpha1CronWorkflow, OpenAPI.Clients.ApiResponse
"""
function cron_workflow_service_update_cron_workflow(_api::CronWorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest; _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_update_cron_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cron_workflow_service_update_cron_workflow(_api::CronWorkflowServiceApi, response_stream::Channel, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest; _mediaType=nothing)
    _ctx = _oacinternal_cron_workflow_service_update_cron_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export cron_workflow_service_create_cron_workflow
export cron_workflow_service_delete_cron_workflow
export cron_workflow_service_get_cron_workflow
export cron_workflow_service_lint_cron_workflow
export cron_workflow_service_list_cron_workflows
export cron_workflow_service_resume_cron_workflow
export cron_workflow_service_suspend_cron_workflow
export cron_workflow_service_update_cron_workflow
