# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct WorkflowServiceApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `WorkflowServiceApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ WorkflowServiceApi }) = "http://localhost:2746"

const _returntypes_workflow_service_create_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_create_workflow(_api::WorkflowServiceApi, namespace::String, body::IoArgoprojWorkflowV1alpha1WorkflowCreateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_workflow_service_create_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- body::IoArgoprojWorkflowV1alpha1WorkflowCreateRequest (required)

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_create_workflow(_api::WorkflowServiceApi, namespace::String, body::IoArgoprojWorkflowV1alpha1WorkflowCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_create_workflow(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_create_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, body::IoArgoprojWorkflowV1alpha1WorkflowCreateRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_create_workflow(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_delete_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_delete_workflow(_api::WorkflowServiceApi, namespace::String, name::String; delete_options_grace_period_seconds=nothing, delete_options_preconditions_uid=nothing, delete_options_preconditions_resource_version=nothing, delete_options_orphan_dependents=nothing, delete_options_propagation_policy=nothing, delete_options_dry_run=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_workflow_service_delete_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.gracePeriodSeconds", delete_options_grace_period_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.preconditions.uid", delete_options_preconditions_uid; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.preconditions.resourceVersion", delete_options_preconditions_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.orphanDependents", delete_options_orphan_dependents; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.propagationPolicy", delete_options_propagation_policy; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.dryRun", delete_options_dry_run; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "force", force; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- delete_options_grace_period_seconds::String
- delete_options_preconditions_uid::String
- delete_options_preconditions_resource_version::String
- delete_options_orphan_dependents::Bool
- delete_options_propagation_policy::String
- delete_options_dry_run::Vector{String}
- force::Bool

Return: Any, OpenAPI.Clients.ApiResponse
"""
function workflow_service_delete_workflow(_api::WorkflowServiceApi, namespace::String, name::String; delete_options_grace_period_seconds=nothing, delete_options_preconditions_uid=nothing, delete_options_preconditions_resource_version=nothing, delete_options_orphan_dependents=nothing, delete_options_propagation_policy=nothing, delete_options_dry_run=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_delete_workflow(_api, namespace, name; delete_options_grace_period_seconds=delete_options_grace_period_seconds, delete_options_preconditions_uid=delete_options_preconditions_uid, delete_options_preconditions_resource_version=delete_options_preconditions_resource_version, delete_options_orphan_dependents=delete_options_orphan_dependents, delete_options_propagation_policy=delete_options_propagation_policy, delete_options_dry_run=delete_options_dry_run, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_delete_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String; delete_options_grace_period_seconds=nothing, delete_options_preconditions_uid=nothing, delete_options_preconditions_resource_version=nothing, delete_options_orphan_dependents=nothing, delete_options_propagation_policy=nothing, delete_options_dry_run=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_delete_workflow(_api, namespace, name; delete_options_grace_period_seconds=delete_options_grace_period_seconds, delete_options_preconditions_uid=delete_options_preconditions_uid, delete_options_preconditions_resource_version=delete_options_preconditions_resource_version, delete_options_orphan_dependents=delete_options_orphan_dependents, delete_options_propagation_policy=delete_options_propagation_policy, delete_options_dry_run=delete_options_dry_run, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_get_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_get_workflow(_api::WorkflowServiceApi, namespace::String, name::String; get_options_resource_version=nothing, fields=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_workflow_service_get_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "getOptions.resourceVersion", get_options_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fields", fields; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- get_options_resource_version::String
- fields::String

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_get_workflow(_api::WorkflowServiceApi, namespace::String, name::String; get_options_resource_version=nothing, fields=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_get_workflow(_api, namespace, name; get_options_resource_version=get_options_resource_version, fields=fields, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_get_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String; get_options_resource_version=nothing, fields=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_get_workflow(_api, namespace, name; get_options_resource_version=get_options_resource_version, fields=fields, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_lint_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_lint_workflow(_api::WorkflowServiceApi, namespace::String, body::IoArgoprojWorkflowV1alpha1WorkflowLintRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_workflow_service_lint_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/lint", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- body::IoArgoprojWorkflowV1alpha1WorkflowLintRequest (required)

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_lint_workflow(_api::WorkflowServiceApi, namespace::String, body::IoArgoprojWorkflowV1alpha1WorkflowLintRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_lint_workflow(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_lint_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, body::IoArgoprojWorkflowV1alpha1WorkflowLintRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_lint_workflow(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_list_workflows_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1WorkflowList,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_list_workflows(_api::WorkflowServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, fields=nothing, name_filter=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_workflow_service_list_workflows_WorkflowServiceApi, "/api/v1/workflows/{namespace}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.labelSelector", list_options_label_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.fieldSelector", list_options_field_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.watch", list_options_watch; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.allowWatchBookmarks", list_options_allow_watch_bookmarks; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersion", list_options_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersionMatch", list_options_resource_version_match; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.timeoutSeconds", list_options_timeout_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.limit", list_options_limit; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.continue", list_options_continue; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.sendInitialEvents", list_options_send_initial_events; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "fields", fields; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nameFilter", name_filter; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- list_options_label_selector::String
- list_options_field_selector::String
- list_options_watch::Bool
- list_options_allow_watch_bookmarks::Bool
- list_options_resource_version::String
- list_options_resource_version_match::String
- list_options_timeout_seconds::String
- list_options_limit::String
- list_options_continue::String
- list_options_send_initial_events::Bool
- fields::String
- name_filter::String

Return: IoArgoprojWorkflowV1alpha1WorkflowList, OpenAPI.Clients.ApiResponse
"""
function workflow_service_list_workflows(_api::WorkflowServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, fields=nothing, name_filter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_list_workflows(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, fields=fields, name_filter=name_filter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_list_workflows(_api::WorkflowServiceApi, response_stream::Channel, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, fields=nothing, name_filter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_list_workflows(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, fields=fields, name_filter=name_filter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_pod_logs_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_pod_logs(_api::WorkflowServiceApi, namespace::String, name::String, pod_name::String; log_options_container=nothing, log_options_follow=nothing, log_options_previous=nothing, log_options_since_seconds=nothing, log_options_since_time_seconds=nothing, log_options_since_time_nanos=nothing, log_options_timestamps=nothing, log_options_tail_lines=nothing, log_options_limit_bytes=nothing, log_options_insecure_skip_t_l_s_verify_backend=nothing, grep=nothing, selector=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_workflow_service_pod_logs_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}/{podName}/log", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "podName", pod_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.container", log_options_container; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.follow", log_options_follow; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.previous", log_options_previous; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.sinceSeconds", log_options_since_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.sinceTime.seconds", log_options_since_time_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.sinceTime.nanos", log_options_since_time_nanos; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.timestamps", log_options_timestamps; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.tailLines", log_options_tail_lines; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.limitBytes", log_options_limit_bytes; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.insecureSkipTLSVerifyBackend", log_options_insecure_skip_t_l_s_verify_backend; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "grep", grep; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "selector", selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.

Params:
- namespace::String (required)
- name::String (required)
- pod_name::String (required)
- log_options_container::String
- log_options_follow::Bool
- log_options_previous::Bool
- log_options_since_seconds::String
- log_options_since_time_seconds::String
- log_options_since_time_nanos::Int64
- log_options_timestamps::Bool
- log_options_tail_lines::String
- log_options_limit_bytes::String
- log_options_insecure_skip_t_l_s_verify_backend::Bool
- grep::String
- selector::String

Return: StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry, OpenAPI.Clients.ApiResponse
"""
function workflow_service_pod_logs(_api::WorkflowServiceApi, namespace::String, name::String, pod_name::String; log_options_container=nothing, log_options_follow=nothing, log_options_previous=nothing, log_options_since_seconds=nothing, log_options_since_time_seconds=nothing, log_options_since_time_nanos=nothing, log_options_timestamps=nothing, log_options_tail_lines=nothing, log_options_limit_bytes=nothing, log_options_insecure_skip_t_l_s_verify_backend=nothing, grep=nothing, selector=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_pod_logs(_api, namespace, name, pod_name; log_options_container=log_options_container, log_options_follow=log_options_follow, log_options_previous=log_options_previous, log_options_since_seconds=log_options_since_seconds, log_options_since_time_seconds=log_options_since_time_seconds, log_options_since_time_nanos=log_options_since_time_nanos, log_options_timestamps=log_options_timestamps, log_options_tail_lines=log_options_tail_lines, log_options_limit_bytes=log_options_limit_bytes, log_options_insecure_skip_t_l_s_verify_backend=log_options_insecure_skip_t_l_s_verify_backend, grep=grep, selector=selector, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_pod_logs(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String, pod_name::String; log_options_container=nothing, log_options_follow=nothing, log_options_previous=nothing, log_options_since_seconds=nothing, log_options_since_time_seconds=nothing, log_options_since_time_nanos=nothing, log_options_timestamps=nothing, log_options_tail_lines=nothing, log_options_limit_bytes=nothing, log_options_insecure_skip_t_l_s_verify_backend=nothing, grep=nothing, selector=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_pod_logs(_api, namespace, name, pod_name; log_options_container=log_options_container, log_options_follow=log_options_follow, log_options_previous=log_options_previous, log_options_since_seconds=log_options_since_seconds, log_options_since_time_seconds=log_options_since_time_seconds, log_options_since_time_nanos=log_options_since_time_nanos, log_options_timestamps=log_options_timestamps, log_options_tail_lines=log_options_tail_lines, log_options_limit_bytes=log_options_limit_bytes, log_options_insecure_skip_t_l_s_verify_backend=log_options_insecure_skip_t_l_s_verify_backend, grep=grep, selector=selector, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_resubmit_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_resubmit_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_workflow_service_resubmit_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}/resubmit", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest (required)

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_resubmit_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_resubmit_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_resubmit_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_resubmit_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_resume_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_resume_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowResumeRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_workflow_service_resume_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}/resume", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::IoArgoprojWorkflowV1alpha1WorkflowResumeRequest (required)

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_resume_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowResumeRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_resume_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_resume_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowResumeRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_resume_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_retry_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_retry_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowRetryRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_workflow_service_retry_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}/retry", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::IoArgoprojWorkflowV1alpha1WorkflowRetryRequest (required)

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_retry_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowRetryRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_retry_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_retry_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowRetryRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_retry_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_set_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_set_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowSetRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_workflow_service_set_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}/set", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::IoArgoprojWorkflowV1alpha1WorkflowSetRequest (required)

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_set_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowSetRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_set_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_set_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowSetRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_set_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_stop_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_stop_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowStopRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_workflow_service_stop_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}/stop", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::IoArgoprojWorkflowV1alpha1WorkflowStopRequest (required)

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_stop_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowStopRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_stop_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_stop_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowStopRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_stop_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_submit_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_submit_workflow(_api::WorkflowServiceApi, namespace::String, body::IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_workflow_service_submit_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/submit", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- body::IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest (required)

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_submit_workflow(_api::WorkflowServiceApi, namespace::String, body::IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_submit_workflow(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_submit_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, body::IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_submit_workflow(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_suspend_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_suspend_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_workflow_service_suspend_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}/suspend", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest (required)

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_suspend_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_suspend_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_suspend_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_suspend_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_terminate_workflow_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1Workflow,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_terminate_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_workflow_service_terminate_workflow_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}/terminate", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest (required)

Return: IoArgoprojWorkflowV1alpha1Workflow, OpenAPI.Clients.ApiResponse
"""
function workflow_service_terminate_workflow(_api::WorkflowServiceApi, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_terminate_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_terminate_workflow(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String, body::IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest; _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_terminate_workflow(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_watch_events_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StreamResultOfIoK8sApiCoreV1Event,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_watch_events(_api::WorkflowServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_workflow_service_watch_events_WorkflowServiceApi, "/api/v1/stream/events/{namespace}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.labelSelector", list_options_label_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.fieldSelector", list_options_field_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.watch", list_options_watch; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.allowWatchBookmarks", list_options_allow_watch_bookmarks; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersion", list_options_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersionMatch", list_options_resource_version_match; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.timeoutSeconds", list_options_timeout_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.limit", list_options_limit; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.continue", list_options_continue; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.sendInitialEvents", list_options_send_initial_events; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- list_options_label_selector::String
- list_options_field_selector::String
- list_options_watch::Bool
- list_options_allow_watch_bookmarks::Bool
- list_options_resource_version::String
- list_options_resource_version_match::String
- list_options_timeout_seconds::String
- list_options_limit::String
- list_options_continue::String
- list_options_send_initial_events::Bool

Return: StreamResultOfIoK8sApiCoreV1Event, OpenAPI.Clients.ApiResponse
"""
function workflow_service_watch_events(_api::WorkflowServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_watch_events(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_watch_events(_api::WorkflowServiceApi, response_stream::Channel, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_watch_events(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_watch_workflows_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_watch_workflows(_api::WorkflowServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, fields=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_workflow_service_watch_workflows_WorkflowServiceApi, "/api/v1/workflow-events/{namespace}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.labelSelector", list_options_label_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.fieldSelector", list_options_field_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.watch", list_options_watch; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.allowWatchBookmarks", list_options_allow_watch_bookmarks; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersion", list_options_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersionMatch", list_options_resource_version_match; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.timeoutSeconds", list_options_timeout_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.limit", list_options_limit; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.continue", list_options_continue; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.sendInitialEvents", list_options_send_initial_events; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "fields", fields; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- list_options_label_selector::String
- list_options_field_selector::String
- list_options_watch::Bool
- list_options_allow_watch_bookmarks::Bool
- list_options_resource_version::String
- list_options_resource_version_match::String
- list_options_timeout_seconds::String
- list_options_limit::String
- list_options_continue::String
- list_options_send_initial_events::Bool
- fields::String

Return: StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent, OpenAPI.Clients.ApiResponse
"""
function workflow_service_watch_workflows(_api::WorkflowServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, fields=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_watch_workflows(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, fields=fields, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_watch_workflows(_api::WorkflowServiceApi, response_stream::Channel, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, fields=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_watch_workflows(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, fields=fields, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_workflow_service_workflow_logs_WorkflowServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_workflow_service_workflow_logs(_api::WorkflowServiceApi, namespace::String, name::String; pod_name=nothing, log_options_container=nothing, log_options_follow=nothing, log_options_previous=nothing, log_options_since_seconds=nothing, log_options_since_time_seconds=nothing, log_options_since_time_nanos=nothing, log_options_timestamps=nothing, log_options_tail_lines=nothing, log_options_limit_bytes=nothing, log_options_insecure_skip_t_l_s_verify_backend=nothing, grep=nothing, selector=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_workflow_service_workflow_logs_WorkflowServiceApi, "/api/v1/workflows/{namespace}/{name}/log", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "podName", pod_name; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.container", log_options_container; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.follow", log_options_follow; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.previous", log_options_previous; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.sinceSeconds", log_options_since_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.sinceTime.seconds", log_options_since_time_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.sinceTime.nanos", log_options_since_time_nanos; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.timestamps", log_options_timestamps; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.tailLines", log_options_tail_lines; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.limitBytes", log_options_limit_bytes; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "logOptions.insecureSkipTLSVerifyBackend", log_options_insecure_skip_t_l_s_verify_backend; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "grep", grep; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "selector", selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- pod_name::String
- log_options_container::String
- log_options_follow::Bool
- log_options_previous::Bool
- log_options_since_seconds::String
- log_options_since_time_seconds::String
- log_options_since_time_nanos::Int64
- log_options_timestamps::Bool
- log_options_tail_lines::String
- log_options_limit_bytes::String
- log_options_insecure_skip_t_l_s_verify_backend::Bool
- grep::String
- selector::String

Return: StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry, OpenAPI.Clients.ApiResponse
"""
function workflow_service_workflow_logs(_api::WorkflowServiceApi, namespace::String, name::String; pod_name=nothing, log_options_container=nothing, log_options_follow=nothing, log_options_previous=nothing, log_options_since_seconds=nothing, log_options_since_time_seconds=nothing, log_options_since_time_nanos=nothing, log_options_timestamps=nothing, log_options_tail_lines=nothing, log_options_limit_bytes=nothing, log_options_insecure_skip_t_l_s_verify_backend=nothing, grep=nothing, selector=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_workflow_logs(_api, namespace, name; pod_name=pod_name, log_options_container=log_options_container, log_options_follow=log_options_follow, log_options_previous=log_options_previous, log_options_since_seconds=log_options_since_seconds, log_options_since_time_seconds=log_options_since_time_seconds, log_options_since_time_nanos=log_options_since_time_nanos, log_options_timestamps=log_options_timestamps, log_options_tail_lines=log_options_tail_lines, log_options_limit_bytes=log_options_limit_bytes, log_options_insecure_skip_t_l_s_verify_backend=log_options_insecure_skip_t_l_s_verify_backend, grep=grep, selector=selector, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function workflow_service_workflow_logs(_api::WorkflowServiceApi, response_stream::Channel, namespace::String, name::String; pod_name=nothing, log_options_container=nothing, log_options_follow=nothing, log_options_previous=nothing, log_options_since_seconds=nothing, log_options_since_time_seconds=nothing, log_options_since_time_nanos=nothing, log_options_timestamps=nothing, log_options_tail_lines=nothing, log_options_limit_bytes=nothing, log_options_insecure_skip_t_l_s_verify_backend=nothing, grep=nothing, selector=nothing, _mediaType=nothing)
    _ctx = _oacinternal_workflow_service_workflow_logs(_api, namespace, name; pod_name=pod_name, log_options_container=log_options_container, log_options_follow=log_options_follow, log_options_previous=log_options_previous, log_options_since_seconds=log_options_since_seconds, log_options_since_time_seconds=log_options_since_time_seconds, log_options_since_time_nanos=log_options_since_time_nanos, log_options_timestamps=log_options_timestamps, log_options_tail_lines=log_options_tail_lines, log_options_limit_bytes=log_options_limit_bytes, log_options_insecure_skip_t_l_s_verify_backend=log_options_insecure_skip_t_l_s_verify_backend, grep=grep, selector=selector, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export workflow_service_create_workflow
export workflow_service_delete_workflow
export workflow_service_get_workflow
export workflow_service_lint_workflow
export workflow_service_list_workflows
export workflow_service_pod_logs
export workflow_service_resubmit_workflow
export workflow_service_resume_workflow
export workflow_service_retry_workflow
export workflow_service_set_workflow
export workflow_service_stop_workflow
export workflow_service_submit_workflow
export workflow_service_suspend_workflow
export workflow_service_terminate_workflow
export workflow_service_watch_events
export workflow_service_watch_workflows
export workflow_service_workflow_logs
