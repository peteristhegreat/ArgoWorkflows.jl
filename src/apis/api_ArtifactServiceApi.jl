# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ArtifactServiceApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ArtifactServiceApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ArtifactServiceApi }) = "http://localhost:2746"

const _returntypes_artifact_service_get_artifact_file_ArtifactServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_artifact_service_get_artifact_file(_api::ArtifactServiceApi, namespace::String, id_discriminator::String, id::String, node_id::String, artifact_name::String, artifact_discriminator::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_artifact_service_get_artifact_file_ArtifactServiceApi, "/artifact-files/{namespace}/{idDiscriminator}/{id}/{nodeId}/{artifactDiscriminator}/{artifactName}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "idDiscriminator", id_discriminator)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "nodeId", node_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "artifactName", artifact_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "artifactDiscriminator", artifact_discriminator)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an artifact.

Params:
- namespace::String (required)
- id_discriminator::String (required)
- id::String (required)
- node_id::String (required)
- artifact_name::String (required)
- artifact_discriminator::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function artifact_service_get_artifact_file(_api::ArtifactServiceApi, namespace::String, id_discriminator::String, id::String, node_id::String, artifact_name::String, artifact_discriminator::String; _mediaType=nothing)
    _ctx = _oacinternal_artifact_service_get_artifact_file(_api, namespace, id_discriminator, id, node_id, artifact_name, artifact_discriminator; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function artifact_service_get_artifact_file(_api::ArtifactServiceApi, response_stream::Channel, namespace::String, id_discriminator::String, id::String, node_id::String, artifact_name::String, artifact_discriminator::String; _mediaType=nothing)
    _ctx = _oacinternal_artifact_service_get_artifact_file(_api, namespace, id_discriminator, id, node_id, artifact_name, artifact_discriminator; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_artifact_service_get_input_artifact_ArtifactServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_artifact_service_get_input_artifact(_api::ArtifactServiceApi, namespace::String, name::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_artifact_service_get_input_artifact_ArtifactServiceApi, "/input-artifacts/{namespace}/{name}/{nodeId}/{artifactName}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "nodeId", node_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "artifactName", artifact_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an input artifact.

Params:
- namespace::String (required)
- name::String (required)
- node_id::String (required)
- artifact_name::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function artifact_service_get_input_artifact(_api::ArtifactServiceApi, namespace::String, name::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = _oacinternal_artifact_service_get_input_artifact(_api, namespace, name, node_id, artifact_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function artifact_service_get_input_artifact(_api::ArtifactServiceApi, response_stream::Channel, namespace::String, name::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = _oacinternal_artifact_service_get_input_artifact(_api, namespace, name, node_id, artifact_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_artifact_service_get_input_artifact_by_u_i_d_ArtifactServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_artifact_service_get_input_artifact_by_u_i_d(_api::ArtifactServiceApi, uid::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_artifact_service_get_input_artifact_by_u_i_d_ArtifactServiceApi, "/input-artifacts-by-uid/{uid}/{nodeId}/{artifactName}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "uid", uid)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "nodeId", node_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "artifactName", artifact_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an input artifact by UID.

Params:
- uid::String (required)
- node_id::String (required)
- artifact_name::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function artifact_service_get_input_artifact_by_u_i_d(_api::ArtifactServiceApi, uid::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = _oacinternal_artifact_service_get_input_artifact_by_u_i_d(_api, uid, node_id, artifact_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function artifact_service_get_input_artifact_by_u_i_d(_api::ArtifactServiceApi, response_stream::Channel, uid::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = _oacinternal_artifact_service_get_input_artifact_by_u_i_d(_api, uid, node_id, artifact_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_artifact_service_get_output_artifact_ArtifactServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_artifact_service_get_output_artifact(_api::ArtifactServiceApi, namespace::String, name::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_artifact_service_get_output_artifact_ArtifactServiceApi, "/artifacts/{namespace}/{name}/{nodeId}/{artifactName}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "nodeId", node_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "artifactName", artifact_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an output artifact.

Params:
- namespace::String (required)
- name::String (required)
- node_id::String (required)
- artifact_name::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function artifact_service_get_output_artifact(_api::ArtifactServiceApi, namespace::String, name::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = _oacinternal_artifact_service_get_output_artifact(_api, namespace, name, node_id, artifact_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function artifact_service_get_output_artifact(_api::ArtifactServiceApi, response_stream::Channel, namespace::String, name::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = _oacinternal_artifact_service_get_output_artifact(_api, namespace, name, node_id, artifact_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_artifact_service_get_output_artifact_by_u_i_d_ArtifactServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_artifact_service_get_output_artifact_by_u_i_d(_api::ArtifactServiceApi, uid::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_artifact_service_get_output_artifact_by_u_i_d_ArtifactServiceApi, "/artifacts-by-uid/{uid}/{nodeId}/{artifactName}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "uid", uid)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "nodeId", node_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "artifactName", artifact_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an output artifact by UID.

Params:
- uid::String (required)
- node_id::String (required)
- artifact_name::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function artifact_service_get_output_artifact_by_u_i_d(_api::ArtifactServiceApi, uid::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = _oacinternal_artifact_service_get_output_artifact_by_u_i_d(_api, uid, node_id, artifact_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function artifact_service_get_output_artifact_by_u_i_d(_api::ArtifactServiceApi, response_stream::Channel, uid::String, node_id::String, artifact_name::String; _mediaType=nothing)
    _ctx = _oacinternal_artifact_service_get_output_artifact_by_u_i_d(_api, uid, node_id, artifact_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export artifact_service_get_artifact_file
export artifact_service_get_input_artifact
export artifact_service_get_input_artifact_by_u_i_d
export artifact_service_get_output_artifact
export artifact_service_get_output_artifact_by_u_i_d
