# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct EventServiceApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `EventServiceApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ EventServiceApi }) = "http://localhost:2746"

const _returntypes_event_service_list_workflow_event_bindings_EventServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojWorkflowV1alpha1WorkflowEventBindingList,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_event_service_list_workflow_event_bindings(_api::EventServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_event_service_list_workflow_event_bindings_EventServiceApi, "/api/v1/workflow-event-bindings/{namespace}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.labelSelector", list_options_label_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.fieldSelector", list_options_field_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.watch", list_options_watch; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.allowWatchBookmarks", list_options_allow_watch_bookmarks; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersion", list_options_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersionMatch", list_options_resource_version_match; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.timeoutSeconds", list_options_timeout_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.limit", list_options_limit; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.continue", list_options_continue; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.sendInitialEvents", list_options_send_initial_events; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- list_options_label_selector::String
- list_options_field_selector::String
- list_options_watch::Bool
- list_options_allow_watch_bookmarks::Bool
- list_options_resource_version::String
- list_options_resource_version_match::String
- list_options_timeout_seconds::String
- list_options_limit::String
- list_options_continue::String
- list_options_send_initial_events::Bool

Return: IoArgoprojWorkflowV1alpha1WorkflowEventBindingList, OpenAPI.Clients.ApiResponse
"""
function event_service_list_workflow_event_bindings(_api::EventServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = _oacinternal_event_service_list_workflow_event_bindings(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function event_service_list_workflow_event_bindings(_api::EventServiceApi, response_stream::Channel, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = _oacinternal_event_service_list_workflow_event_bindings(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_event_service_receive_event_EventServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_event_service_receive_event(_api::EventServiceApi, namespace::String, discriminator::String, body::Any; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_event_service_receive_event_EventServiceApi, "/api/v1/events/{namespace}/{discriminator}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "discriminator", discriminator)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- discriminator::String (required)
- body::Any (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function event_service_receive_event(_api::EventServiceApi, namespace::String, discriminator::String, body::Any; _mediaType=nothing)
    _ctx = _oacinternal_event_service_receive_event(_api, namespace, discriminator, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function event_service_receive_event(_api::EventServiceApi, response_stream::Channel, namespace::String, discriminator::String, body::Any; _mediaType=nothing)
    _ctx = _oacinternal_event_service_receive_event(_api, namespace, discriminator, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export event_service_list_workflow_event_bindings
export event_service_receive_event
