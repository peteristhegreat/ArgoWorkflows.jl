# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SensorServiceApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SensorServiceApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SensorServiceApi }) = "http://localhost:2746"

const _returntypes_sensor_service_create_sensor_SensorServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojEventsV1alpha1Sensor,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_sensor_service_create_sensor(_api::SensorServiceApi, namespace::String, body::SensorCreateSensorRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_sensor_service_create_sensor_SensorServiceApi, "/api/v1/sensors/{namespace}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- body::SensorCreateSensorRequest (required)

Return: IoArgoprojEventsV1alpha1Sensor, OpenAPI.Clients.ApiResponse
"""
function sensor_service_create_sensor(_api::SensorServiceApi, namespace::String, body::SensorCreateSensorRequest; _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_create_sensor(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function sensor_service_create_sensor(_api::SensorServiceApi, response_stream::Channel, namespace::String, body::SensorCreateSensorRequest; _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_create_sensor(_api, namespace, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_sensor_service_delete_sensor_SensorServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_sensor_service_delete_sensor(_api::SensorServiceApi, namespace::String, name::String; delete_options_grace_period_seconds=nothing, delete_options_preconditions_uid=nothing, delete_options_preconditions_resource_version=nothing, delete_options_orphan_dependents=nothing, delete_options_propagation_policy=nothing, delete_options_dry_run=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_sensor_service_delete_sensor_SensorServiceApi, "/api/v1/sensors/{namespace}/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.gracePeriodSeconds", delete_options_grace_period_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.preconditions.uid", delete_options_preconditions_uid; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.preconditions.resourceVersion", delete_options_preconditions_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.orphanDependents", delete_options_orphan_dependents; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.propagationPolicy", delete_options_propagation_policy; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "deleteOptions.dryRun", delete_options_dry_run; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- delete_options_grace_period_seconds::String
- delete_options_preconditions_uid::String
- delete_options_preconditions_resource_version::String
- delete_options_orphan_dependents::Bool
- delete_options_propagation_policy::String
- delete_options_dry_run::Vector{String}

Return: Any, OpenAPI.Clients.ApiResponse
"""
function sensor_service_delete_sensor(_api::SensorServiceApi, namespace::String, name::String; delete_options_grace_period_seconds=nothing, delete_options_preconditions_uid=nothing, delete_options_preconditions_resource_version=nothing, delete_options_orphan_dependents=nothing, delete_options_propagation_policy=nothing, delete_options_dry_run=nothing, _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_delete_sensor(_api, namespace, name; delete_options_grace_period_seconds=delete_options_grace_period_seconds, delete_options_preconditions_uid=delete_options_preconditions_uid, delete_options_preconditions_resource_version=delete_options_preconditions_resource_version, delete_options_orphan_dependents=delete_options_orphan_dependents, delete_options_propagation_policy=delete_options_propagation_policy, delete_options_dry_run=delete_options_dry_run, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function sensor_service_delete_sensor(_api::SensorServiceApi, response_stream::Channel, namespace::String, name::String; delete_options_grace_period_seconds=nothing, delete_options_preconditions_uid=nothing, delete_options_preconditions_resource_version=nothing, delete_options_orphan_dependents=nothing, delete_options_propagation_policy=nothing, delete_options_dry_run=nothing, _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_delete_sensor(_api, namespace, name; delete_options_grace_period_seconds=delete_options_grace_period_seconds, delete_options_preconditions_uid=delete_options_preconditions_uid, delete_options_preconditions_resource_version=delete_options_preconditions_resource_version, delete_options_orphan_dependents=delete_options_orphan_dependents, delete_options_propagation_policy=delete_options_propagation_policy, delete_options_dry_run=delete_options_dry_run, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_sensor_service_get_sensor_SensorServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojEventsV1alpha1Sensor,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_sensor_service_get_sensor(_api::SensorServiceApi, namespace::String, name::String; get_options_resource_version=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_sensor_service_get_sensor_SensorServiceApi, "/api/v1/sensors/{namespace}/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "getOptions.resourceVersion", get_options_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- get_options_resource_version::String

Return: IoArgoprojEventsV1alpha1Sensor, OpenAPI.Clients.ApiResponse
"""
function sensor_service_get_sensor(_api::SensorServiceApi, namespace::String, name::String; get_options_resource_version=nothing, _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_get_sensor(_api, namespace, name; get_options_resource_version=get_options_resource_version, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function sensor_service_get_sensor(_api::SensorServiceApi, response_stream::Channel, namespace::String, name::String; get_options_resource_version=nothing, _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_get_sensor(_api, namespace, name; get_options_resource_version=get_options_resource_version, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_sensor_service_list_sensors_SensorServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojEventsV1alpha1SensorList,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_sensor_service_list_sensors(_api::SensorServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_sensor_service_list_sensors_SensorServiceApi, "/api/v1/sensors/{namespace}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.labelSelector", list_options_label_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.fieldSelector", list_options_field_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.watch", list_options_watch; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.allowWatchBookmarks", list_options_allow_watch_bookmarks; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersion", list_options_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersionMatch", list_options_resource_version_match; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.timeoutSeconds", list_options_timeout_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.limit", list_options_limit; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.continue", list_options_continue; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.sendInitialEvents", list_options_send_initial_events; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- list_options_label_selector::String
- list_options_field_selector::String
- list_options_watch::Bool
- list_options_allow_watch_bookmarks::Bool
- list_options_resource_version::String
- list_options_resource_version_match::String
- list_options_timeout_seconds::String
- list_options_limit::String
- list_options_continue::String
- list_options_send_initial_events::Bool

Return: IoArgoprojEventsV1alpha1SensorList, OpenAPI.Clients.ApiResponse
"""
function sensor_service_list_sensors(_api::SensorServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_list_sensors(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function sensor_service_list_sensors(_api::SensorServiceApi, response_stream::Channel, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_list_sensors(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_sensor_service_sensors_logs_SensorServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StreamResultOfSensorLogEntry,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_sensor_service_sensors_logs(_api::SensorServiceApi, namespace::String; name=nothing, trigger_name=nothing, grep=nothing, pod_log_options_container=nothing, pod_log_options_follow=nothing, pod_log_options_previous=nothing, pod_log_options_since_seconds=nothing, pod_log_options_since_time_seconds=nothing, pod_log_options_since_time_nanos=nothing, pod_log_options_timestamps=nothing, pod_log_options_tail_lines=nothing, pod_log_options_limit_bytes=nothing, pod_log_options_insecure_skip_t_l_s_verify_backend=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_sensor_service_sensors_logs_SensorServiceApi, "/api/v1/stream/sensors/{namespace}/logs", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "triggerName", trigger_name; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "grep", grep; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "podLogOptions.container", pod_log_options_container; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "podLogOptions.follow", pod_log_options_follow; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "podLogOptions.previous", pod_log_options_previous; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "podLogOptions.sinceSeconds", pod_log_options_since_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "podLogOptions.sinceTime.seconds", pod_log_options_since_time_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "podLogOptions.sinceTime.nanos", pod_log_options_since_time_nanos; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "podLogOptions.timestamps", pod_log_options_timestamps; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "podLogOptions.tailLines", pod_log_options_tail_lines; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "podLogOptions.limitBytes", pod_log_options_limit_bytes; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "podLogOptions.insecureSkipTLSVerifyBackend", pod_log_options_insecure_skip_t_l_s_verify_backend; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String
- trigger_name::String
- grep::String
- pod_log_options_container::String
- pod_log_options_follow::Bool
- pod_log_options_previous::Bool
- pod_log_options_since_seconds::String
- pod_log_options_since_time_seconds::String
- pod_log_options_since_time_nanos::Int64
- pod_log_options_timestamps::Bool
- pod_log_options_tail_lines::String
- pod_log_options_limit_bytes::String
- pod_log_options_insecure_skip_t_l_s_verify_backend::Bool

Return: StreamResultOfSensorLogEntry, OpenAPI.Clients.ApiResponse
"""
function sensor_service_sensors_logs(_api::SensorServiceApi, namespace::String; name=nothing, trigger_name=nothing, grep=nothing, pod_log_options_container=nothing, pod_log_options_follow=nothing, pod_log_options_previous=nothing, pod_log_options_since_seconds=nothing, pod_log_options_since_time_seconds=nothing, pod_log_options_since_time_nanos=nothing, pod_log_options_timestamps=nothing, pod_log_options_tail_lines=nothing, pod_log_options_limit_bytes=nothing, pod_log_options_insecure_skip_t_l_s_verify_backend=nothing, _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_sensors_logs(_api, namespace; name=name, trigger_name=trigger_name, grep=grep, pod_log_options_container=pod_log_options_container, pod_log_options_follow=pod_log_options_follow, pod_log_options_previous=pod_log_options_previous, pod_log_options_since_seconds=pod_log_options_since_seconds, pod_log_options_since_time_seconds=pod_log_options_since_time_seconds, pod_log_options_since_time_nanos=pod_log_options_since_time_nanos, pod_log_options_timestamps=pod_log_options_timestamps, pod_log_options_tail_lines=pod_log_options_tail_lines, pod_log_options_limit_bytes=pod_log_options_limit_bytes, pod_log_options_insecure_skip_t_l_s_verify_backend=pod_log_options_insecure_skip_t_l_s_verify_backend, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function sensor_service_sensors_logs(_api::SensorServiceApi, response_stream::Channel, namespace::String; name=nothing, trigger_name=nothing, grep=nothing, pod_log_options_container=nothing, pod_log_options_follow=nothing, pod_log_options_previous=nothing, pod_log_options_since_seconds=nothing, pod_log_options_since_time_seconds=nothing, pod_log_options_since_time_nanos=nothing, pod_log_options_timestamps=nothing, pod_log_options_tail_lines=nothing, pod_log_options_limit_bytes=nothing, pod_log_options_insecure_skip_t_l_s_verify_backend=nothing, _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_sensors_logs(_api, namespace; name=name, trigger_name=trigger_name, grep=grep, pod_log_options_container=pod_log_options_container, pod_log_options_follow=pod_log_options_follow, pod_log_options_previous=pod_log_options_previous, pod_log_options_since_seconds=pod_log_options_since_seconds, pod_log_options_since_time_seconds=pod_log_options_since_time_seconds, pod_log_options_since_time_nanos=pod_log_options_since_time_nanos, pod_log_options_timestamps=pod_log_options_timestamps, pod_log_options_tail_lines=pod_log_options_tail_lines, pod_log_options_limit_bytes=pod_log_options_limit_bytes, pod_log_options_insecure_skip_t_l_s_verify_backend=pod_log_options_insecure_skip_t_l_s_verify_backend, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_sensor_service_update_sensor_SensorServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoArgoprojEventsV1alpha1Sensor,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_sensor_service_update_sensor(_api::SensorServiceApi, namespace::String, name::String, body::SensorUpdateSensorRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_sensor_service_update_sensor_SensorServiceApi, "/api/v1/sensors/{namespace}/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- name::String (required)
- body::SensorUpdateSensorRequest (required)

Return: IoArgoprojEventsV1alpha1Sensor, OpenAPI.Clients.ApiResponse
"""
function sensor_service_update_sensor(_api::SensorServiceApi, namespace::String, name::String, body::SensorUpdateSensorRequest; _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_update_sensor(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function sensor_service_update_sensor(_api::SensorServiceApi, response_stream::Channel, namespace::String, name::String, body::SensorUpdateSensorRequest; _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_update_sensor(_api, namespace, name, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_sensor_service_watch_sensors_SensorServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StreamResultOfSensorSensorWatchEvent,
    Regex("^" * replace("0", "x"=>".") * "\$") => GrpcGatewayRuntimeError,
)

function _oacinternal_sensor_service_watch_sensors(_api::SensorServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_sensor_service_watch_sensors_SensorServiceApi, "/api/v1/stream/sensors/{namespace}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.labelSelector", list_options_label_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.fieldSelector", list_options_field_selector; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.watch", list_options_watch; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.allowWatchBookmarks", list_options_allow_watch_bookmarks; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersion", list_options_resource_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.resourceVersionMatch", list_options_resource_version_match; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.timeoutSeconds", list_options_timeout_seconds; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.limit", list_options_limit; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.continue", list_options_continue; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "listOptions.sendInitialEvents", list_options_send_initial_events; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- namespace::String (required)
- list_options_label_selector::String
- list_options_field_selector::String
- list_options_watch::Bool
- list_options_allow_watch_bookmarks::Bool
- list_options_resource_version::String
- list_options_resource_version_match::String
- list_options_timeout_seconds::String
- list_options_limit::String
- list_options_continue::String
- list_options_send_initial_events::Bool

Return: StreamResultOfSensorSensorWatchEvent, OpenAPI.Clients.ApiResponse
"""
function sensor_service_watch_sensors(_api::SensorServiceApi, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_watch_sensors(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function sensor_service_watch_sensors(_api::SensorServiceApi, response_stream::Channel, namespace::String; list_options_label_selector=nothing, list_options_field_selector=nothing, list_options_watch=nothing, list_options_allow_watch_bookmarks=nothing, list_options_resource_version=nothing, list_options_resource_version_match=nothing, list_options_timeout_seconds=nothing, list_options_limit=nothing, list_options_continue=nothing, list_options_send_initial_events=nothing, _mediaType=nothing)
    _ctx = _oacinternal_sensor_service_watch_sensors(_api, namespace; list_options_label_selector=list_options_label_selector, list_options_field_selector=list_options_field_selector, list_options_watch=list_options_watch, list_options_allow_watch_bookmarks=list_options_allow_watch_bookmarks, list_options_resource_version=list_options_resource_version, list_options_resource_version_match=list_options_resource_version_match, list_options_timeout_seconds=list_options_timeout_seconds, list_options_limit=list_options_limit, list_options_continue=list_options_continue, list_options_send_initial_events=list_options_send_initial_events, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export sensor_service_create_sensor
export sensor_service_delete_sensor
export sensor_service_get_sensor
export sensor_service_list_sensors
export sensor_service_sensors_logs
export sensor_service_update_sensor
export sensor_service_watch_sensors
